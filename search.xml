<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo博文图片显示问题[SOLVED]</title>
    <url>/2022/11/01/hexo%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98-SOLVED/</url>
    <content><![CDATA[<p>在使用hexo进行博客搭建的过程，发现使用Markdown语法的文档，无法正常加载上传的图片，例如</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Potential Flow Analysis</span>](<span class="link">./2022-11-1-Potential-Flow-Analysis-Magnus-Effect/potential-flow-analysis-velocity-field-plot.png</span>)</span><br></pre></td></tr></table></figure>
<p>通过观察构建信息，发现图片总是指向一个以 <code>/.io/</code> 开头的文件夹。经过在hexo官网的搜索，在评论区发现（😓）这个问题似乎是 <code>hexo-asset-image</code> 包的一个bug，只需要修改 <code>node_modules/hexo-asset-image/index.js</code> 的第24行，将其改为</p>
<figure class="highlight javascript"><figcaption><span>node_modules/hexo-asset-image/index.js</span></figcaption><table><tr><td class="code"><pre><span class="line"># <span class="title class_">JavaScript</span> </span><br><span class="line"><span class="keyword">var</span> endPos = link.<span class="property">length</span>;</span><br></pre></td></tr></table></figure>
<p>即可。</p>
]]></content>
      <categories>
        <category>Technical Issues</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Potential Flow Analysis - Magnus Effect</title>
    <url>/2022/11/01/Potential-Flow-Analysis-Magnus-Effect/</url>
    <content><![CDATA[<h2 id="velocity-vector-representation">Velocity vector representation</h2>
<p>Potential flow describes the velocity field as the gradient of the velocity potential. For any position vector <span class="math inline">\(\pmb{r}\)</span> in the vector field, write down the velocity potential as <span class="math inline">\(\phi\)</span>, then in the 2D polar coordinate system, the velocity vector can be represented as <span class="math display">\[
\pmb{v} = \frac{\partial \phi}{\partial r}\pmb{e}_r + \frac{1}{r}\frac{\partial \phi}{\partial \theta}\pmb{e}_{\theta}
\]</span> and the components of the velocity vector along two directions are <span class="math display">\[
\begin{aligned}
&amp;\pmb{v}_r = \frac{\partial \phi}{\partial r} \pmb{e}_r\\
&amp;\pmb{v}_{\theta} = \frac{1}{r}\frac{\partial \phi}{\partial \theta} \pmb{e}_{\theta}
\end{aligned}
\]</span></p>
<span id="more"></span>
<h2 id="d-potential-flow-expression">2D potential flow expression</h2>
<p>Let's assume that there is a 2D velocity field with uniform velocity <span class="math inline">\(U\)</span> and pressure <span class="math inline">\(p_{\infty}\)</span>. Somewhere in this velocity field, there is a rotating circular cylinder with radius <span class="math inline">\(R\)</span> and angular velocity <span class="math inline">\(\displaystyle \frac{d\theta}{dt}\)</span>. Taking the center of the cylinder as the origin, a polar coordinate system could be established, and the velocity potential at a random point <span class="math inline">\((r, \theta)\)</span> would be constructed by the following 3 parts:</p>
<ol type="1">
<li>Uniform Stream - <span class="math inline">\(\phi_1 = Urcos\theta\)</span></li>
<li>Source Doublet - <span class="math inline">\(\phi_2 = UR^2 \displaystyle \frac{cos\theta}{r}\)</span></li>
<li>Potential Vortex - <span class="math inline">\(\phi_3 = \displaystyle \frac{\Gamma \theta}{2\pi}\)</span></li>
</ol>
<p><span class="math inline">\(\Gamma\)</span> represents a potential vortex with circulation, which has a counterclockwise direction. Thus, velocity potential at a random point <span class="math inline">\((r, \theta)\)</span> is <span class="math display">\[
\phi = \phi_1 + \phi_2 + \phi_3 = Urcos\theta + UR^2\frac{cos\theta}{r} + \frac{\Gamma \theta}{2\pi}
\]</span></p>
<h2 id="velocity-pressure-field">Velocity &amp; Pressure field</h2>
<p>We can derive the expression of two components of the velocity vector as <span class="math display">\[
\begin{aligned}
&amp;u_r= \frac{\partial \phi}{\partial r} = Ucos\theta - \frac{UR^2cos\theta}{r^2} \\
&amp;u_{\theta} = \frac{1}{r}\frac{\partial \phi}{\partial \theta} = \frac{1}{r}(-Ursin\theta - UR^2\frac{sin\theta}{r}+\frac{\Gamma}{2\pi})
=-Usin\theta - \frac{UR^2sin\theta}{r^2} +\frac{\Gamma}{2\pi r} \\
\end{aligned}
\]</span> According to Bernoulli equation, pressure at a random point <span class="math inline">\((r, \theta)\)</span> will be derived as <span class="math display">\[
p = p_{\infty}+\frac{\rho}{2}(U^2-\pmb{v}^2)=p_{\infty}+\frac{\rho}{2}[U^2-(u_r^2 + u_{\theta}^2)]
\]</span> <span class="math display">\[
p = p_{\infty} +\frac{\rho}{2}[U^2(\frac{R^4}{r^4}-2cos2\theta\frac{R^2}{r^2})+(\frac{\Gamma}{2\pi r})^2-\frac{\Gamma}{\pi r}Usin\theta(1+\frac{R^2}{r^2})]
\]</span></p>
<h2 id="dimensionless-pressure-coefficient">Dimensionless pressure coefficient</h2>
<p>The dimensionless pressure coefficient <span class="math inline">\(c_p\)</span> can be expressed as <span class="math display">\[
c_p = \frac{p - p_{\infty}}{\displaystyle\frac{\rho}{2}u_{\infty}}= 1-\frac{\pmb{v}^2}{u^2_{\infty}}
\]</span> <span class="math display">\[
c_p = \frac{p - p_{\infty}}{\displaystyle\frac{\rho}{2}u_{\infty}}= 1-\frac{\pmb{v}^2}{u^2_{\infty}} = -\frac{U^2(\displaystyle\frac{R^4}{r^4}-2cos2\theta\frac{R^2}{r^2})+(\frac{\Gamma}{2\pi r})^2-\frac{\Gamma}{\pi r}Usin\theta(1+\frac{R^2}{r^2})}{U^2}
\]</span></p>
<h2 id="magnus-force">Magnus force</h2>
<p>As Magnus force is the force acting on the target cylinder, let's take a look at the pressure along the contour. Let <span class="math inline">\(r=R\)</span>, the velocity vector will be <span class="math display">\[
\begin{aligned}
&amp;u_r = 0\\
&amp;u_{\theta} = -2Usin\theta + \frac{\Gamma}{2\pi r}
\end{aligned}
\]</span> And the pressure along the contour will be simplified as <span class="math display">\[
p_{r=R} = p_{\infty} + \frac{\rho}{2} [U^2(1-4sin^2\theta) + \frac{2\Gamma U sin\theta}{\pi r} - (\frac{\Gamma}{2\pi r})^2]
\]</span> Then it will be possible to calculate Magnus force by integrating the pressure around cylinder <span class="math display">\[
F_{L}=\int_0^{2\pi}-p_{r=R} \cdot Rsin\theta d\theta
\]</span> The expression will be simplified as follows due to the odd power integral property of sine function <span class="math display">\[
F_L = -\frac{\rho \Gamma U}{\pi}\int_0^{2\pi}sin^2\theta d\theta
\]</span> Because that <span class="math display">\[
\int_0^{2\pi}sin^2\theta d\theta = \int_0^{2\pi} \frac{1-cos2\theta}{2} d\theta = \pi
\]</span> then Magnus force can be expressed in an elegant form <span class="math display">\[
F_L = -\rho \Gamma U
\]</span></p>
<h2 id="potential-flow-plots">Potential flow plots</h2>
<figure>
<img src="/2022/11/01/Potential-Flow-Analysis-Magnus-Effect//potential-flow-analysis-velocity-field-plot.png" alt><figcaption>Potential Flow Plots by Sean Zhou</figcaption>
</figure>
]]></content>
      <categories>
        <category>Mechanics</category>
      </categories>
      <tags>
        <tag>Aerodynamics</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言标准</title>
    <url>/2022/11/02/C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86/</url>
    <content><![CDATA[<h2 id="classic-c">Classic C</h2>
<p>最早的C语言标准是 Kernighan &amp; Ritchie 的 <em>The C Programming Language</em> ，也被称为 <em>K&amp;R C</em> 或 <em>Classic C</em> 。</p>
<h2 id="c89">C89</h2>
<p>最早的C语言国际标准则是 1989 年通过的 ANSI C 标准，这个版本的C语言被简称为 <em>C89</em> ；一年以后， ISO 也通过了本质上与 C89 相同的标准，即 1990 年的 ISO C ，又称为 <em>C90</em> 。<strong>所以 C89 和 C90 是同一个版本的C语言。</strong> 由于这个标准实际上是 ANSI 制定的，人们更习惯以 ANSI C 或 C89 来表示这个版本的C语言。</p>
<h2 id="c99">C99</h2>
<p>为了实现以下三个目标：</p>
<ul>
<li>Internationalization</li>
<li>Correction of deficiencies</li>
<li>Improvement of computational usefulness</li>
</ul>
<p>ANSI/ISO 标准委员会对 C89 进行了一定的更新。</p>
<h2 id="c11">C11</h2>
<p>C语言标准委员会经过观察，发现 C99 标准的执行存在一定的问题。某些 C99 标准对许多应用场景是无用的，另外C语言需要进一步适应当前多核处理的趋势，为此 C11 标准被推出。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu/Debian从源码安装Python记录</title>
    <url>/2022/11/02/Ubuntu-Debian%E4%BB%8E%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85Python%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>先安装编译所需的依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update </span><br><span class="line">sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>从官网下载源码包，例如 <code>Python-3.10.7.tgz</code>，随便放到哪个目录下，解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf Python-3.10.7.tgz</span><br></pre></td></tr></table></figure>
<p>进入解压所得的文件夹，先生成Makefile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --enable-optimizations</span><br></pre></td></tr></table></figure>
<p>经过一段时间的刷屏后，进行编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j $(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>
<p><code>$(nproc)</code> 表示自动从环境中获取当前处理器的最大核心数。</p>
<p>完成编译后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make altinstall</span><br></pre></td></tr></table></figure>
<p>这样会将Python自动安装到 <code>/usr/local/bin</code> 和 <code>/usr/local/lib</code>。这时输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3.10</span><br></pre></td></tr></table></figure>
<p>应该能够呼出Python Interactive Shell了，最后建立软链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/bin/python3.10 /usr/bin/python3</span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/bin/python3.10 /usr/bin/python</span><br></pre></td></tr></table></figure>
<p>这样就可以通过 <code>python3</code> 或者 <code>python</code> 来调用Python3.10了。</p>
]]></content>
      <categories>
        <category>Technical Issues</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Debian</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能导论-概论</title>
    <url>/2022/11/02/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA-%E6%A6%82%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="人工智能的发展历程">人工智能的发展历程</h2>
<h3 id="人工智能的起源">人工智能的起源</h3>
<h4 id="图灵机">图灵机</h4>
<p>1936年英国数学家艾伦图灵提出了一种计算模型——图灵机，这种计算模型能够模拟人类所能完成的任何计算过程。</p>
<h4 id="图灵测试">图灵测试</h4>
<p>1950年图灵提出了图灵测试，让人与机器对话，如果人无法判断对话方为机器还是真实的人，那么认为这个机器通过了图灵测试，说明机器是能够思考的。</p>
<h4 id="达特茅斯会议">达特茅斯会议</h4>
<p>1956年8月31日，由约翰麦卡锡等人发起，首次提出了Artificial Intelligence概念。达特茅斯会议被誉为人工智能的开端。</p>
<span id="more"></span>
<h4 id="感知器">感知器</h4>
<p>弗兰克罗森布拉特于1958年首次定义感知器Perceptron。</p>
<ul>
<li>二元线性分类器</li>
<li>最简单的前向神经网络</li>
<li>单层人工神经网络</li>
</ul>
<h4 id="美国政府取得的成果">美国政府取得的成果</h4>
<p>美国政府在上世纪对人工智能进行了大量资金的投入。</p>
<ul>
<li>1959年，亚瑟塞缪尔开发的西洋跳棋程序战胜了当时的西洋棋大师。亚瑟塞缪尔被称为机器学习之父。</li>
<li>1960年约翰麦卡锡开发了LISP语言。</li>
<li>1964年-1966年，MIT人工智能实验室编写了世界上第一个聊天程序ELIZA。</li>
<li>1966年-1972年，斯坦福研究院人工智能中心研制了第一款移动机器人Shakey。</li>
</ul>
<h4 id="人工智能的发展陷入停滞">人工智能的发展陷入停滞</h4>
<ul>
<li>1969年Minsky&amp;Papert出版了《Perceptrons》，证明了感知机对于异或等线性不可分问题不适用</li>
<li>当时人们希望用人工智能解决的主要是一些搜索问题，但是由于现实中的许多问题计算量太大，人工智能被认为无法解决这些问题</li>
<li>1973年，James Lighthill向英国政府提交了一份研究报告，认为人工智能的研究已经失败了</li>
</ul>
<h3 id="人工智能的发展">人工智能的发展</h3>
<h4 id="专家系统">专家系统</h4>
<h5 id="mycin系统">MYCIN系统</h5>
<p>1971年由斯坦福大学研制，是早期医疗诊断专家系统中比较成功的应用实例，用于医学诊断感染性疾病。</p>
<h5 id="cyc项目">Cyc项目</h5>
<p>1984年由Cycorp公司开发维护，致力于将各领域知识综合集成，实现知识推理。</p>
<h5 id="局限性">局限性</h5>
<ul>
<li>特殊情况下无法做出创造性的回应</li>
<li>知识库中的错误可能导致错误的决策</li>
<li>维护成本太高</li>
<li>人类专家解决方案可能不同，而且带有主观性</li>
</ul>
<h4 id="反向传播bp算法">反向传播BP算法</h4>
<p>1982年由鲁梅尔哈特和辛顿提出，这是一种可以训练的算法，具有以下优点</p>
<ul>
<li>系统性地解决了多层神经网络隐藏层连接权重的学习问题</li>
<li>数学上给出了完整的推导</li>
<li>解决了简单感知机不能解决异或的问题</li>
</ul>
<p>目前绝大多数的神经网络模型都采用了BP网络，可以说BP网络是人工智能前向神经网络的核心。</p>
<h4 id="卷积神经网络">卷积神经网络</h4>
<p>1989年，勒丘恩和本吉奥提出了卷积神经网络Convolutional Neural Network，简称CNN。</p>
<ul>
<li>卷积计算</li>
<li>深度结构</li>
<li>处理大型图像出色</li>
<li>需要确定的参数更少</li>
</ul>
<p>CNN是图像识别领域的核心算法之一，在学习数据充足时有着稳定高效的表现。</p>
<h4 id="支持向量机svm">支持向量机SVM</h4>
<p>1995年由科尔特斯和瓦普尼克提出，可以使用Kernel Trick进行非线性分类，将输入隐式映射到高维特征空间中，以统计学为基础，和神经网络有明显的差异。</p>
<p>支持向量机广泛应用于</p>
<ul>
<li>模式识别</li>
<li>分类</li>
<li>回归分析</li>
</ul>
<h4 id="长短期记忆lstm">长短期记忆LSTM</h4>
<p>1989年由科尔特斯和施密德湖贝提出，适用于处理预测时间序列中间隔和延迟长的时间，自然语言处理NLP是循环神经网络RNN的典型应用。</p>
<p>RNN适用于</p>
<ul>
<li>文本生成</li>
<li>机器翻译</li>
<li>语音识别</li>
<li>生成图像描述</li>
<li>视频标记</li>
</ul>
<h4 id="深蓝国际象棋">深蓝——国际象棋</h4>
<p>1997年，IBM深蓝计算机战胜了世界象棋冠军卡斯帕罗夫。这成为了人工智能发展史上的里程碑事件。</p>
<h3 id="人工智能的爆发">人工智能的爆发</h3>
<p>上世纪末，人工智能又因为算力不足而陷入了短暂的停滞期。21世纪以来，得益于算力和数据的大规模增长，人工智能又迎来了爆发。</p>
<h4 id="深度学习">深度学习</h4>
<p>2006年，杰弗里辛顿在《Science》上提出了深层网络训练中梯度消失的解决方案，开启了深度学习在学术界和工业界的热潮。</p>
<h4 id="华人在人工智能爆发期中的贡献">华人在人工智能爆发期中的贡献</h4>
<ul>
<li>李飞飞提出了IMAGENET</li>
<li>吴恩达创办了COURSERA，致力于推广人工智能教育</li>
</ul>
<h4 id="iphone-siri">iPhone Siri</h4>
<ul>
<li>自然语言输入</li>
<li>调用系统自带应用</li>
<li>提供对话式的应答</li>
</ul>
<h4 id="alexnet">AlexNet</h4>
<p>由辛顿提出，主要特性有</p>
<ul>
<li>ReLU激活函数</li>
<li>Dropout技术</li>
<li>GPU加速模型</li>
</ul>
<h4 id="生成对抗网络gan">生成对抗网络GAN</h4>
<p>由伊恩古德费勒提出，采用两个神经网络训练而成。</p>
<ul>
<li>生成器（生成网络）- 用于学习生成新的可用案例</li>
<li>判别器（判别网络）- 用于生成案例或实际案例的评判学习</li>
</ul>
<p>可以处理无监督学习，实现博弈对抗学习；可以为数据集生成新的案例。</p>
<h4 id="alphago---深度强化学习">AlphaGo - 深度强化学习</h4>
<p>从2016年战胜李世石开始，称霸围棋圈。</p>
<h4 id="总结">总结</h4>
<p>截至目前，人工智能领域最大的突破进展——深度学习。这主要是因为算力和数据量都得到了大幅度的提升。</p>
<h2 id="人工智能的挑战和机遇">人工智能的挑战和机遇</h2>
<h3 id="人工智能近期进展">人工智能近期进展</h3>
<p>2015年，微软研究院的图像分类错误率低于人眼识别的错误率，达到4.94%。</p>
<p>2017年，微软的语音识别系统可以与专业的速记员比肩，错误率降低至5.1%。</p>
<p>2017年，Google的Deep Mind发布了文本至语音的世界范围内最强的生成模型——WaveNet，可以根据文本生成听起来相对真实的人类声音。</p>
<p>2019年，SQuAD阅读挑战赛中，BERT模型的阅读理解能力已经超越了人类。</p>
<p>ResNet是CNN的一个重要突破，解决了深度学习中层数越多性能越差的深度网络退化问题。</p>
<p>Transformer (BERT) 尝试引入注意力机制，加全连接层，进行序列建模，适用于并行化计算，在精度和性能上都优于RNN模型。Transformer从NLP领域走进了机器视觉的领域。</p>
<p>AlphaZero是Deep Mind于2018年发布的模型，通杀围棋、国际象棋和日本将棋，训练不到2天直接秒了AlphaGo。</p>
<p>2020年Deep Mind发布了AlphaFold2，在根据基因序列预测蛋白质结构的CASP比赛中位列第一。</p>
<h3 id="人工智能的挑战">人工智能的挑战</h3>
<h4 id="挑战1-数据标注">挑战1 数据标注</h4>
<p>数据标注极其枯燥耗时，但却是人工智能的基础。“有多少智能就需要多少人工”</p>
<h4 id="挑战2-硬件配置">挑战2 硬件配置</h4>
<p>一开始，人们都是用CPU进行机器学习的，但是随着算法越来越复杂，CPU已经无法满足算法的计算需求了。人们发现原本用于图像渲染的GPU，有着完美支持矢量运算的SIMD架构，进行机器学习的效率非常高。</p>
<p>FPGA也非常适用于机器学习。</p>
<h4 id="挑战3-软件架构">挑战3 软件架构</h4>
<p>环境安装、部署、测试、迭代改进、性能调优的工作非常繁琐复杂，因为会涉及到多个工具，甚至多个平台。为了加速机器学习开发，学界和业界开发了许多基础设施，也称为机器学习框架。</p>
<h4 id="挑战4-参数调节">挑战4 参数调节</h4>
<p>参数调节的目的就是搜索超参数的最佳配置，而超参数的搜索本质上是一个受计算能力和时间约束的迭代过程。</p>
<h4 id="挑战5-未知脆弱性">挑战5 未知脆弱性</h4>
<h4 id="挑战6-强人工智能">挑战6 强人工智能</h4>
<p>缺乏完善的基础理论。仍然停留在给定大量的训练数据，学习某些特定的任务。</p>
<p>深度学习是机器学习的一部分，机器学习是人工智能的一部分。</p>
<h3 id="人工智能的机遇">人工智能的机遇</h3>
<h3 id="拥抱人工智能">拥抱人工智能</h3>
<p>美国国家科学基金会将投入2.2亿美元建立NSF国家人工智能研究所。聚焦AI七大领域</p>
<ul>
<li>人机交互与协作</li>
<li>AI驱动的高级优化方法</li>
<li>AI驱动的信息基础设施</li>
<li>计算机网络系统AI技术</li>
<li>动态系统AI技术</li>
<li>AI增强学习</li>
<li>AI驱动的农业和食品创新</li>
</ul>
<h3 id="对ai的政策">对AI的政策</h3>
<h4 id="国家层面">国家层面</h4>
<ul>
<li>鼓励</li>
<li>扶持</li>
<li>推动</li>
</ul>
<p>国务院提出，2025年要让AI成为产业升级和经济转型的主要驱动力，2030年中国要成为世界主要AI创新中心。</p>
<h4 id="上海市层面">上海市层面</h4>
<p><strong>上海的优势</strong> 数据资源丰富、应用领域广泛、产业门类齐全</p>
<p>全面实施智能上海行动</p>
<ul>
<li>应用驱动</li>
<li>科技引领</li>
<li>产业协同</li>
<li>生态培育</li>
<li>人才集聚 推动人工智能成为上海建设“四个中心”和具有全球影响力的科技创新中心的新引擎，为上海建设卓越的全球城市注入新动能。</li>
</ul>
<h4 id="同济大学层面">同济大学层面</h4>
<p>同济大学成立了上海自主智能无人系统科学中心，主要围绕</p>
<ul>
<li>自主与感知</li>
<li>智能与涌现</li>
<li>群智与协同 三大科学问题</li>
</ul>
<p>研究方向包括：</p>
<ul>
<li>超材料感知</li>
<li>多尺度融合</li>
<li>自主与交互</li>
<li>多体与协同</li>
</ul>
<p>力争在自主智能无人系统领域取得一系列科研成果，推动上海成为人工智能创新策源高地、应用示范高地、制度供给高地和人才集聚高地。</p>
<h2 id="人工智能的竞技场自动驾驶">人工智能的竞技场——自动驾驶</h2>
<h3 id="自动驾驶技术的背景">自动驾驶技术的背景</h3>
<p>每年全球约有130万人死于道路交通事故，约90%的事故由驾驶员因素导致。2014年SAE发布了驾驶自动化分级L0-L5。我国的驾驶自动化分级参照了SAE的标准，结合中国国情进行相应的调整。</p>
<p>2016年，Google的自动驾驶部门成为WAYMO。2018年底，Waymo自动驾驶服务上线，其中一部分已经取消了安全员。</p>
<p>辅助驾驶方面，特斯拉的AutoPilot辅助驾驶里程突破了20亿英里。</p>
<h4 id="国外自动驾驶的尝试">国外自动驾驶的尝试</h4>
<h5 id="早期的半自动驾驶汽车">早期的半自动驾驶汽车</h5>
<p>1977年，日本筑波大学创造了第一辆半自动驾驶汽车。这辆车利用机器视觉，跟踪道路上的白色车道线。</p>
<p>1984年，国防高级研究计划局出现了DARPA自主地面车辆Autonomous Land Vehicle项目。此时已经使用了激光雷达、机器视觉技术。</p>
<h5 id="darpa无人驾驶汽车挑战赛">DARPA无人驾驶汽车挑战赛</h5>
<p>DARPA Grand Challenge沙漠挑战赛。2004年，没有一支参赛队伍完成比赛；2005年，Stanford大学的Standley车队获得冠军，这支车队也就是Sebastian Thrun的队伍。2007年，DARPA举办了城市挑战赛Urban Challenge，卡内基梅隆大学的Boss车队获得冠军。</p>
<h4 id="国内自动驾驶">国内自动驾驶</h4>
<p>2003年，我国自主研发的无人驾驶汽车在高速路上进行了第一次测试；2009年，中国开始举办智能车未来挑战大赛。</p>
<h3 id="自动驾驶中的ai技术">自动驾驶中的AI技术</h3>
<h4 id="自动驾驶的内涵及关键技术">自动驾驶的内涵及关键技术</h4>
<p>人类驾驶员：观察道路、交通、环境、车辆状态，经过大脑定位、决策、规划路径，操作方向盘、制动踏板、油门踏板、挡位，实现对车辆的控制。</p>
<p>通过算法，来进行感知、决策、规划、控制，部分或替代人类驾驶员，就是自动驾驶。</p>
<p>对了保证自动驾驶的安全，需要经过严格的测试验证和产品准入认证。</p>
<h5 id="关键技术总结">关键技术总结</h5>
<ul>
<li>感知</li>
<li>定位</li>
<li>决策</li>
<li>规划</li>
<li>控制</li>
<li>测试验证</li>
</ul>
<h4 id="算法架构">算法架构</h4>
<h5 id="分层递进式">分层递进式</h5>
<p>将算法分为</p>
<ul>
<li>环境感知</li>
<li>融合定位</li>
<li>推理决策</li>
<li>轨迹规划</li>
<li>运动控制</li>
<li>测试评价</li>
</ul>
<h5 id="端到端式">端到端式</h5>
<p>利用一个训练好的神经网络，隐藏中间的过程，从观察环境到输出控制指令的过程全部封装，是一个黑盒模型。</p>
<p>需要数据标注、超参数调整等一系列复杂的训练过程。</p>
<h4 id="感知融合">感知融合</h4>
<ul>
<li>端到端学习的激光点云物体检测</li>
<li>立体匹配网络的多传感器感知融合</li>
<li>卷积编码-解码模型的视觉感知</li>
</ul>
<p>感知是自动驾驶的基础。深度学习在感知领域取得了巨大成功，助力自动驾驶的发展。</p>
<h4 id="定位">定位</h4>
<ul>
<li>无监督深度学习的单目视觉里程计</li>
<li>深度卷积神经网络的匹配定位</li>
</ul>
<p>基于深度学习的SLAM技术，使得智能汽车精确知道自己所在的位置。</p>
<h4 id="决策">决策</h4>
<ul>
<li>深度学习的环形路口决策</li>
<li>强化学习的安全可行换道决策方法</li>
</ul>
<p>可信、可解释、可推理的AI技术将赋能自动驾驶汽车的智能决策。</p>
<h4 id="规划控制">规划控制</h4>
<ul>
<li>无模型学习的自动驾驶控制</li>
<li>模仿学习自动驾驶车辆视觉轨迹规划</li>
</ul>
<p>学习算法、数据机理混合算法，提供解决自动驾驶规划控制问题的新思路。</p>
<h4 id="端到端学习算法">端到端学习算法</h4>
<ul>
<li>卷积神经网络端到端学习算法</li>
<li>直接感知信息学习启发的自动驾驶</li>
</ul>
<p>发挥人工智能的学习潜能，聚焦实现完全自动驾驶的技术突破。</p>
<h4 id="测试验证">测试验证</h4>
<ul>
<li>深度学习+机器学习，创建真实的交通环境感知</li>
<li>多种测试工具协同</li>
</ul>
<p>应用AI技术，可实现复杂交通场景自动重构，加速测试。</p>
<h3 id="自动驾驶对ai的挑战">自动驾驶对AI的挑战</h3>
<h4 id="驾驶复杂性">1 驾驶复杂性</h4>
<ul>
<li>驾驶环境复杂（例如没有信号灯的交通环岛）</li>
<li>驾驶任务困难（例如飘移）</li>
</ul>
<p>自动驾驶技术的发展就是要在不同场景中去探索适配这些场景，从而增强自动驾驶系统的稳定性、可靠性。</p>
<h4 id="驾驶拟人性">2 驾驶拟人性</h4>
<p>机器人无法运动自如。</p>
<h4 id="驾驶可信性">3 驾驶可信性</h4>
<p>深度学习缺乏可解释性，AI在面对道德困境时无法做出判断，在伦理道德上有难以解决的问题。</p>
<h4 id="驾驶安全性">4 驾驶安全性</h4>
<p>如何判断自动驾驶汽车遭受网络攻击时也足够安全？</p>
<h4 id="驾驶智能性">5 驾驶智能性</h4>
<p>自动驾驶汽车足够智能吗？</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>卡尔曼滤波器基础</title>
    <url>/2022/11/02/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2%E5%99%A8%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="引入">引入</h2>
<p>卡尔曼滤波器是一种利用观测数据来修正先验数据的滤波器，适用于<em>线性高斯系统</em>。</p>
<p>以直线运动的车辆为例。记<span class="math inline">\(t\)</span>时刻的车辆位置为<span class="math inline">\(p_t\)</span>，速度为<span class="math inline">\(v_t\)</span>，加速度为<span class="math inline">\(u_t\)</span>，那么在纵向应有车辆运动学模型</p>
<p><span class="math display">\[
\left \{ \begin{aligned}
&amp; p_t = p_{t-1} + \Delta t \ v_{t-1} + \frac{(\Delta t)^2}{2} u_{t-1}  \\
&amp; v_t = v_{t-1} + \Delta t \ u_{t-1}
\end{aligned}
\right.
\]</span></p>
<p>令</p>
<p><span class="math display">\[
\boldsymbol x_t = \begin{pmatrix} p_t \\ v_t \end{pmatrix}
\]</span></p>
<p>有</p>
<p><span class="math display">\[
\boldsymbol x_t = \begin{pmatrix} 1 &amp; \Delta t \\ 0 &amp; 1 \end{pmatrix}\boldsymbol x_{t-1} + \begin{pmatrix} \displaystyle \frac{(\Delta t)^2}{2} \\ \Delta t \end{pmatrix}u_{t-1} \tag{1}
\]</span></p>
<p>当然，这样的运动学模型是非常简单的。一方面，只考虑了纵向的运动，而且假设加速度的测量是noise-free的；另一方面，由于采样数据是离散的，在<span class="math inline">\(\Delta t\)</span>时间内的加速度变化我们不得而知。因此，利用这样的运动学模型对车辆的运动状态进行估计，误差必然会随着时间的推移而增大。</p>
<span id="more"></span>
<p>既然估计得到的运动状态并不是精确的，那么我们需要修正一下式(1)中的符号。用<span class="math inline">\(\hat{\boldsymbol{x}}_t^-\)</span>表示先验估计状态，用<span class="math inline">\(\hat{\boldsymbol{x}}_t\)</span>表示最优估计状态，没有^符号的视为真值。需要注意的是，在本例中我们将加速度输入视作真值。那么式(1)可以改写为</p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t^- = \begin{pmatrix} 1 &amp; \Delta t \\ 0 &amp; 1 \end{pmatrix}\hat{\boldsymbol{x}}_{t-1} + \begin{pmatrix} \displaystyle \frac{(\Delta t)^2}{2} \\ \Delta t \end{pmatrix}u_{t-1} \tag{2}
\]</span></p>
<p>假设我们为这辆测试车安装了GNSS导航系统，可以利用RTK定位数据进行车辆位置的观测。不过GNSS只能观测车辆的位置，而不能观测车辆的速度，所以我们可以将观测到的状态量记为<span class="math inline">\(\boldsymbol{z}_t = \begin{pmatrix} z_p \\ z_v \end{pmatrix}\)</span>，将观测矩阵记为<span class="math inline">\(H=\begin{pmatrix} 1 &amp; 0 \end{pmatrix}\)</span>然后写出以下观测方程</p>
<p><span class="math display">\[
\boldsymbol{z}_t = H\boldsymbol{x}_t \tag{3}
\]</span></p>
<p>很显然，无论是先验估计得到的值还是观测得到的值都与真值有一定偏离，那么如何用观测到的状态量<span class="math inline">\(z_t\)</span>修正先验估计状态呢？下面就介绍一下卡尔曼滤波器。</p>
<h2 id="卡尔曼滤波器---估计部分">卡尔曼滤波器 - 估计部分</h2>
<p>卡尔曼滤波器总体上可以分为两个部分，估计部分与更新部分。先来讲估计部分。式(2)是卡尔曼滤波器估计部分的主体，不过我们需要考虑估计中可能存在的噪声，所以将式(2)修正为</p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t^- = \begin{pmatrix} 1 &amp; \Delta t \\ 0 &amp; 1 \end{pmatrix}\hat{\boldsymbol{x}}_{t-1} + \begin{pmatrix} \displaystyle \frac{(\Delta t)^2}{2} \\ \Delta t \end{pmatrix}u_{t-1} + w_t
\]</span></p>
<p>在卡尔曼滤波器的假设中，过程噪声服从高斯分布，即<span class="math inline">\(w_t \in \mathcal N (0, Q)\)</span>，其中<span class="math inline">\(Q\)</span>为过程噪声的协方差矩阵。</p>
<p>我们将<span class="math inline">\(\begin{pmatrix} 1 &amp; \Delta t \\ 0 &amp; 1 \end{pmatrix}\)</span>记作<span class="math inline">\(F_t\)</span>，将<span class="math inline">\(\begin{pmatrix} \displaystyle \frac{(\Delta t)^2}{2} \\ \Delta t \end{pmatrix}\)</span>记作<span class="math inline">\(B_t\)</span>，将上述公式一般化为</p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t^- = F_t \hat{\boldsymbol{x}}_{t-1} + B_t u_{t-1} + w_t \tag{4}
\]</span></p>
<p>其中<span class="math inline">\(F_t\)</span>被称为状态转移矩阵，<span class="math inline">\(B_t\)</span>被称为控制矩阵，<span class="math inline">\(u_t\)</span>被称为控制输入量。</p>
<p>估计部分的另一部分是先验估计状态的协方差矩阵<span class="math inline">\(P_t^-\)</span>，先给出公式</p>
<p><span class="math display">\[
P_t^- = FP_{t-1}F^T + Q \tag{5}
\]</span></p>
<p>其中，<span class="math inline">\(P_{t-1}\)</span>是最优估计状态<span class="math inline">\(\hat{\boldsymbol{x}}_{t-1}\)</span>的协方差矩阵。那么这个先验估计状态的协方差矩阵是怎么来的呢？首先，要引入一条公式</p>
<p><span class="math display">\[
cov(Ax, Ax) = Acov(x, x)A^T
\]</span></p>
<p>很显然，只需要将式(4)代入，即可得到</p>
<p><span class="math display">\[
\begin{aligned}
cov(\hat{\boldsymbol{x}}_t^-, \hat{\boldsymbol{x}}_t^-) &amp;= cov(F_t \hat{\boldsymbol{x}}_{t-1} + B_t u_{t-1} + w_t, F_t \hat{\boldsymbol{x}}_{t-1} + B_t u_{t-1} + w_t) \\
&amp;= cov(F_t \hat{\boldsymbol{x}}_{t-1}+w_t, F_t \hat{\boldsymbol{x}}_{t-1}+w_t) \\
&amp;= cov(F_t \hat{\boldsymbol{x}}_{t-1}, F_t \hat{\boldsymbol{x}}_{t-1}) + cov(w_t, w_t) \\
&amp;= F_t cov(\hat{\boldsymbol{x}}_{t-1}) F_t^T + Q \\
&amp;= F_t P_{t-1} F_t^T + Q
\end{aligned}
\]</span></p>
<p>请注意，这里之所以能够将<span class="math inline">\(cov(F_t \hat{\boldsymbol{x}}_{t-1} + w_t, F_t \hat{\boldsymbol{x}}_{t-1} + w_t)\)</span>拆分为<span class="math inline">\(cov(F_t \hat{\boldsymbol{x}}_{t-1}, F_t \hat{\boldsymbol{x}}_{t-1}) + cov(w_t, w_t)\)</span>是因为卡尔曼滤波器作用的对象是线性高斯系统；另外，控制量视为真值，不考虑其协方差。</p>
<p>总结一下，卡尔曼滤波器的估计部分，就是</p>
<ol type="1">
<li>t时刻先验估计状态 = 状态转移矩阵 X t-1时刻最优估计状态 + 控制矩阵 X 控制输入量 + 过程噪声</li>
<li>t时刻先验估计状态的协方差矩阵 = 状态转移矩阵 X t-1时刻最优估计状态的协方差矩阵 X 状态转移矩阵的转置 + 过程噪声的协方差矩阵</li>
</ol>
<h2 id="卡尔曼滤波器---更新部分">卡尔曼滤波器 - 更新部分</h2>
<p>下面讲卡尔曼滤波器的第二部分。先看一下式(3)，发现观测值和真值之间只有一个转换矩阵，没有考虑观测时可能存在的噪声，为此我们引入观测噪声<span class="math inline">\(v_t\)</span>，修正式(3)</p>
<p><span class="math display">\[
z_t = H \boldsymbol{x}_t + v_t \tag{6}
\]</span></p>
<p>假定观测噪声<span class="math inline">\(v_t\)</span>也服从高斯分布，即<span class="math inline">\(v_t \in \mathcal N(0, R)\)</span>，其中<span class="math inline">\(R\)</span>为观测噪声的协方差矩阵。</p>
<p>说到底，先验估计值和观测值都是存在误差的，卡尔曼滤波器实质上就是对先验估计值和观测值进行加权，从而得到一个最接近真值的最优估计值。那么这个加权值怎么来的，就是卡尔曼滤波器的重点。在卡尔曼滤波器的定义中，这个加权值称为<strong>卡尔曼增益</strong>，记为<span class="math inline">\(K_t\)</span>。先不管这个加权值怎么来的，假定我们已知卡尔曼增益<span class="math inline">\(K_t\)</span>，那么应当能够写出最优估计值的表达式</p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t = \hat{\boldsymbol{x}}_t^- + K_t(z_t - H\hat{\boldsymbol{x}}_t^-) \tag{7}
\]</span></p>
<p>式(7)是容易理解的，其实就是对观测值和经过转换的先验估计值作差，然后乘上卡尔曼增益，再加到原来的先验估计值上去。观测值和经过转换的先验估计值之差，其实就是观测值和先验估计值之间的差值，经过卡尔曼增益缩放之后，体现为观测值对先验估计值的影响，本质上就是一种加权操作。卡尔曼增益越大，那么观测值所占的权重就越大，体现为我们更信任观测值；反之，观测值占的权重越小，体现为我们更信任先验估计。</p>
<p>下面推导一下卡尔曼增益的表达式。在推导之前，先要说明卡尔曼增益的目标，是在经过卡尔曼增益的加权之后，使得真值与最优估计值之间的误差最小，即求<span class="math inline">\(argmin\{\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t\}\)</span>。这里我们假定所谓的<span class="math inline">\(e_t = \boldsymbol{x}_t - \hat{\boldsymbol{x}}_t\)</span>满足<span class="math inline">\(e_t \in \mathcal N(0, P_t)\)</span>，那么为了使得误差最小，其实就是要求协方差矩阵<span class="math inline">\(P_t\)</span>的trace最小。下面进行推导。</p>
<p><span class="math display">\[
\begin{aligned}
e_t &amp; = \boldsymbol{x}_t - \hat{\boldsymbol{x}}_t \\
&amp;=\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^- - K_t(z_t - H\hat{\boldsymbol{x}}_t^-) \\
&amp;= \boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^--K_t(H\boldsymbol{x}_t +v_t - H\hat{\boldsymbol{x}}_t^-) \\
&amp;= (I - K_tH)(\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^-) - K_t v_t \\
\end{aligned}
\]</span></p>
<p>记<span class="math inline">\(\hat{e}_t=\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^-\)</span>，则可将上式简化为</p>
<p><span class="math display">\[
e_t = (I-K_tH)\hat{e}_t - K_t v_t \tag{8}
\]</span></p>
<p>这里先引入一下协方差的计算公式</p>
<p><span class="math display">\[
cov(X, Y) = E[XY] - E[X]E[Y]
\]</span></p>
<p>那么对于<span class="math inline">\(e_t\)</span>来说，<span class="math inline">\(P_t=cov(e_t, e_t) = E(e_te_t^T)-E(e_t)^2=E(e_te_t^T)\)</span>。下面对协方差矩阵<span class="math inline">\(P_t\)</span>进行推演</p>
<p><span class="math display">\[
\begin{aligned}
P_t &amp;= E\{[(I - K_tH)\hat{e}_t-K_tv_t][\hat{e}_t^T(I-H^TK_t^T)-v_t^TK_t^T]\} \\
&amp;= E\{(I-K_tH)\hat{e}_t\hat{e}_t^T(I-H^TK_t^T)-(I-K_tH)\hat{e}_tv_t^TK_t^T-K_tv_t\hat{e}_t^T(I-H^TK_t^T)+K_tv_tv_t^TK_t^T\} \\
&amp;= E\{(I-K_tH)\hat{e}_t\hat{e}_t^T(I-H^TK_t^T) + K_tv_tv_t^TK_t^T\} \\
&amp; - (I-K_tH)E\{\hat{e}_t\}E\{v_t^T\}K_t^T - K_tE\{v_t\}E\{\hat{e}^T_t\}(I-H^TK_t^T)
\end{aligned}
\]</span></p>
<p>由于<span class="math inline">\(v_t \in \mathcal N (0, R)\)</span>，所以<span class="math inline">\(E\{v_t\}=0\)</span>，那么上式可以简化为</p>
<p><span class="math display">\[
\begin{aligned}
P_t &amp;=(I-K_tH)E\{\hat{e}_t\hat{e}_t^T\}(I-H^TK_t^T)+K_tE\{v_t v_t^T\}K_t^T \\
&amp;=(I - K_tH)E\{\hat{e}_t\hat{e}_t^T\}(I-H^TK_t^T)+K_tRK_t^T
\end{aligned}
\]</span></p>
<p>记<span class="math inline">\(\hat{P}_t=E(\hat{e}_t\hat{e}_t^T)\)</span>，则有</p>
<p><span class="math display">\[
P_t = (I-K_tH)\hat{P}_t(I-H^TK_t^T)+K_tRK_t^T \tag{9}
\]</span></p>
<p>接下来，我们所要做的就是最小化<span class="math inline">\(P_t\)</span>，即取<span class="math inline">\(\displaystyle\frac{d\ tr(P_t)}{dK_t}=0\)</span>，求<span class="math inline">\(K_t\)</span>。在这之前，先引入矩阵求导的两条公式。</p>
<p><span class="math display">\[
\frac{d\ tr(AB)}{dA}=B^T \tag{10}
\]</span></p>
<p><span class="math display">\[
\frac{d\ tr(ABA^T)}{dA} = 2AB \tag{11}
\]</span></p>
<p>利用式(10)和式(11)求<span class="math inline">\(\displaystyle\frac{d\ tr(P_t)}{dK_t}\)</span>，有下式</p>
<p><span class="math display">\[
\begin{aligned}
\frac{d\ tr(P_t)}{dK_t} &amp;= \frac{d \ tr(\hat{P}_t-K_tH\hat{P}_t-\hat{P}_tH^TK_t^T+K_tH\hat{P}_tH^TK_t^T+K_tRK_t^T)}{dK_t} \\
&amp;= -\hat{P}_t^TH^T-\hat{P}_t H^T+2K_tH\hat{P}_tH^T + 2K_tR \\
&amp;= -2 \hat{P}_tH^T+2K_tH\hat{P}_tH^T + 2K_tR\\
&amp;=0
\end{aligned}
\]</span></p>
<p>移项后可得</p>
<p><span class="math display">\[
K_t = \frac{\hat{P}_tH^T}{H\hat{P}_tH^T+R}
\]</span></p>
<p>由于真值是确定值，其方差为0，因此<span class="math inline">\(\hat{P}_t=var(\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^-)=var(-\hat{\boldsymbol{x}}_t^-)=var(\hat{\boldsymbol{x}}_t^-)=Q\)</span>，所以上式可改写为</p>
<p><span class="math display">\[
K_t = \frac{QH^T}{HQH^T+R} \tag{12}
\]</span></p>
<p>卡尔曼增益的推导至此结束。</p>
<p>很显然，<span class="math inline">\(Q\)</span>表征着先验估计的不确定性，<span class="math inline">\(R\)</span>表征着测量的不确定性。<span class="math inline">\(Q\)</span>越大，<span class="math inline">\(K_t\)</span>越大，观测值所占的比重越大，因为先验估计越不确定，就越相信观测值；相反，<span class="math inline">\(R\)</span>越大，<span class="math inline">\(K_t\)</span>越小，观测值所占的比重越小，因为观测值越不确定，就越不相信观测值。</p>
<p>与估计部分相同的，我们需要给出最优估计值的协方差矩阵<span class="math inline">\(P_t\)</span>。请注意这里的<span class="math inline">\(P_t\)</span>并不是<span class="math inline">\(e_t\)</span>的协方差矩阵，而是<span class="math inline">\(\hat{\boldsymbol{x}}_t\)</span>的协方差矩阵。</p>
<p><span class="math display">\[
\begin{aligned}
P_t &amp;= var(\hat{\boldsymbol{x}}_t)\\
&amp;= var(\hat{\boldsymbol{x}}_t^- + K_t(z_t - H\hat{\boldsymbol{x}}_t^-)) \\
&amp;= var(\hat{\boldsymbol{x}}_t^-+K_t(H\boldsymbol{x}_t+v_t - H\hat{\boldsymbol{x}}_t^-))\\
&amp;= var((I-K_tH)\hat{\boldsymbol{x}}_t^- + K_tH\boldsymbol{x}_t+K_tv_t) \\
&amp;= (I-K_tH)var(\hat{\boldsymbol{x}}_t^-)+var(K_tv_t) \\
&amp;= (I-K_tH)P_t^-+K_tR
\end{aligned}
\]</span></p>
<p>这里怎么推出来多了一项<span class="math inline">\(K_tR\)</span>呢？这有点搞，需要研究一下。</p>
<h2 id="卡尔曼滤波器总结">卡尔曼滤波器总结</h2>
<h3 id="估计部分两条式子">估计部分两条式子</h3>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t^- = F_t \hat{\boldsymbol{x}}_{t-1}+B_t u_{t-1}+w_{t-1} \tag{1}
\]</span></p>
<p><span class="math display">\[
P_t^- = F_t P_{t-1} F_t^T + Q_t \tag{2}
\]</span></p>
<h3 id="更新部分三条式子">更新部分三条式子</h3>
<p><span class="math display">\[
K_t = \frac{P_t^-H^T}{HP_t^-H^T + R_t} \tag{3}
\]</span></p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t = \hat{\boldsymbol{x}}_t^- + K_t(z_t - H\hat{\boldsymbol{x}}_t^-) \tag{4}
\]</span></p>
<p><span class="math display">\[
P_t = (I-K_tH)P_t^- \tag{5}
\]</span></p>
]]></content>
      <categories>
        <category>Control Engineering</category>
      </categories>
      <tags>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析笔记-第二章 线性方程组的直接解法</title>
    <url>/2022/11/02/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E7%9B%B4%E6%8E%A5%E8%A7%A3%E6%B3%95/</url>
    <content><![CDATA[<h2 id="本章概述">本章概述</h2>
<p>我们发现，在科学计算中有非常多的问题到最后都会转变为对大规模线性方程组求解的问题，因此对线性方程组进行高效求解，是科学计算中非常重要的一个需求。</p>
<p>在本章的学习中，我们先了解一下线性方程组最基本的求解方法，叫做<strong>直接法</strong>求解线性方程组。在不考虑浮点误差的情况下，直接法求解可以得到线性方程组的精确解（在方程组有解的前提下），而且解法也很简单普适。但缺点是计算量比较大，对于大规模线性方程组的求解，我们一般不会利用直接法进行求解，而是会选择使用<strong>迭代法</strong>，通过逐次逼近的方式得到目标线性方程组的近似解。迭代法的具体内容会在后续的章节中涉及。</p>
<span id="more"></span>
<h2 id="高斯消去法">2.1 高斯消去法</h2>
<p>线性方程组的直接法，也叫做<strong>高斯消去法</strong>。对于一个<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>，若有线性方程组<span class="math inline">\(Ax=b\)</span>，可以使用高斯消去法对方程进行直接的求解，如下</p>
<h3 id="高斯消去法求解线性方程组">2.1.1 高斯消去法求解线性方程组</h3>
<p>高斯消去法求解线性方程组分为<strong>消去过程</strong>和<strong>回代过程</strong>。消去过程其实是将<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>转换为上三角矩阵的过程，回代过程则是利用转换好的上三角矩阵来求解<span class="math inline">\(x\)</span>的过程。</p>
<h4 id="消去过程">消去过程</h4>
<p>消去的目标：将目标列对角线以下元素全部消去为0。</p>
<p>消去的方法也很简单，对于<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>，假如我们想要将第一列除<span class="math inline">\(a_{11}\)</span>以外的元素全部消去为0，那么只需要将第一行元素乘上<span class="math inline">\(\displaystyle -\frac{a_{i1}}{a_{11}}\)</span>，然后加到第<span class="math inline">\(i\)</span>行上，那么第<span class="math inline">\(i\)</span>行的行首元素<span class="math inline">\(a_{i1}\)</span>就恰好被消去了。接下来，我们再对从<span class="math inline">\(a_{22}\)</span>开始的<span class="math inline">\(n-1\)</span>阶子阵进行同样的操作，经过有限次初等变换之后，就能够将一个<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>转换为一个上三角矩阵<span class="math inline">\(A^{(n)}\)</span>。</p>
<h4 id="回代过程">回代过程</h4>
<p>得到上三角矩阵<span class="math inline">\(A^{(n)}\)</span>后，从<span class="math inline">\(a^{(n)}_{nn}\)</span>开始，可以根据<span class="math inline">\(a^{(n)}_{nn}x_n=b_n\)</span>计算得到<span class="math inline">\(x_n\)</span>，然后从下往上，利用<span class="math inline">\(x_n, b_{n-1}, b_n, a^{n-1}_{(n-1)(n-1)}\)</span>计算得到<span class="math inline">\(x_{n-1}\)</span>，以此类推，最后计算得到整个向量<span class="math inline">\(x\)</span>。</p>
<h4 id="缺陷">缺陷</h4>
<ol type="1">
<li>计算量大。整个高斯消去法的计算量达到<span class="math inline">\(O(n^3)\)</span>，对于大规模线性方程组来说这个计算量是不可接受的。</li>
<li>行首元素不能是0，否则高斯消去法会异常中止；当然，我们可以通过交换行来处理，但也有可能出现当前列可用行首元素全为0的情况。</li>
<li>在考虑浮点误差的时候，如果选中行的行首元素比较小，那么可能会出现转换系数太大的情况，导致选中行乘上转换系数之后，某些元素变得太大，然后因为浮点数的“大数吃小数”现象而引发比较大的计算误差。</li>
</ol>
<h3 id="高斯消去法的选主元策略">2.1.2 高斯消去法的选主元策略</h3>
<p>行首元素，简称为主元，是可以通过交换行来进行主元的选取的。选主元策略可以有效解决上述缺陷中的第三点问题。在进行消去之前，我们将当前列中行首元素最大的行交换上来，以这一行的行首元素作为主元，那么转换系数必然小于等于1，这样可以避免当前行乘以转换系数之后出现元素太大的现象。这种修正之后的算法称为<strong>列主元素高斯消去法</strong>。</p>
<p>当然，假如原来的矩阵中元素的大小分布本来就差距极大，那么这总会导致引入浮点误差的时候，最后计算的精度比较差，但这不是高斯消去法本身的缺陷，而是浮点计算的缺陷。选主元策略能够最大程度上减小浮点误差对结果的影响，但并不能完全规避浮点误差。</p>
<h2 id="矩阵的三角分解">2.2 矩阵的三角分解</h2>
<h3 id="上三角阵与下三角阵">2.2.1 上三角阵与下三角阵</h3>
<p>前面提到，高斯消去法的消去过程本质上就是通过矩阵的初等变换，将一个任意的<span class="math inline">\(n\)</span>阶方阵转换为一个上三角阵。线性代数中，我们也学过，对一个矩阵进行某种类型的初等变换，等价于给这个矩阵乘上一个初等矩阵。所以，将<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>转换为上三角阵的过程，可以用矩阵乘法来描述。</p>
<p>需要进一步补充的是，消去过程中出现的初等矩阵，其实都是对角阵加上第<span class="math inline">\(i\)</span>列的转换系数构成的下三角矩阵。所以，上述过程可以描述为<span class="math inline">\(A\)</span>与<span class="math inline">\(n-1\)</span>个下三角矩阵做矩阵乘法的过程 <span class="math display">\[
L_{n-1}...L_2L_1A
\]</span> 最后的结果是一个上三角矩阵，我们可以将其记作<span class="math inline">\(U\)</span>。</p>
<p>需要说明的是，初等变换矩阵总是可逆的，所以矩阵<span class="math inline">\(A\)</span>其实可以写作 <span class="math display">\[
A=L_1^{-1}L_2^{-1}...L_{n-1}^{-1}U
\]</span> 令<span class="math inline">\(L=L_1^{-1}L_2^{-1}...L_{n-1}^{-1}\)</span>，有 <span class="math display">\[
A=LU
\]</span> 需要注意的是，下三角矩阵的逆仍然是下三角矩阵，两个下三角阵的乘积同样也仍然是下三角矩阵，所以<span class="math inline">\(L\)</span>也是一个下三角矩阵。另外，下三角阵<span class="math inline">\(L\)</span>的对角线元素全为1，所以<span class="math inline">\(L\)</span>还是一个单位下三角阵。</p>
<p>前面的下三角阵<span class="math inline">\(L_1\)</span>等，可以写为 <span class="math display">\[
L_i=
\begin{pmatrix}
1 &amp; &amp; &amp; &amp; &amp; &amp; &amp;  \\
&amp; 1 &amp; &amp; &amp; &amp; &amp; &amp; \\
&amp; &amp; ... &amp; &amp; &amp; &amp; \\
&amp; &amp; &amp; 1 \\
&amp; &amp; &amp; m_{i+1,i}&amp; 1 \\
&amp; &amp; &amp; m_{i+2,i} &amp; &amp; 1 \\
&amp; &amp; &amp; ... &amp; \\
&amp; &amp; &amp; m_{n,i} &amp; &amp; ... &amp; &amp; &amp; 1
\end{pmatrix}
\]</span> 可以证明，<span class="math inline">\(L_i^{-1}\)</span>为 <span class="math display">\[
L_i^{-1}=
\begin{pmatrix}
1 &amp; &amp; &amp; &amp; &amp; &amp; &amp;  \\
&amp; 1 &amp; &amp; &amp; &amp; &amp; &amp; \\
&amp; &amp; ... &amp; &amp; &amp; &amp; \\
&amp; &amp; &amp; 1 \\
&amp; &amp; &amp; -m_{i+1,i}&amp; 1 \\
&amp; &amp; &amp; -m_{i+2,i} &amp; &amp; 1 \\
&amp; &amp; &amp; ... &amp; \\
&amp; &amp; &amp; -m_{n,i} &amp; &amp; ... &amp; &amp; &amp; 1
\end{pmatrix}
\]</span> 上述初等矩阵的逆之积<span class="math inline">\(L\)</span>可以证明是 <span class="math display">\[
L=\begin{pmatrix}
1 \\
-m_{21} &amp; 1 \\
-m_{31} &amp; -m_{32} &amp; 1 \\
&amp; &amp; &amp; ... \\
... &amp; &amp; &amp; &amp; 1 \\
-m_{n1} &amp; ... &amp; &amp; &amp; &amp; 1
\end{pmatrix}
\]</span></p>
<p>也就是说，任一<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>，都能够写作一个单位下三角矩阵<span class="math inline">\(L\)</span>和一个上三角阵<span class="math inline">\(U\)</span>的乘积。这个分解过程称为Doolittle分解，或直接称为<span class="math inline">\(LU\)</span>分解。</p>
<h4 id="doolittle分解">Doolittle分解</h4>
<p>Doolittle分解是<span class="math inline">\(LU\)</span>分解最常见的分解形式，注意<span class="math inline">\(L\)</span>是<strong>单位下三角阵</strong>，而<span class="math inline">\(U\)</span>是普通的上三角阵。</p>
<h4 id="crout分解">Crout分解</h4>
<p>Crout分解也是一种<span class="math inline">\(LU\)</span>分解，但和Doolittle分解刚好相反，这里<span class="math inline">\(U\)</span>是<strong>单位上三角阵</strong>，而<span class="math inline">\(L\)</span>是普通的下三角阵。</p>
<h4 id="ldu分解"><span class="math inline">\(LDU\)</span>分解</h4>
<p>可以发现，在<span class="math inline">\(LU\)</span>分解中，总归是只有一个矩阵对角线全1；实际上我们也可以将矩阵<span class="math inline">\(A\)</span>拆分成三个矩阵，使得下三角阵<span class="math inline">\(L\)</span>和上三角阵<span class="math inline">\(U\)</span>均为单位三角阵，原来那个非单位对角阵的对角线元素提取出来变为一个对角阵<span class="math inline">\(D\)</span>即可，这被称为<span class="math inline">\(LDU\)</span>分解。</p>
<h3 id="lu分解的性质">2.2.2 <span class="math inline">\(LU\)</span>分解的性质</h3>
<h4 id="前提条件">前提条件</h4>
<p>对方阵<span class="math inline">\(A\)</span>进行<span class="math inline">\(LU\)</span>分解本质上和高斯消去法并没有什么不同，所以也要求方阵<span class="math inline">\(A\)</span>的所有顺序余子式均非0。这个条件是充要的。</p>
<h4 id="唯一性">唯一性</h4>
<p>给定方阵<span class="math inline">\(A\)</span>的<span class="math inline">\(LU\)</span>分解是唯一的，证明很简单，利用三角阵和单位三角阵的性质即可，如下</p>
<p>假如方阵<span class="math inline">\(A\)</span>存在两组<span class="math inline">\(LU\)</span>分解，分别记作<span class="math inline">\(A=LU\)</span>，<span class="math inline">\(A=L_1U_1\)</span>，那么有 <span class="math display">\[
LU=L_1U_1
\]</span> 可以证明，<span class="math inline">\(L\)</span>和<span class="math inline">\(U\)</span>都是可逆阵，所以有 <span class="math display">\[
L_1^{-1}L=U_1U^{-1}
\]</span> 单位下三角阵的乘积仍然是单位下三角阵，上三角阵的乘积仍然是上三角阵，因此上式要成立，必须取等式左右两边可能情况的交集，也就是要找到一种矩阵，既是单位下三角阵，同时又是上三角阵，那么这个阵只能是单位对角阵，也就是说<span class="math inline">\(L_1^{-1}L=U_1U^{-1}=I\)</span>。那么显然，<span class="math inline">\(L_1=L\)</span>，<span class="math inline">\(U_1=U\)</span>，所以方阵<span class="math inline">\(A\)</span>的<span class="math inline">\(LU\)</span>分解唯一性得证。</p>
<h3 id="lu分解的作用">2.2.3 <span class="math inline">\(LU\)</span>分解的作用</h3>
<p><span class="math inline">\(LU\)</span>分解的作用，主要还是提供一种除了高斯消去法以外的线性方程组解法。单位下三角阵<span class="math inline">\(L\)</span>和上三角阵<span class="math inline">\(U\)</span>的构造过程，本质上就是高斯消去法的消去过程；利用这两个三角阵进行<span class="math inline">\(x\)</span>求解的过程，本质上就是高斯消去法的回代过程。</p>
<p>另外，对于一些特殊的方阵，<span class="math inline">\(LU\)</span>分解可以简化高斯消去法的计算过程。</p>
<h3 id="cholesky分解">2.2.4 Cholesky分解</h3>
<p>Cholesky分解就是一种可以简化特殊线性方程组求解过程的分解方法。</p>
<p>Cholesky分解面向的对象是对称正定矩阵。这里，补充一下对称正定矩阵的定义。对称正定矩阵，指的是这样一种对称方阵<span class="math inline">\(M\)</span>，对于任意的非0实系数向量<span class="math inline">\(z\)</span>，都满足<span class="math inline">\(z^TMz&gt;0\)</span>。</p>
<p>如果我们将对称正定矩阵<span class="math inline">\(M\)</span>进行<span class="math inline">\(LDU\)</span>分解，可以得到 <span class="math display">\[
M = LDU
\]</span> 由对称正定矩阵的对称性，可得 <span class="math display">\[
M=M^T
\]</span> 即 <span class="math display">\[
LDU=U^TDL^T
\]</span> 由<span class="math inline">\(LU\)</span>分解的唯一性，可知 <span class="math display">\[
L=U^T
\]</span> 所以，对称正定矩阵<span class="math inline">\(M\)</span>可以分解为 <span class="math display">\[
M=LDL^T
\]</span> 如果我们将对角阵<span class="math inline">\(D\)</span>进行开方处理，那么对称正定矩阵<span class="math inline">\(M\)</span>可以改写为 <span class="math display">\[
M=LD^{\frac{1}{2}}(LD^{\frac{1}{2}})^T
\]</span> 记<span class="math inline">\(G=LD^{\frac{1}{2}}\)</span>，有 <span class="math display">\[
M=GG^T
\]</span> 由于<span class="math inline">\(L\)</span>是一个单位下三角阵，<span class="math inline">\(D^{\frac{1}{2}}\)</span>是一个对角阵，所以<span class="math inline">\(G\)</span>是一个对角线非0的下三角阵。需要特别强调的是，Cholesky分解仅适用于对称正定矩阵，对非正定矩阵是不适用的。</p>
<p>Cholesky分解为对称正定矩阵的线性方程组求解节省了大量的计算量，这也是<span class="math inline">\(LU\)</span>分解的意义所在。</p>
<h3 id="三对角矩阵的lu分解">2.2.5 三对角矩阵的<span class="math inline">\(LU\)</span>分解</h3>
<p>三对角矩阵也是科学计算中一种非常常见的矩阵，其形式如 <span class="math display">\[
A=\begin{pmatrix}
b_1 &amp; c_1 \\
a_2 &amp; b_2 &amp; c_2 \\
&amp; a_3 &amp; b_3 &amp; c_3 \\
&amp; &amp; &amp; ... &amp; \\
&amp; &amp; &amp; &amp; ... &amp; \\
&amp; &amp; &amp; &amp; a_{n-1} &amp; b_{n-1} &amp; c_{n-1} \\
&amp; &amp; &amp; &amp; &amp;a_n &amp; b_n \\
\end{pmatrix}
\]</span> 假如我们需要求解<span class="math inline">\(Ax=d\)</span>，那么可以对<span class="math inline">\(A\)</span>进行Crout分解，将其转换为下三角阵<span class="math inline">\(L\)</span>和单位上三角阵<span class="math inline">\(U\)</span>，如下 <span class="math display">\[
L = \begin{pmatrix}
l_1 \\
v_2 &amp; l_2 \\
&amp; &amp; ... \\
&amp; &amp; &amp; ... \\
&amp; &amp; &amp; v_n &amp; l_n \\
\end{pmatrix}
\]</span> <span class="math display">\[
U = \begin{pmatrix}
1 &amp; u_1 \\
&amp; 1 &amp; u_2 \\
&amp; &amp; &amp; ... \\
&amp; &amp; &amp; 1 &amp; u_{n-1} \\
&amp; &amp; &amp; &amp; 1
\end{pmatrix}
\]</span> 教材中，将这种三对角阵的求解方法称为追赶法，其实就是消去和回代，我不想用这种很无厘头的说法，还是用消去和回代来说明这两个流程。</p>
<h4 id="中间变量y的由来">中间变量<span class="math inline">\(y\)</span>的由来</h4>
<p>首先，我们需要明确，<span class="math inline">\(A=LU\)</span>，所以要求的方程组为<span class="math inline">\(LUx=d\)</span>，一般来说，我们会先令<span class="math inline">\(y=Ux\)</span>，然后求<span class="math inline">\(Ly=d\)</span>，所以要声明一个中间变量<span class="math inline">\(y\)</span>，这个<span class="math inline">\(y\)</span>是一个n阶向量。</p>
<h4 id="消去过程-1">消去过程</h4>
<p>由<span class="math inline">\(A=LU\)</span>和<span class="math inline">\(Ly=d\)</span>可以整理得到 <span class="math display">\[
\begin{aligned}
&amp; a_i = v_i \\
&amp; b_i = l_i + v_i u_{i-1}\\
&amp; c_i = l_iu_i\\
&amp; d_i = v_iy_{i-1} + l_iy_i
\end{aligned}
\]</span> 其中，<span class="math inline">\(a_i, b_i, c_i, d_i\)</span>均为已知量，所以可以移项得到 <span class="math display">\[
\begin{aligned}
&amp;l_i = b_i - a_iu_{i-1}\\
&amp;u_i = \frac{c_i}{l_i} \\
&amp;y_i = \frac{d_i - a_iy_{i-1}}{l_i}
\end{aligned}
\]</span> 根据上面这些关系，可以递推得到<span class="math inline">\(L\)</span>，<span class="math inline">\(U\)</span>以及<span class="math inline">\(y\)</span>。</p>
<h4 id="回代过程-1">回代过程</h4>
<p>根据<span class="math inline">\(y=Ux\)</span>，可以得到 <span class="math display">\[
x_i+u_ix_{i+1}=y_i
\]</span> 那么，先求得<span class="math inline">\(x_n=y_n\)</span>，然后从下向上进行<span class="math inline">\(x\)</span>的求解即可 <span class="math display">\[
x_i = y_i - u_ix_{i+1}
\]</span></p>
]]></content>
      <categories>
        <category>Mathematics</category>
      </categories>
      <tags>
        <tag>Numerical Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析笔记-第三章 多项式插值</title>
    <url>/2022/11/02/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%8F%92%E5%80%BC/</url>
    <content><![CDATA[<h2 id="本章概述">本章概述</h2>
<p>在实际应用中，我们经常会遇到利用多项式拟合去拟合一组数据，从而进行数据预测的情况。这个方法在数值计算中被称为多项式插值。本章，主要介绍多项式插值的基本概念，Lagrange插值多项式，Newton插值多项式，插值多项式的误差分析以及Hermite插值多项式。</p>
<span id="more"></span>
<h2 id="插值多项式的基本概念">3.1 插值多项式的基本概念</h2>
<h3 id="插值多项式的定义">3.1.1 插值多项式的定义</h3>
<p>假如在区间<span class="math inline">\([a,b]\)</span>上，有<span class="math inline">\(n+1\)</span>个函数<span class="math inline">\(f(x)\)</span>的采样点<span class="math inline">\(x_0, x_1, ..., x_n\)</span>，以及相应的函数值<span class="math inline">\(f(x_0), f(x_1), ..., f(x_n)\)</span>，那么存在一个不超过<span class="math inline">\(n\)</span>次的多项式<span class="math inline">\(p_n(x)\)</span>，满足<span class="math inline">\(p_n(x_0) = f(x_0), p_n(x_1) = f(x_1), ..., p_n(x_n) = f(x_n)\)</span>。这个多项式<span class="math inline">\(p_n(x)\)</span>称为函数<span class="math inline">\(f(x)\)</span>在区间<span class="math inline">\([a,b]\)</span>上的<span class="math inline">\(n\)</span>次插值多项式。</p>
<p>这里有几个概念：</p>
<ul>
<li>采样点<span class="math inline">\(x_0, x_1, ..., x_n\)</span>被称为<strong>插值节点</strong></li>
<li>区间<span class="math inline">\([a,b]\)</span>被称为<strong>插值区间</strong></li>
</ul>
<h3 id="插值多项式的存在性与唯一性">3.1.2 插值多项式的存在性与唯一性</h3>
<p><span class="math inline">\(f(x)\)</span>在给定插值节点与插值区间的情况下，<span class="math inline">\(n\)</span>次插值多项式是存在且唯一的。这个性质可以通过Vandermonde法得证。</p>
<h4 id="vandermonde法">Vandermonde法</h4>
<p>如果我们将插值节点代入插值多项式，并将系数<span class="math inline">\(a\)</span>视作未知量，可以得到<span class="math inline">\(n+1\)</span>条方程形成的<span class="math inline">\(n+1\)</span>元线性方程组，例如</p>
<p><span class="math display">\[
\begin{aligned}
&amp;a_0 + a_1x_0+a_2x_0^2+...+a_nx_0^n=y_0 \\
&amp;a_0 + a_1x_1 + a_2x_1^2+ ... + a_nx_1^n = y1\\
&amp;...\\
&amp;a_0+a_1x_n+a_2x_n^2+...+a_nx_n^n=y_n
\end{aligned}
\]</span> 可以将<span class="math inline">\(x_i\)</span>看作系数矩阵，如 <span class="math display">\[
\begin{pmatrix}
1 &amp; x_0 &amp; x_0^2 &amp; ... &amp; x_0^n \\
1 &amp; x_1 &amp; x_1^2 &amp; ... &amp; x_1^n \\
... &amp; &amp; &amp; ...\\
1 &amp; x_n &amp; x_n^2 &amp; ... &amp; x_n^n
\end{pmatrix}
\]</span> 上述矩阵的行列式就是Vandermonde行列式 <span class="math display">\[
\begin{vmatrix}
1 &amp; x_0 &amp; x_0^2 &amp; ... &amp; x_0^n \\
1 &amp; x_1 &amp; x_1^2 &amp; ... &amp; x_1^n \\
... &amp; &amp; &amp; ...\\
1 &amp; x_n &amp; x_n^2 &amp; ... &amp; x_n^n
\end{vmatrix}=\prod_{i=1}^n\prod_{j=0}^{i-1}(x_i-x_j)
\]</span> 书上没太讲明白Vandermonde法具体是怎么证明插值多项式的存在性和唯一性的。存在性大概就是，对于上面这个Vandermonde矩阵，总归存在一个子阵的行列式不为0，那么这个子阵对应的不大于n阶的插值多项式就必然存在。唯一性的证明不太清楚。</p>
<h2 id="lagrange插值多项式">3.2 Lagrange插值多项式</h2>
<h3 id="插值多项式的基函数法">3.2.1 插值多项式的基函数法</h3>
<p>线性代数中可以证明，在<span class="math inline">\(n\)</span>次的线性空间中，插值多项式的基是不唯一的，也就是说同一个插值多项式可以用多组基函数的组合来表示。也就是说，我们可以定义<span class="math inline">\(n+1\)</span>个线性无关的多项式<span class="math inline">\(\varphi_0(x), \varphi_1(x), ..., \varphi_n(x)\)</span>，作为插值多项式的基函数，通过这些基函数的线性组合来表示一个插值多项式。 <span class="math display">\[
p_n(x) = a_0\varphi_0(x)+a_1\varphi_1(x)+a_2\varphi_2(x)+...+a_n\varphi_n(x)
\]</span> 最基础的基函数就是<span class="math inline">\(\varphi_i(x)=x^i\)</span>，也就是前面的插值多项式定义中的写法。接下来，我们会介绍Lagrange基函数以及用Lagrange基函数的线性组合表示的Lagrange插值多项式。</p>
<h3 id="lagrange插值多项式-1">3.2.2 Lagrange插值多项式</h3>
<h4 id="lagrange基函数">Lagrange基函数</h4>
<p>Lagrange基函数的定义出于这样的一种想法：能不能找一种基函数，使得参数恰好与某一个节点相等的时候，函数值为1，其他情况下函数值为0呢？这就相当于我们基于插值节点，找到一组正交的基函数，从而满足了线性无关条件。</p>
<p>满足这个条件的基函数其实也很好构造。参数非指定节点的时候，基函数的某一乘项恰好为0；参数为指定节点的时候，基函数的分子分母恰好相等。这样就可以满足上面的条件了。这个函数可以表示为 <span class="math display">\[
l_k(x) = \prod_{i=0\&amp;i\neq k}^{n}\frac{(x-x_i)}{(x_k-x_i)}
\]</span> 那么，<span class="math inline">\(x\neq x_k\)</span>时，分子上总有一项为0，因此结果为0；<span class="math inline">\(x=x_k\)</span>时，分子分母相同，因此结果为1。</p>
<h4 id="lagrange插值多项式-2">Lagrange插值多项式</h4>
<p>以Lagrange基函数为基，可以写出Lagrange插值多项式 <span class="math display">\[
L_n(x)=a_0l_0(x)+a_1l_1(x)+...+a_nl_n(x)
\]</span> Lagrange插值多项式的系数很容易求得，因为代入某一个插值节点的时候，其他的Lagrange基函数全为0，对应的Lagrange基函数为1，所以只剩下一个系数，也就是说 <span class="math display">\[
L_n(x_i) = a_i = y_i
\]</span> 所以Lagrange插值多项式实际上可以写成 <span class="math display">\[
L_n(x)=y_0l_0(x)+y_1l_1(x)+...+y_nl_n(x)
\]</span></p>
<p>习惯上，我们将一次的Lagrange插值多项式称为Lagrange线性插值，将二次的称为Lagrange二次插值或者抛物线插值。 <span class="math display">\[
L_1(x)=y_0\frac{x-x_1}{x_0-x_1}+y_1\frac{x-x_0}{x_1-x_0}
\]</span> <span class="math display">\[
L_2(x)=y_0\frac{(x-x_1)(x-x_2)}{(x_0-x_1)(x_0-x_2)}+y_1\frac{(x-x_0)(x-x_2)}{(x_1-x_0)(x_1-x_2)}+y_2\frac{(x-x_0)(x-x_1)}{(x_2-x_0)(x_2-x_1)}
\]</span> 可以看出，Lagrange插值多项式的对称性还是很明显的。</p>
<h4 id="lagrange插值多项式的误差估计">Lagrange插值多项式的误差估计</h4>
<p>写出了Lagrange插值多项式之后，我们希望能够估计用Lagrange插值多项式进行多项式拟合的结果误差，也就是希望能够求出插值余项<span class="math inline">\(R_n(x)\)</span>。首先，给出插值余项多项式的定义 <span class="math display">\[
R_n(x)=f(x)-L_n(x)
\]</span> 这个定义的重要之处在于，明确了<span class="math inline">\(R_n(x)\)</span>至少有<span class="math inline">\(x+1\)</span>个零点，因为在插值节点上<span class="math inline">\(f(x_i)=L_n(x_i)\)</span>。</p>
<p>因此，我们可以设<span class="math inline">\(R_n(x)=K(x)\prod_{i=0}^n(x-x_i)\)</span>，或者将其简写为<span class="math inline">\(R_n(x)=K(x)\Pi(x)\)</span>。</p>
<p>接下来，引入一个辅助函数<span class="math inline">\(\varphi(x) = R_n(x)-K(x)\Pi(x)=f(x)-L_n(x)-K(x)\Pi(x)\)</span>，如果将<span class="math inline">\(x\)</span>视作插值区间上的一个定点，则<span class="math inline">\(\varphi(t)=f(t)-L_n(t)-K(x)\Pi(t)\)</span>在插值区间上有<span class="math inline">\(n+2\)</span>个零点。根据罗尔定理，<span class="math inline">\(\varphi^{(n+1)}(t)\)</span>在插值区间上必有1个零点。我们将这个零点记为<span class="math inline">\(t=\xi\)</span>，那么可以得到 <span class="math display">\[
\varphi^{(n+1)}(\xi)=0
\]</span> 由于<span class="math inline">\(L_n(t)\)</span>是不大于<span class="math inline">\(n\)</span>阶的多项式，因此<span class="math inline">\(L_n^{(n+1)}(t)=0\)</span>；<span class="math inline">\(\Pi(t)\)</span>则是一个<span class="math inline">\(n+1\)</span>阶多项式，因此<span class="math inline">\(\Pi^{(n+1)}(t)=(n+1)!\)</span>，那么由<span class="math inline">\(\varphi^{(n+1)}(\xi)=0\)</span>可以推得 <span class="math display">\[
f^{(n+1)}(\xi)=K(x)(n+1)!
\]</span> 所以，<span class="math inline">\(K(x)=\displaystyle\frac{f^{(n+1)}(\xi)}{(n+1)!}\)</span>，那么整个Lagrange插值多项式的插值余项就可以写为 <span class="math display">\[
R_n(x)=\frac{f^{(n+1)}(\xi)}{(n+1)!}\Pi(x)
\]</span> Lagrange插值余项并不是一个精确的值，因为<span class="math inline">\(\xi\)</span>是不知道的，但我们可以根据余项的表达式进行误差上界的估计 <span class="math display">\[
R_n(x)\leq\frac{max|f^{(n+1)}(x)|}{(n+1)!}\Pi(x)
\]</span></p>
<h2 id="newton插值多项式">3.3 Newton插值多项式</h2>
<h3 id="newton基函数">3.3.1 Newton基函数</h3>
<p>Newton基函数的定义为 <span class="math display">\[
n_0(x)=1
\]</span> <span class="math display">\[
n_j(x)=\prod_{i=0}^{j-1}(x-x_i),\ j&gt;0
\]</span></p>
<h3 id="newton插值多项式-1">3.3.2 Newton插值多项式</h3>
<p>Newton插值多项式是Newton基函数的线性组合，即 <span class="math display">\[
N_n(x)=a_0+a_1(x-x_0)+a_2(x-x_0)(x-x_1)+...+a_n\prod_{i=0}^{n-1}(x-x_i)
\]</span> Newton插值多项式比较有趣的地方在于系数。 <span class="math display">\[
y_0 = a_0
\]</span> <span class="math display">\[
y_1 = y_0 + a_1(x_1-x_0)
\]</span> 那么 <span class="math display">\[
a_1 = \frac{y_1-y_0}{x_1-x_0}
\]</span> 那么 <span class="math display">\[
a_2 = \frac{\displaystyle\frac{y_2-y_0}{x_2-x_0}-\frac{y_1-y_0}{x_1-x_0}}{x_2-x_1}
\]</span> 这个系数很明显是有规律的，这个规律可以用差商来简化描述。</p>
<h4 id="差商和newton插值多项式系数的关系">差商和Newton插值多项式系数的关系</h4>
<p>我们将<span class="math inline">\(f[x_i, x_k]=\displaystyle\frac{f_i-f_k}{x_i-x_k}\)</span>记为<span class="math inline">\(f(x)\)</span>关于节点<span class="math inline">\(x_i, x_k\)</span>的一阶差商，将<span class="math inline">\(f[x_i, x_j,x_k] = \displaystyle\frac{\displaystyle\frac{f_i-f_k}{x_i-x_k}-\frac{f_i-f_j}{x_i-x_j}}{x_k-x_j}=\frac{f[x_i, x_k]-f[x_i, x_j]}{x_k-x_j}\)</span>记为<span class="math inline">\(f(x)\)</span>关于节点<span class="math inline">\(x_i, x_j, x_k\)</span>的二阶差商。</p>
<p>可以证明，Newton插值多项式的第<span class="math inline">\(n\)</span>阶系数<span class="math inline">\(a_n\)</span>就是<span class="math inline">\(f(x)\)</span>关于<span class="math inline">\(n\)</span>个节点的<span class="math inline">\(n\)</span>阶差商。</p>
<h4 id="差商的性质">差商的性质</h4>
<ol type="1">
<li>差商可以表示为函数值<span class="math inline">\(f(x_i)\)</span>的线性组合</li>
<li>差商所含节点具有对称性，交换两个节点的位置并不会影响最终的结果</li>
<li>若<span class="math inline">\(f(x)\)</span>在插值区间上<span class="math inline">\(n\)</span>阶可导，那么插值区间上存在一点<span class="math inline">\(\xi\)</span>使得<span class="math inline">\(f[x_0, x_1, ...,x_n]=\displaystyle\frac{f^{(n)}(\xi)}{n!}\)</span>成立</li>
</ol>
<p>关于第一条性质，可以用下式表示 <span class="math display">\[
f[x_0, x_1, ..., x_k] = \sum_{j=0}^{k}\frac{f(x_j)}{\prod_{i=0\&amp;i\neq j}^{k}(x_j-x_i)}
\]</span> 关于第三条性质，将在Newton插值多项式的余项计算中给出证明。</p>
<h3 id="newton插值多项式的余项">3.3.3 Newton插值多项式的余项</h3>
<p>Newton插值多项式相较于Lagrange插值多项式，有一个非常明显的好处：当插值阶数上升时，除了最高阶项以外，其他的所有项都不会发生变化。所以，Newton插值多项式提高插值阶数非常灵活。假定有一<span class="math inline">\(n\)</span>阶Newton插值多项式<span class="math inline">\(N_n(x)\)</span>，如果我们考虑上升一阶插值阶数，可以得到<span class="math inline">\(N_{n+1}(x)\)</span>，此时比较其差值 <span class="math display">\[
N_{n+1}(x)-N_n(x)=f[x_0, x_1, ..., x_n, x]\prod_{i=0}^{n}(x-x_i)
\]</span> 假定<span class="math inline">\(x\)</span>也是一个节点，将上式换元为 <span class="math display">\[
N_{n+1}(t) - N_n(t)=f[x_0, x_1, ..., x_n, x]\Pi_{i=0}^n(t-x_i)
\]</span> 由于<span class="math inline">\(x\)</span>是一个节点，所以有<span class="math inline">\(N_{n+1}(x)=f(x)\)</span>，那么上式可以写作 <span class="math display">\[
f(x)=N_n(x) + f[x_0, x_1, ..., x_n, x] \Pi_{i=0}^n(x-x_i)
\]</span> 那么余项其实就是 <span class="math display">\[
R_n(x)=f(x) - N_n(x) = f[x_0, x_1, ..., x_n, x]\Pi_{i=0}^n(x-x_i)
\]</span> 也就是说，通过Newton插值多项式能够直接得到插值余项的表达式。</p>
<p>注意，<span class="math inline">\(n\)</span>阶插值多项式具有唯一性，那么余项也具有唯一性，所以Newton插值多项式的余项应该和Lagrange插值多项式的余项相等，那么 <span class="math display">\[
f[x_0, x_1, ..., x_n,x]\Pi_{i=0}^n(x-x_i)=\frac{f^{(n+1)}(\xi)}{(n+1)!}\Pi_{i=0}^n(x-x_i)
\]</span> 注意，这里的差商是<span class="math inline">\(n+2\)</span>项。所以，我们可以证明得到差商的第三个性质，即 <span class="math display">\[
f[x_0, x_1, ..., x_n]=\frac{f^{(n)}(\xi)}{n!}
\]</span></p>
<h3 id="等距节点与差分">3.3.4 等距节点与差分</h3>
<p>在实际应用中，我们一般会按照固定的间隔取插值节点，即相邻的两个插值节点的差值是固定的，这个差值称为步长，一般用符号<span class="math inline">\(h\)</span>来表示。</p>
<p>若有 <span class="math display">\[
\Delta f_i = f(x_i + h) - f(x_i) = f_{i+1}- f_i
\]</span> 称这个<span class="math inline">\(\Delta f_i\)</span>为<span class="math inline">\(f(x)\)</span>在节点<span class="math inline">\(x_i\)</span>处步长为<span class="math inline">\(h\)</span>的一阶向前差分。</p>
<p>有一阶差分，自然也有更高阶的差分，例如 <span class="math display">\[
\Delta^2f_i = \Delta f_{i+1} - \Delta f_i
\]</span> 这个<span class="math inline">\(\Delta^2f_i\)</span>称为<span class="math inline">\(f(x)\)</span>在节点<span class="math inline">\(x_i\)</span>处步长为<span class="math inline">\(h\)</span>的二阶向前差分。</p>
<p>另外，除了向前差分，还有向后差分以及中心差分。向后差分就是<span class="math inline">\(\Delta f_i = f(x_i)-f(x_i - h)\)</span>，中心差分就是<span class="math inline">\(\Delta f_i = f(x_i+\frac{1}{2}h)- f(x_i - \frac{1}{2}h)\)</span>。</p>
<p>在插值节点等距分布的情况下，<span class="math inline">\(k+1\)</span>阶差商也可以简化为 <span class="math display">\[
f[x_0, x_1, ..., x_k] = \frac{\Delta^k f_0}{k!h^k}
\]</span></p>
<h2 id="hermite多项式">3.4 Hermite多项式</h2>
<h3 id="hermite插值问题">3.4.1 Hermite插值问题</h3>
<p>与Lagrange和Newton插值不同，Hermite插值问题不仅要考虑插值多项式在插值点上的值和函数相同，而且在全部或部分插值点上，还要满足一阶导数甚至高阶导数相同的条件。</p>
<p>若函数值、导数值的相同条件共有<span class="math inline">\(n+1\)</span>条，那么插值区间上存在一个不超过<span class="math inline">\(n\)</span>阶的Hermite多项式，满足在插值点上的函数值和导数值符合要求。</p>
<h3 id="hermite基函数">3.4.2 Hermite基函数</h3>
<p>Hermite插值多项式的求解其实是比较灵活的，下面介绍一种比较基础的、通过Hermite基函数来求解Hermite插值多项式的方法。</p>
<p>例如，在插值点<span class="math inline">\(x_0, x_1\)</span>上，要求找出一个插值多项式<span class="math inline">\(H(x)\)</span>，满足<span class="math inline">\(H(x_0)=f(x_0), H(x_1)=f(x_1), H^{(1)}(x_0)=f^{(1)}(x_0), H^{(1)}(x_1)=f^{(1)}(x_1)\)</span>，那么可以构造三次Hermite插值多项式如下 <span class="math display">\[
H(x) = f(x_0)h_0(x)+f(x_1)h_1(x)+f^{(1)}(x_0)\bar h_0(x) + f^{(1)}(x_1)\bar h_1(x)
\]</span> 其中，<span class="math inline">\(h(x)\)</span>被称为Hermite基函数。<span class="math inline">\(h_0(x)\)</span>满足<span class="math inline">\(h_0(x_0)=1, h_0(x_1)=0, h_0^{(1)}(x_0)=0, h^{(1)}(x_1)=0\)</span>的条件，<span class="math inline">\(h_1(x)\)</span>满足<span class="math inline">\(h_1(x_0)=0, h_1(x_1)=1, h_1^{(1)}(x_0)=0, h_1^{(1)}(x_1)=0\)</span>的条件，<span class="math inline">\(\bar h_0(x)\)</span>满足<span class="math inline">\(\bar h_0(x_0)=0, \bar h_0(x_1)=0, \bar h_0^{(1)}(x_0)=1, \bar h_0^{(1)}(x_1)=0\)</span>的条件，<span class="math inline">\(\bar h_1(x)\)</span>满足<span class="math inline">\(\bar h_1(x_0)=0, \bar h_1(x_1)=0, \bar h_1^{(1)}(x_0)=0, \bar h_1^{(1)}(x_1)=1\)</span>的条件。其实这种构造基函数的方式和Lagrange基函数非常相似，只不过推广到了导数条件上去。</p>
<p>为了满足上述条件，需要进行各个基函数的构造。以<span class="math inline">\(h_0(x)\)</span>为例，由于<span class="math inline">\(x=x_1\)</span>时函数值和导数值均为0，因此<span class="math inline">\(x_1\)</span>肯定是<span class="math inline">\(h_0(x)\)</span>的二重零点，所以<span class="math inline">\(h_0(x)\)</span>必有因子<span class="math inline">\((x-x_1)^2\)</span>；由于<span class="math inline">\(H(x)\)</span>是三次多项式，所以所有的基函数都可能是三次多项式，那么可以令<span class="math inline">\(h_0(x)=(a+bx)(x-x_1)^2\)</span>。事实上，为了方便计算，我们会令<span class="math inline">\(h_0(x)=(a+b\displaystyle \frac{x-x_0}{x_1-x_0})(\frac{x-x_1}{x_0-x_1})^2\)</span>。那么将<span class="math inline">\(x=x_0\)</span>时的函数值和导数值条件代入，可以得到 <span class="math display">\[
\begin{aligned}
&amp;h_0(x_0)=(a+b\frac{x_0-x_0}{x_1-x_0})(\frac{x_0-x_1}{x_0-x_1})^2=1\\
&amp;h_0^{(1)}(x_0)=\frac{b}{x_1-x_0}(\frac{x_0-x_1}{x_0-x_1})^2+(a+b\frac{x_0-x_0}{x_1-x_0})\frac{2}{x_0-x_1}\frac{x_0-x_1}{x_0-x_1}=0
\end{aligned}
\]</span> 那么 <span class="math display">\[
\begin{aligned}
&amp;a=1\\
&amp;b=2
\end{aligned}
\]</span> 即 <span class="math display">\[
h_0(x)=(1+2\frac{x-x_0}{x_1-x_0})(\frac{x-x_1}{x_0-x_1})^2
\]</span> 其他的基函数同理，都可以求出来。</p>
<p>很明显，Hermite基函数的构造也是比较繁琐的，特别是在未知数的数量增多之后，求解起来将会非常麻烦。对于导数条件比较少的情况，其实可以找一些其他的方法进行Hermite插值多项式的求解。</p>
<h3 id="hermite多项式的其他解法">3.4.3 Hermite多项式的其他解法</h3>
<p>假设我们现在需要对插值区间内的5个插值点进行Hermite插值，但是只要求在某一个插值点上导数值相同，也就是说，Hermite插值问题中的6个条件只有1个是导数条件。对于这种问题，我们完全可以先进行函数值条件的插值，得到一个不大于4次的插值多项式，然后再利用最后一个导数条件以及前面的5个零点条件求出另一个不大于5次的插值多项式，最后将上面两个插值多项式相加，就可以得到不大于5次的Hermite多项式了。</p>
<h3 id="hermite多项式的余项">3.4.4 Hermite多项式的余项</h3>
<p>假定在插值区间上有3个插值点<span class="math inline">\(x_0, x_1, x_2\)</span>，5个插值条件<span class="math inline">\(f(x_0), f(x_1), f(x_2), f^{(1)}(x_0), f^{(1)}(x_1)\)</span>，那么有余项 <span class="math display">\[
R_4(x) = \frac{f^{(5)}(\xi)}{5!}(x-x_0)^2(x-x_1)^2(x-x_0)
\]</span> 余项的组成是很有规律的。前面的<span class="math inline">\(\displaystyle \frac{f^{(n+1)}(\xi)}{(n+1)!}\)</span>的阶数永远和插值条件个数相等，后面的连乘项中，每个插值点上有几个条件，那这个<span class="math inline">\(x-x_i\)</span>就是多少次方。</p>
<h2 id="样条插值">3.5 样条插值</h2>
]]></content>
      <categories>
        <category>Mathematics</category>
      </categories>
      <tags>
        <tag>Numerical Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器最大TCP连接数问题</title>
    <url>/2022/11/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%80%E5%A4%A7TCP%E8%BF%9E%E6%8E%A5%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在不考虑硬件资源的情况下，一个服务器（对应公网的一个 ip 地址）最大能够建立多少个TCP连接？</p>
<p>需要明确的一点是，一个TCP连接有四要素：</p>
<ol type="1">
<li>服务器 ip 地址</li>
<li>服务器端口</li>
<li>客户端 ip 地址</li>
<li>客户端端口</li>
</ol>
<p>所以TCP最大连接数其实就是求一个组合问题。在 ipv4 的情况下，同一网络中最多能够存在 <span class="math inline">\(2^{32}\)</span> 个 ip 地址；服务器往往只监听一个特殊的端口，所以服务器这边的 ip 地址和端口是唯一确定的；TCP 中端口是用一个16位无符号整型数来表示的，再考虑到1000以内的端口一般是保留的，所以粗略估计一下，一个服务器最多能够建立起 <span class="math inline">\((2^{32}-1) \times (2^{16}-1000)\)</span> 个TCP连接。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer Networking</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学习方法-无监督学习概述</title>
    <url>/2022/11/02/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95-%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>本文是李航老师的《统计学习方法》无监督学习部分的学习笔记。</p>
<h2 id="概述">概述</h2>
<h3 id="特征">特征</h3>
<ul>
<li>数据集无标签 <span class="math inline">\(U = \{x_1, x_2, ..., x_n\}\)</span></li>
</ul>
<p>一般用 <span class="math inline">\(z=g_{\theta}(x)\)</span> 或 <span class="math inline">\(P_{\theta}(z|x)\)</span> 来表示模型，其中 <span class="math inline">\(z\)</span> 表示分析结果，以与监督学习区分。</p>
<h3 id="常用方法">常用方法</h3>
<ol type="1">
<li>聚类</li>
<li>降维 Dimensionality Reduction</li>
<li>概率模型估计
<ol type="1">
<li>混合模型</li>
<li>概率图模型
<ol type="1">
<li>有向图模型</li>
<li>无向图模型</li>
</ol></li>
</ol></li>
</ol>
<span id="more"></span>
<h3 id="三要素">三要素</h3>
<p>无监督学习和监督学习一样，都有三要素：模型、策略、算法。</p>
<p>策略方面</p>
<ul>
<li>聚类：样本与所属类别中心距离的最小化</li>
<li>降维：降维过程中信息损失的最小化</li>
<li>概率模型：模型生成概率的最大化</li>
</ul>
<h2 id="类-cluster">类 Cluster</h2>
<p>用 <span class="math inline">\(G\)</span> 表示一个类，用 <span class="math inline">\(x_i, x_j\)</span> 表示类中的两个元素，用 <span class="math inline">\(n_G\)</span> 表示类的大小，用 <span class="math inline">\(d_{ij}\)</span> 表示元素 <span class="math inline">\(x_i, x_j\)</span> 之间的距离，可以给出类的定义</p>
<p>若有实数值 <span class="math inline">\(T &gt; 0\)</span>，对于任意 <span class="math inline">\(x_i, x_j \in G\)</span>，满足 <span class="math inline">\(d_{ij} \leq T\)</span>，则称 <span class="math inline">\(G\)</span> 为一个类。</p>
<h3 id="类的特征">类的特征</h3>
<h4 id="类的中心-bar-x_g">类的中心 <span class="math inline">\(\bar x_G\)</span></h4>
<p>类的中心一般取类中所有元素的平均值。</p>
<p><span class="math display">\[
\bar x_G = \frac{1}{n_G} \sum^{n_G}_{i=1}x_i
\]</span></p>
<h4 id="类的直径-d_g">类的直径 <span class="math inline">\(D_G\)</span></h4>
<p>类的直径一般取类中相隔最远的两个元素之间的间距。</p>
<p><span class="math display">\[
D_G = \mathop{max}\limits_{x_i, x_j \in G}d_{ij}
\]</span></p>
<h4 id="类的样本散布矩阵-a_g-和样本协方差矩阵-s_g">类的样本散布矩阵 <span class="math inline">\(A_G\)</span> 和样本协方差矩阵 <span class="math inline">\(S_G\)</span></h4>
<ul>
<li>样本散布矩阵 Scatter Matrix</li>
<li>样本协方差矩阵 Covariance Matrix</li>
</ul>
<p><span class="math display">\[
A_G = \sum^{n_G}_{i=1}(x_i - \bar x_G)(x_i - \bar x_G)^T
\]</span></p>
<p><span class="math display">\[
S_G = \frac{1}{m-1}A_G
\]</span></p>
<p>其中，<span class="math inline">\(m\)</span> 为样本的维数。</p>
<h3 id="类与类之间的距离">类与类之间的距离</h3>
<p>类 <span class="math inline">\(G_p\)</span> 和 类 <span class="math inline">\(G_q\)</span> 之间的距离 <span class="math inline">\(D(p, q)\)</span>，也称为类之间的连接(Linkage)。</p>
<h4 id="最短距离-或-单连接-single-linkage">最短距离 或 单连接 Single Linkage</h4>
<p><span class="math display">\[
D(p, q) = min\{d_{ij}|x_i \in G_p, x_j \in G_q\}
\]</span></p>
<h3 id="最长距离-或-完全连接-complete-linkage">最长距离 或 完全连接 Complete Linkage</h3>
<p><span class="math display">\[
D(p, q) = max\{d_{ij}|x_i \in G_p, x_j \in G_q\}
\]</span></p>
<h3 id="中心距离">中心距离</h3>
<p><span class="math display">\[
D(p, q) = d_{\bar x_p, \bar x_q}
\]</span></p>
<h3 id="平均距离">平均距离</h3>
<p><span class="math display">\[
D(p, q) = \frac{1}{n_pn_q}\sum_{x_i \in G_p}\sum_{x_j \in G_q}d_{ij}
\]</span></p>
<h2 id="常用的聚类方法">常用的聚类方法</h2>
<h3 id="层次聚类">层次聚类</h3>
<p>层次聚类分成聚合和分解两种方向，但原理基本类似。从聚合的角度来看，层次聚类的过程主要是</p>
<ol type="1">
<li>第一次迭代，每一个数据都看作一个类</li>
<li>根据一定的规则，进行类的合并，直到达到收敛条件</li>
</ol>
<p>层次聚类的主要元素</p>
<ol type="1">
<li>距离定义</li>
<li>合并规则</li>
<li>收敛条件（如类个数或类直径阈值）</li>
</ol>
<h3 id="k均值聚类">k均值聚类</h3>
<h4 id="策略">策略</h4>
<p>通过损失函数的最小化来选择样本集合的最优划分</p>
<h4 id="要点">要点</h4>
<ol type="1">
<li>距离采用欧式距离定义</li>
<li>各个元素与所属类中心的距离之和定义为损失函数</li>
<li><span class="math inline">\(k\)</span> 的值需要预先定义好</li>
</ol>
<p>如果将优化目标写作 <span class="math inline">\(C^{*}\)</span>，那么有定义</p>
<p><span class="math display">\[
C^* = \mathop{argmin}\limits_{C}W(C) = \mathop{argmin}\limits_{C}\sum^k_{i=1}\sum_{C(i)=l}||x_i - \bar x_l||^2
\]</span></p>
<p>其实就是先计算每个类中所有元素到类中心点的距离之和，再把所有类的这个距离之和再求和，求解使得这个损失函数最小的元素划分方案。</p>
<h3 id="迭代过程">迭代过程</h3>
<ol type="1">
<li>在样本中随机选取 <span class="math inline">\(k\)</span> 个点，作为初始类的中心，然后对剩余的每个点进行距离计算，将点放到离自己最近的类中心点对应的那个类中去</li>
<li>重新计算类的中心，然后用新的类中心去计算每个点与类之间的距离，并调整点的归属，直到收敛</li>
</ol>
<h4 id="特征-1">特征</h4>
<ol type="1">
<li>算法复杂度 <span class="math inline">\(O(mnk)\)</span>，其中 <span class="math inline">\(m\)</span> 为数据维度，<span class="math inline">\(n\)</span> 为样本数量，<span class="math inline">\(k\)</span> 为类的数量</li>
<li>初始点的选取会对最终的聚类结果造成很大的影响</li>
<li>必须事先给定 <span class="math inline">\(k\)</span> 的取值才能进行聚类，如果事先无法确定最优的 <span class="math inline">\(k\)</span> 值，可以选择若干个 <span class="math inline">\(k\)</span> 值进行试验，选择效果最好的那个 <span class="math inline">\(k\)</span> 值</li>
<li>聚类效果可以用类的平均直径来衡量</li>
</ol>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Unsupervised Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学习方法-模型评估与选择</title>
    <url>/2022/11/02/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95-%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<h2 id="模型评估参数">模型评估参数</h2>
<h3 id="训练误差">训练误差</h3>
<p>将训练得到的模型记为 <span class="math inline">\(Y = \hat f(X)\)</span>，那么训练误差就是模型 <span class="math inline">\(\hat f\)</span> 在训练集 <span class="math inline">\(T\)</span> 中的经验风险函数。</p>
<p><span class="math display">\[
R_{emp}(\hat f) = \frac{1}{N}\sum^N_{i=1}L(y_i, \hat f(x_i)), (x_i, y_i) \in T
\]</span></p>
<h3 id="测试误差">测试误差</h3>
<p>测试误差指的是模型 <span class="math inline">\(\hat f\)</span> 在测试集中的经验风险函数。</p>
<p><span class="math display">\[
e_{test} = \frac{1}{N&#39;}\sum^{N&#39;}_{i=1}L(y_i, \hat f(x_i)), (x_i, y_i) \in T_{test}
\]</span></p>
<h3 id="模型评估方法">模型评估方法</h3>
<p>训练误差对于模型的好坏评价意义不大，主要用来判断假设空间选取是否合适；测试误差对于模型的泛化能力评估意义比较大。</p>
<h2 id="交叉验证-cross-validation">交叉验证 Cross Validation</h2>
<p>为了更好地评估训练得到模型的性能，交叉验证是必要的。利用测试集进行模型泛化能力的评估是交叉验证的结果，本小节的重点是记录交叉验证的方法，或者说如何进行训练集和测试集的划分。</p>
<h3 id="简单交叉验证">简单交叉验证</h3>
<p>随机将数据集的70%作为训练集，剩余30%作为测试集。</p>
<h3 id="s折交叉验证-s-fold">S折交叉验证 S-Fold</h3>
<p>S折交叉验证是工业中最常用的交叉验证方法，因为这种方法能最大程度上发挥数据集的作用。具体的做法是，将数据集随机分成S个子集，随后进行S次迭代，每一次迭代都将S个子集中的其中一个子集作为测试集，其他的S-1个子集作为训练集。经过S次迭代之后，选出平均测试误差最小的模型作为最优模型。</p>
<h3 id="留一交叉验证-leave-one-cut">留一交叉验证 Leave-one-cut</h3>
<p>留一交叉验证是S折交叉验证的一种特殊情况，即取S的值为样本容量。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust新建Cargo项目</title>
    <url>/2022/11/03/Rust%E6%96%B0%E5%BB%BACargo%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="新建项目">新建项目</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo new world_hello</span><br></pre></td></tr></table></figure>
<p>通过 <code>cargo new</code> 命令可以新建一个 <code>bin</code> 类型的项目。Rust中分 <code>bin</code> 和 <code>lib</code> 类型项目，<code>bin</code> 指最后生成的是可执行文件，<code>lib</code> 表示这属于一个库。<code>cargo new</code> 默认新建 <code>bin</code> 类型项目。</p>
<span id="more"></span>
<h2 id="运行项目">运行项目</h2>
<h3 id="run-运行">run 运行</h3>
<p>通过 <code>cargo run</code> 可以直接编译并运行生成的二进制文件。不过需要注意，<code>cargo run</code> 默认使用 <code>debug</code> 模式进行项目的编译与运行。</p>
<h3 id="先编译然后手动执行">先编译，然后手动执行</h3>
<p>通过 <code>cargo build</code> 可以进行项目的编译。完成编译之后，通过 <code>./target/debug/world_hello</code> 可以运行生成的二进制文件。</p>
<h3 id="两种编译方式">两种编译方式</h3>
<p>默认状态下，使用 <code>debug</code> 方式进行项目的编译。这种方式的编译速度比较快，编译器没有进行优化，所以用于 <code>debug</code> 时的快速编译，但是运行性能会有损失。</p>
<p>另一种方式是 <code>release</code> 方式，用这种方式进行编译，需要更长时间用于编译器的优化工作，但是运行性能将有很大的提升。指定 <code>release</code> 编译的方式是 <code>cargo run --release</code> 或 <code>cargo build --release</code>。</p>
<p>当然，如果用 <code>release</code> 方式进行编译，那么可执行文件将在 <code>./target/release</code> 下。</p>
<h3 id="cargo-check">cargo check</h3>
<p>在项目规模上升之后，每次进行一些代码的变更可能都要花很长时间去编译，这会影响开发效率。<code>cargo</code> 最酷炫的工具便是 <code>cargo check</code>，可以快速检查代码是否能够通过编译，而不需要完整地走一次 <code>cargo build</code> 流程浪费时间。（在开发的过程中，大部分情况下编译是为了检查代码是否编写正确，能够正确地编译为二进制文件）</p>
<h2 id="项目结构">项目结构</h2>
<p>通过 <code>tree</code> 命令，可以发现一个干净的Rust项目中仅有 <code>Cargo.toml</code> 以及 <code>/src/main.rs</code> 这两个文件。经过编译之后，项目中会生成 <code>/target</code> 文件夹以及 <code>Cargo.lock</code> 文件。</p>
<h3 id="cargo.toml-和-cargo.lock">Cargo.toml 和 Cargo.lock</h3>
<p><code>Cargo.toml</code> 和 <code>Cargo.lock</code> 是cargo的两个核心文件。其中 <code>Cargo.toml</code> 就类似于 <code>CMakeLists.txt</code> 相较于cmake的作用，用于对项目的构建信息等进行描述。而 <code>Cargo.lock</code> 是根据 <code>Cargo.toml</code> 生成的依赖清单。一般来说，我们需要合理地编写 <code>Cargo.toml</code> 文件，而不太需要管自动生成的 <code>Cargo.lock</code> 文件。</p>
<p>如果项目类型为 <code>bin</code>，那么最好将 <code>Cargo.lock</code> 一起上传至git仓库；如果项目类型为 <code>lib</code>，那么一般不需要考虑 <code>Cargo.lock</code>，将其加入 <code>.gitignore</code> 文件。</p>
<h3 id="cargo.toml-的结构">Cargo.toml 的结构</h3>
<h4 id="package">[package]</h4>
<p>打开 <code>Cargo.toml</code> 文件，可以看到 <code>[package]</code> 字段。其中，有 <code>name, version, edition</code> 等metadata。<code>name</code> 定义了项目的名称，<code>version</code> 定义了当前的项目版本，<code>edition</code> 定义了Rust大版本。</p>
<h4 id="dependency">[dependency]</h4>
<p><code>Cargo.toml</code> 文件中的 <code>[dependency]</code> 字段定义了项目的依赖。Rust支持以下三种类型的依赖引入</p>
<ul>
<li>从官方 <code>crates.io</code> 仓库引入，通过版本说明来描述</li>
<li>从项目源代码的git仓库或URL来描述</li>
<li>本地项目的绝对或相对路径，通过类Unix的方式来描述</li>
</ul>
<h3 id="main.rs">main.rs</h3>
<p><code>/src/main.rs</code> 是项目的入口文件，其中的 <code>main()</code> 函数则是项目的入口函数。我们简单地修改一下项目默认生成的 <code>main.rs</code>，如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">greeting</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">chinese</span> = <span class="string">&quot;世界，你好&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">english</span> = <span class="string">&quot;World, hello&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">regions</span> = [chinese, english];</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">region</span> <span class="keyword">in</span> regions.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, &amp;region);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">greeting</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面这个代码段可以看出，Rust中对于函数的定义以 <code>fn</code> 开头，对变量的声明利用 <code>let</code> 命令符开头，语句以 <code>;</code> 结尾。</p>
<p>组成数组的方式和 <code>Python</code> 类似，直接 <code>let regions = [chinese, english];</code> 即可。另外，Rust中利用迭代器进行数组的遍历，所以使用 <code>for region in regions.iter()</code> 语句进行 <code>regions</code> 数组中的元素遍历。<strong>Rust圣经的作者称数组为集合。</strong></p>
<p><code>println!</code> 函数后面有一个 <code>!</code> 感叹号，这个感叹号的作用相当于声明当前这个调用的函数是一个宏，暂时先不用太深究。<code>println!</code> 函数提供了类似于 <code>Python</code> 的字符串格式化功能，能够自动判断变量类型，无需手动格式化，比较方便。</p>
<p>注意，Rust中的字符串原生支持 <code>UTF-8</code> 编码，所以可以在字符串中引入各种语言。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>win10关闭terminal的提示音[SOLVED]</title>
    <url>/2022/11/03/win10%E5%85%B3%E9%97%ADterminal%E7%9A%84%E6%8F%90%E7%A4%BA%E9%9F%B3/</url>
    <content><![CDATA[<p>Win10的Terminal挺好用，但是按下tab的时候经常出现很烦人的提示音。下面记录一下如何删除这个提示音。</p>
<ol type="1">
<li>点击Settings</li>
<li>点击Profiles-Defaults</li>
<li>点击Advanced</li>
<li>将Bell notification style中的复选框全不选</li>
</ol>
<span id="more"></span>
<figure>
<img src="/2022/11/03/win10%E5%85%B3%E9%97%ADterminal%E7%9A%84%E6%8F%90%E7%A4%BA%E9%9F%B3//win10取消terminal的提示音.png" alt><figcaption>默认情况下第一项是选中的，取消第一项的选中</figcaption>
</figure>
]]></content>
      <categories>
        <category>Technical Issues</category>
      </categories>
      <tags>
        <tag>win10</tag>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入门-猜数字游戏</title>
    <url>/2022/11/04/Rust%E5%85%A5%E9%97%A8-%E7%8C%9C%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h2 id="引入">引入</h2>
<p>Rust是一门很有意思的语言。《Rust程序设计语言》中，在Rust入门章节介绍了一个猜数字小游戏的编程，对于Rust的入门非常有帮助，因此简单记录一下。</p>
<span id="more"></span>
<h2 id="猜数字小游戏总览">猜数字小游戏总览</h2>
<p>我们希望随机生成一个 <span class="math inline">\([0, 100]\)</span> 区间内的整数，让用户来猜这个数字。如果猜错了，要提示猜大了还是猜小了，然后让用户继续猜；如果猜对了，则提示用户猜对了，并结束游戏；如果用户不想玩了，可以输入 <code>quit</code> 退出游戏。</p>
<h3 id="生成一个新项目">生成一个新项目</h3>
<p><code>cargo</code> 是Rust的项目管理工具，可以实现非常便捷的依赖管理。我们使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo new guessing_game</span><br></pre></td></tr></table></figure>
<p>命令，进行 <code>guessing_game</code> 项目工程的新建。</p>
<h3 id="获取用户的输入">获取用户的输入</h3>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;来玩一个猜数字游戏，我们会随机生成0-100之间的一个整数，你来猜&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;请输入你的猜测&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">        .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;你输入的数字是：&#123;&#125;&quot;</span>, guess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面简单分析一下上面这段代码中所蕴含的Rust概念：</p>
<ul>
<li><code>println!()</code> 是Rust中最常用的输出方式，注意 <code>!</code> 表示这是一个宏，而不是一个函数。Rust中提供了两个输出内容到命令行的方式，<code>println!()</code> 为其一，另一个宏是 <code>print!()</code>，这两者的相同之处在于它们都会将内容格式化为字符串，打印到命令行上；不同之处在于，<code>println!()</code> 会在格式化之后的字符串末尾自动加上 <code>\n</code> 换行符，而 <code>print!()</code> 是不会加换行符的。</li>
<li><code>let</code> 是Rust中新建变量的关键字；<code>mut</code> 是Rust中可变变量的意思。Rust中默认新建的变量是不可变的 <code>immutables</code>，如果要新建可变变量必须声明 <code>mut</code> 类型。也就是说，Rust强迫程序员在声明可变变量的时候付出更多的成本，这也是出于保障内存安全的考虑而设计的机制。</li>
<li><code>String::new()</code> 表示新建一个 <code>String</code> 类型的实例。</li>
<li><code>std::io</code> 是Rust标准库中的io库，这是为了获取用户的输入。
<ul>
<li>本程序的第一行代码 <code>use std::io;</code> 表示这个文件中可以使用 <code>std::io</code> 库中的功能，所以代码中可以直接使用 <code>io::stdin()</code> 来使用库中的 <code>stdin()</code> 函数；如果不声明 <code>use std::io;</code>，也可以使用 <code>std::io::stdin()</code> 来使用。</li>
<li>本例中的 <code>io::stdin()</code> 函数将会在调用后返回一个 <code>std::io::Stdin</code> 实例。我们需要调用该实例的 <code>read_line()</code> 方法，读取命令行输入的数据；</li>
<li><code>read_line(&amp;mut guess)</code> 表示，将命令行读取到的数据存入之前创建的可变变量 <code>mut guess</code> 中去，这里有一个 <code>&amp;</code> 符号，表示引用，实际上在机器层面，是将 <code>read_line()</code> 读取到的数据存入 <code>mut guess</code> 这个可变变量对应的内存地址中去；</li>
<li><code>read_line()</code> 其实会返回一个 <code>Result</code> 实例，这是一个枚举类型，包括 <code>Ok</code> 以及 <code>Err</code> 两个成员，如果 <code>read_line()</code> 成功，<code>Result</code> 将是 <code>Ok</code>，反之 <code>Result</code> 将为 <code>Err</code>；其实这隐含了异常处理机制，我们可以使用 <code>Result</code> 实例的 <code>expect()</code> 方法进行异常的处理。
<ul>
<li>如果 <code>Result</code> 实例是 <code>Err</code>，那么调用 <code>expect()</code> 会导致程序崩溃；我们可以在 <code>expect()</code> 中输入错误信息，例如程序中所示的 <code>expect("Failed to read line")</code>，将会使得程序崩溃之后给出错误信息提示，有点类似于其他语言中抛出异常时给一个异常的信息</li>
<li>如果 <code>Result</code> 实例是 <code>Ok</code>，那么调用 <code>expect()</code> 不会出现任何问题，而是会返回 <code>Ok</code> 中的值；<code>read_line()</code> 方法的返回值是读到的字符串的字节长度，我们这里不需要这个值，所以并没有将这个值和某个变量进行绑定。</li>
</ul></li>
</ul></li>
<li>最后，我们再次调用了 <code>println!()</code> 把 <code>guess</code> 变量的值输出到命令行；注意，我们这里使用了 <code>println!()</code> 函数的格式化功能，和Python的 <code>print(f'')</code> 函数很类似，只需要用 <code>&#123;&#125;</code> 在需要格式化输出的地方进行标记，然后在字符串后面跟上对应的变量，Rust会自动将对应变量的值转为字符串，插入到标记的位置，连前缀 <code>f</code> 都不需要写，非常方便。</li>
</ul>
<h3 id="生成随机数">生成随机数</h3>
<h4 id="项目依赖的介绍">项目依赖的介绍</h4>
<p>Rust的标准库中没有随机数生成的相关功能，因此必须从外部引入库。前面我们用 <code>cargo new</code> 命令生成了整个项目，可以在 <code>Cargo.toml</code> 文件中的 <code>[dependencies]</code> 项中，声明项目的外部库依赖。这里顺带提一下，Rust中的外部库称为 <code>crate</code>，因为在英语中一个 <code>crate</code> 就代指一箱货物，和 <code>cargo</code> 这个集装箱的概念就对应上了。<code>crate</code> 分为 <code>binary crate</code> 和 <code>library crate</code>，主要的区别在于 <code>binary crate</code> 的产物是一个可执行文件，所以这样的 <code>crate</code> 中一定会存在一个 <code>main.rs</code> 作为入口文件；<code>library crate</code> 主要提供一些函数，用来给别人调用，因此不要求存在 <code>main.rs</code>。</p>
<p>打开 <code>Cargo.toml</code> 文件，在 <code>[dependencies]</code> 下面添加 <code>rand["0.9.3"]</code> 项。然后，我们运行一次 <code>cargo build</code>，<code>cargo</code> 会自动帮我们从 <code>crate.io</code> 拉取对应的代码，随后完成一次构建。注意到我们在添加依赖项的时候，必须按照 <code>a.b.c</code> 的格式进行版本号声明。事实上，<code>a.b.c</code> 是 <code>^a.b.c</code> 的简化版本，这暗示了 <code>cargo</code> 会自动帮我们从 <code>crate.io</code> 中找到 <code>a.b.x</code> 版本的依赖，这个 <code>x</code> 是大于等于 <code>c</code> 的。也就是说，<code>cargo</code> 会自动帮助我们在构建他人的项目时，下载依赖的最新小版本代码。</p>
<p>这很方便，但也存在问题，例如依赖的小版本更新恰好影响了项目的功能。为了解决这个问题，在 <code>Cargo.lock</code> 文件中会保存初次构建时使用的依赖版本，这个机制主要是为了使得所有人都能够复现成功的构建，而不会由于依赖的版本变更导致无法进行构建。</p>
<p><code>cargo update</code> 可以将当前的依赖版本更新到最新的小版本，这点和我们去构建别人的项目行为一致。如果要在 <code>b</code> 上进行版本变更，必须手动修改 <code>Cargo.toml</code> 文件。例如原来是 <code>"0.8.4"</code> 的依赖，想要更新到 <code>"0.9.0"</code>，那么必须要手动修改；如果是 <code>"0.8.4"</code> 更新到 <code>"0.8.5"</code>，是可以用 <code>cargo update</code> 更新的。</p>
<h4 id="使用-rand-库">使用 <code>rand</code> 库</h4>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 前面的代码不再重复出现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">0</span>..<span class="number">101</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最上方的 <code>use rand::Rng</code> 是一个 <code>trait</code>，定义了随机数生成器应当实现的方法。<code>trait</code> 的定义在后面会详细介绍，这里只需要知道我们想要使用随机数生成器，就必须引入这个 <code>trait</code>。随后，利用 <code>rand</code> 库中的 <code>thread_rng()</code> 函数，获取一个随机数生成器，这个生成器位于当前线程的环境中，从操作系统获取 <code>seed</code>。最后，我们调用随机数生成器的 <code>gen_range()</code> 方法，进行 <span class="math inline">\([0, 100]\)</span> 区间内随机整数的生成，这个方法是 <code>rand::Rng</code> 这个 <code>trait</code> 定义的。注意 <code>0..101</code> 表示 <span class="math inline">\([0, 101)\)</span>，也就是左闭右开区间。</p>
<h3 id="比较随机数和用户输入的数字">比较随机数和用户输入的数字</h3>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 前面的代码不再重复出现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;请输入一个数字！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number) &#123;</span><br><span class="line">        Ordering::Equal =&gt; <span class="built_in">println!</span>(<span class="string">&quot;你猜对了！&quot;</span>),</span><br><span class="line">        Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;你猜大了！&quot;</span>),</span><br><span class="line">        Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;你猜小了！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码中，首先要将 <code>guess</code> 变量从字符串类型转换为整型，否则无法进行比较。</p>
<ul>
<li><code>let guess: u32 = ...</code> 表示创建一个 <code>u32</code> 类型的不可变变量，其中 <code>u32</code> 表示32位无符号整型</li>
<li><code>guess.trim()</code> 是在 <code>guess</code> 作为一个 <code>String</code> 实例时，调用了其 <code>trim()</code> 方法，这个方法可以将字符串头尾的换行符、制表符以及空白符号去除掉；注意我们之前的 <code>std::io::Stdin.read_line()</code> 方法在读取命令行输入时，会把用户的回车也读取进来，这导致字符串总是以 <code>"\n"</code> 结尾，所以必须使用 <code>trim()</code> 方法进行换行符的去除</li>
<li><code>guess.trim().parse()</code> 是对 <code>guess.trim()</code> 返回的字符串进行类型转换。前面我们已经定义了 <code>guess</code> 为 <code>u32</code> 类型，所以这里不需要重复指明转换后的类型，Rust编译器会自动判断；当然，如果我们没有事先定义好 <code>u32</code> 数据类型的话，必须要指明转换类型；这个 <code>parse()</code> 函数和前面的 <code>std::io::Stdin.read_line()</code> 函数一样，会返回一个 <code>Result</code> 实例；如果 <code>Result</code> 为 <code>Ok</code>，那么可以从 <code>Result</code> 中获得 <code>parse()</code> 成功转换之后的值，例如从 <code>"1"</code> 转换为 <code>1</code>；如果 <code>Result</code> 为 <code>Err</code>，那么说明 <code>parse()</code> 的过程中发生了错误，例如 <code>guess</code> 变量中存在非数字字符，例如 <code>"hero"</code> 是无法进行到整型的类型转换的。为了避免这种错误，我们应该在这里也使用 <code>expect()</code> 函数进行错误处理，否则Rust编译器会报警。这不会影响编译，但是最好养成良好的编程习惯，利用 <code>expect()</code> 捕获 <code>Err</code> 并退出程序。</li>
<li><code>guess.cmp()</code> 方法用于比较两个变量值的关系，并给出一个 <code>std::cmp::Ordering</code> 类型枚举量。
<ul>
<li>利用 <code>match</code> 语句，我们可以写出一个类似于C语言中 <code>switch</code> 的语言结构，即 <code>guess.cmp()</code> 比较出来的结果是 <code>A</code> 的时候执行什么语句；<code>match</code> 的分支称为 <code>arm</code>，一个 <code>arm</code> 对应一个 <code>pattern</code>；<code>match</code> 应当遍历目标变量的所有 <code>pattern</code>。</li>
<li>可以观察到 <code>match</code> 语句的内部，存在三种条件判断
<ul>
<li><code>if guess.cmp(&amp;secret_number) == Ordering::Equal</code> 则 <code>println!("你猜对了！")</code></li>
<li><code>if guess.cmp(&amp;secret_number) == Ordering::Greater</code> 则 <code>println!("你猜大了！")</code></li>
<li><code>if guess.cmp(&amp;secret_number) == Ordering::Less</code> 则 <code>println!("你猜小了！")</code></li>
</ul></li>
</ul></li>
</ul>
<h3 id="引入循环">引入循环</h3>
<p>其实代码写到这里，这个游戏就可以进行一次完成的流程了。但是，我们希望用户能够多猜几次数字，毕竟一次要猜中非常困难。为此，我们需要在程序中引入循环。如果用户猜中了，本轮游戏结束；如果用户猜错了，则让用户继续猜数字；如果用户不想玩了，则输入 <code>quit</code> 退出游戏。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;我们来玩一个猜数字游戏，我会在0-100之间随机生成一个整数，然后你来猜！&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">0</span>..<span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;请输入你的猜测！&quot;</span>);</span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">            .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> guess.<span class="title function_ invoke__">trim</span>() == <span class="string">&quot;quit&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;请输入一个数字！&quot;</span>);</span><br><span class="line">        <span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number) &#123;</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;你猜对了！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;你猜大了！&quot;</span>),</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;你猜小了!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;再见！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们引入了 <code>loop</code> 语句，这和C语言中的 <code>while(1)</code> 是类似的，就是一个无限的循环，可以通过 <code>break</code> 跳出。我们在用户输入之后，先判断是否为 <code>"quit"</code>，如果是就跳出循环，从而退出程序；如果不是，则判断能不能正常转为整型，然后再与 <code>secret_number</code> 进行比较，如果猜对了就跳出循环，从而退出程序，如果猜错就重新开始循环。</p>
<h2 id="总结">总结</h2>
<p>这个小程序非常简单，但是涉及到了Rust中非常多的概念和流程语句，因此作为一个Rust入门程序非常好。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入门-通用编程概念</title>
    <url>/2022/11/07/Rust%E5%85%A5%E9%97%A8-%E9%80%9A%E7%94%A8%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="变量与可变性">变量与可变性</h2>
<h3 id="可变变量与不可变变量">可变变量与不可变变量</h3>
<p>Rust与其他的编程语言有一个很大的不同——Rust的变量分为可变变量 <code>mutable variable</code> 和不可变变量 <code>immutable variable</code> 两种。</p>
<p>可变变量就是普通的变量，例如在Python中，我们可以通过 <code>x = 1</code> 定义一个 <code>int</code> 类型的变量 <code>x</code>，然后再通过 <code>x = 2</code> 令变量 <code>x</code> 的值改为 <code>2</code>；在Rust中也是相同的，我们可以通过 <code>let mut x: u32 = 1;</code> 定义一个 <code>u32</code> 整型可变变量 <code>x</code>，然后通过 <code>x = 2u32;</code> 令可变变量 <code>x</code> 的值变为 <code>2</code>。</p>
<p>Rust最神奇的设计就是不可变变量，而且变量默认就是不可变的。例如 <code>let x = 1;</code> 会定义一个 <code>i32</code> 整型不可变变量 <code>x</code>，如果我们想把上面这个 <code>x</code> 的值改成 <code>2</code> 将会导致编译不通过。这种机制对于内存安全要求高的代码来说很棒，因为Rust从语言机制上确保了不可变变量的内存安全，特别是在多线程异步开发中，某些逻辑上应该保持不变的量可能因为错误的程序设计导致在运行时发生了变化，而这些错误是非常难追溯的。因此，Rust在注重内存安全的领域受到了广泛应用，例如区块链领域。</p>
<p>定义变量的关键字是 <code>let</code>；若要定义可变变量，还需要加上修饰词 <code>mut</code>。</p>
<span id="more"></span>
<h3 id="变量的遮蔽">变量的遮蔽</h3>
<p>Rust允许变量遮蔽。所谓的变量遮蔽指的是，如果在同一个作用域中出现了两个同名变量，那么在访问这个名字的变量时将会访问最后定义的那个同名变量，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>, x);</span><br></pre></td></tr></table></figure>
<p>上面这段函数将会输出 <code>x = 2</code>。</p>
<p>上面提到了作用域这个概念，所谓的作用域简单理解就是 <code>&#123;&#125;</code> 围成的区域，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 这是main函数作用域</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">2</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 这是内部作用域</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>, x);</span><br><span class="line">        <span class="comment">// 离开内部作用域后，let x = 3; 语句定义的变量x失效</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码运行后，将会输出 <code>x = 3</code> 和 <code>x = 2</code> 结果。</p>
<h3 id="变量的命名风格">变量的命名风格</h3>
<p>在Rust中，变量的命名遵循 <code>snake_case</code>，这和Python是一样的命名风格。</p>
<h3 id="不可变变量与常量">不可变变量与常量</h3>
<p>不可变变量听上去很像是一个常量，毕竟这两个概念都要求对应内存地址的值不可被改变。但是不可变变量和常量是存在区别的，是两个完全不同的概念。</p>
<p>首先，不可变变量虽然不可变，但仍然是一个变量，定义关键字为 <code>let</code>；常量不是变量，定义关键字也不一样，是 <code>const</code>。</p>
<p>其次，不可变变量在定义时，可以不给出变量类型，例如 <code>let x = 1;</code> 语句，默认定义一个 <code>i32</code> 类型的整型变量；常量在定义时，必须指明数据类型，例如 <code>const x = 1;</code> 是不允许的，必须明确告诉编译器 <code>const x: u32 = 1;</code>，这是因为常量定义表达式是在编译时进行计算的</p>
<p>另外，不可变变量可以绑定到一个表达式(expression)的返回值上，例如 <code>let x = some_func();</code>，表达式和绑定的概念在后面会给出；常量在定义时，只能绑定到一个数值上，而不能绑定到一个表达式的返回值上。</p>
<p>最后，Rust不允许常量的遮蔽，如果出现了两个同名常量定义，那么Rust编译器将会报错。</p>
<p>总之，常量和不可变变量是相当不同的两个概念。常量的命名规范是常量名全大写，语义之间用 <code>_</code> 下划线分隔开。</p>
<h2 id="数据类型">数据类型</h2>
<p>Rust中的数据类型可以分为以下两类</p>
<ul>
<li>标量类型</li>
<li>复合类型</li>
</ul>
<h3 id="标量类型数据-scalar">标量类型数据 Scalar</h3>
<p>Rust中的标量类型数据包括</p>
<ul>
<li>整型</li>
<li>浮点数</li>
<li>布尔量</li>
<li>字符</li>
</ul>
<h4 id="整型">整型</h4>
<p>Rust中的整型可以根据是否有符号分为有符号整型和无符号整型</p>
<ul>
<li>有符号整型
<ul>
<li><code>i8</code> 8位有符号整型</li>
<li><code>i16</code> 16位有符号整型</li>
<li><code>i32</code> 32位有符号整型</li>
<li><code>i64</code> 64位有符号整型</li>
<li><code>i128</code> 128位有符号整型</li>
<li><code>isize</code> 位数与CPU位数相同的有符号整型</li>
</ul></li>
<li>无符号整型
<ul>
<li><code>u8</code> 8位无符号整型</li>
<li><code>u16</code> 16位无符号整型</li>
<li><code>u32</code> 32位无符号整型</li>
<li><code>u64</code> 64位无符号整型</li>
<li><code>u128</code> 128位无符号整型</li>
<li><code>usize</code> 位数与CPU位数相同的无符号整型</li>
</ul></li>
</ul>
<p>Rust默认整型类型为 <code>i32</code>。</p>
<p>这里想强调一下Rust中的溢出保护机制。使用 <code>debug</code> 模式编译时，Rust编译器会检查可能发生的溢出，如果检查到代码某处可能会溢出，Rust编译器会报Panic；使用 <code>release</code> 模式编译时，Rust编译器不会检查溢出，但是如果程序真的在运行时发生溢出，Rust默认会对溢出的变量进行 <code>wrapping</code> 保护，例如 <code>let x: i8 = 128;</code> 会导致溢出，<code>release</code> 模式下编译后，当程序运行到这一行代码时，Rust会自动将变量 <code>wrapping</code> 为 <code>-128</code>。所谓的 <code>wrapping</code> 其实就是将溢出的那一位直接丢弃，然后以补码的形式解析剩余位。在实际开发中，不能依赖 <code>wrapping</code> 机制解决溢出问题，因为会产生溢出的代码是错误的代码，程序员应该自行修复代码的错误。</p>
<p>Rust提供了一些处理溢出的函数，例如</p>
<ul>
<li><code>wrapping_*</code> 可以利用 <code>wrapping</code> 机制进行溢出处理，例如 <code>wrapping_add</code> 可以在加法溢出时进行结果的 <code>wrapping</code></li>
<li><code>checked_*</code> 可以在运算发生溢出时返回 <code>None</code>，而不是返回错误的数据</li>
<li><code>overflowing_*</code> 可以在运算发生溢出时返回溢出的错误值以及一个溢出标志位</li>
<li><code>saturating_*</code> 方法可以限制运算结果的范围，若上溢则返回数据类型能够支持的最大值，若下溢则返回数据类型能够支持的最小值</li>
</ul>
<h4 id="浮点数">浮点数</h4>
<p>Rust提供 <code>f32</code> 和 <code>f64</code> 两种类型的浮点数，默认类型为 <code>f64</code>，因为现代CPU大多是64位的，进行 <code>f64</code> 浮点计算和 <code>f32</code> 浮点计算的运算性能是相近的，但精度却高了非常多，建议非必要不用 <code>f32</code>。</p>
<h4 id="布尔量">布尔量</h4>
<p>Rust中的布尔量有两个可能的值：<code>true</code> 和 <code>false</code>。布尔量的大小为1个字节，用 <code>bool</code> 声明。</p>
<p>布尔量在Rust中没有什么特别的，不过值得一提的是，Rust中的 <code>if</code> 控制语句不像C或Python，不支持自动将整型、浮点数或字符自动转为布尔量，<code>if</code> 后面必须跟的是纯粹的布尔量，形如 <code>if 1.8</code> 的语句是不会自动转义为 <code>if true</code> 的。</p>
<h4 id="字符">字符</h4>
<p>Rust的字符和其他语言有很大的不同。像C语言中的字符，一般是一个字节的ASCII码，但是Rust中的字符是4字节的Unicode码，代码中甚至可以出现emoji表情，例如 <code>let cat = '🐱';</code>。</p>
<p>Rust中的字符用单引号 <code>''</code> 标注，以与字符串区分。</p>
<h3 id="复合类型">复合类型</h3>
<p>Rust中的复合类型主要包括以下两类</p>
<ul>
<li>元组tuple</li>
<li>数组array</li>
</ul>
<h4 id="元组">元组</h4>
<p>Rust中的元组和Python中的元组几乎一致，同样</p>
<ul>
<li>由 <code>()</code> 标注</li>
<li>元组内部各元素的数据类型不要求一致</li>
<li>可以通过索引从元组中读取元素</li>
</ul>
<p>不过Rust作为一种静态类型(statically typed)语言，在元组定义时仍然提出了各元素类型定义的要求。典型的Rust元组定义语句如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>, <span class="type">u32</span>, <span class="type">bool</span>) = (<span class="number">10</span>, <span class="number">20</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>Rust从元组中读取元素数据的方法与Python略有不同。Rust支持通过模式匹配(pattern matching)的方式从元组中解构(destructuring)数据，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>, <span class="type">u32</span>, <span class="type">bool</span>) = (<span class="number">10</span>, <span class="number">20</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> (x, y, z) = tup;</span><br></pre></td></tr></table></figure>
<p>经过解构，可以得到变量类型为 <code>i32</code>，值为 <code>10</code> 的变量 <code>x</code>；变量类型为 <code>u32</code>，值为 <code>20</code> 的变量 <code>y</code>；变量类型为 <code>bool</code>，值为 <code>true</code> 的变量 <code>z</code>。</p>
<p>Rust还支持通过下标进行元组元素的访问，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>, <span class="type">u32</span>, <span class="type">bool</span>) = (<span class="number">10</span>, <span class="number">20</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = tup.<span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = tup.<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">z</span> = tup.<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>上面这种访问方式和通过模式匹配方式从元组中解构数据的效果是一样的。通过下标访问更加自然灵活，通过解构访问代码简单紧凑，各有各的好处。</p>
<p>如果一个元组中没有任何值，就是一个孤零零的 <code>()</code>，那么这种元组的类型被称为单元类型(unit type)，其值为单元值(unit value)；不返回任何值的表达式实际上会隐式地返回一个 <code>()</code>。</p>
<h4 id="数组">数组</h4>
<p>Rust中的数组和C中的数组非常相似，同样</p>
<ul>
<li>数组中的元素数据类型必须一致</li>
<li>数组长度在定义时确定，不可变</li>
</ul>
<p>数组因为上述特性，可以被分配在内存的栈上，而且其顺序结构使得元素的访问速度非常快。不过数组因为长度固定，所以不太灵活，对于一些数据长度不确定的场合，使用Rust中可以动态改变长度的 <code>vector</code> 会更合适，不过在这里不细说。</p>
<p>数组在定义时，必须声明元素数据类型和数组长度，如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">u32</span>; <span class="number">6</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br></pre></td></tr></table></figure>
<p>可以看出，上述数组的数据类型定义为 <code>[u32; 6]</code>，其中分号前的内容指明了数组元素的数据类型，分号后的内容指明了数组长度。数组还可以以以下方式定义</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">0</span>; <span class="number">5</span>];</span><br></pre></td></tr></table></figure>
<p>这样定义的数组等效于 <code>let arr = [0, 0, 0, 0, 0];</code>。</p>
<p>虽然数组在定义时，必须声明元素数据类型和数组长度，但是形如 <code>[u32; 6]</code> 这样的数据类型定义却不是必须的，这是因为Rust整型和浮点数都有默认数据类型，编译器也可以通过定义式中数组的元素数量来判断数组长度，所以在实际coding时，只需要保证编译器能够推断出数组的元素数据类型和数组长度即可。</p>
<p>Rust访问数组元素的方式和C一致，也是通过下标进行元素访问，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = arr[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>, x);</span><br></pre></td></tr></table></figure>
<p>上述代码将会输出 <code>x = 1</code>。</p>
<p>注意，如果Rust访问数组时出现索引越界，程序会因为panic而异常退出，以保证不存在通过索引越界访问相邻内存的漏洞。</p>
<h2 id="函数">函数</h2>
<h3 id="rust函数">Rust函数</h3>
<p>Rust中的函数以 <code>fn</code> 标识，一个典型的Rust函数定义如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>(x: <span class="type">u32</span>, y: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">    x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，Rust中的函数签名和Python是非常相似的，同样是用 <code>:</code> 进行形参数据类型的标注，用 <code>-&gt;</code> 进行返回值数据类型的标注；不同之处在于Python使用 <code>:</code> 标注函数作用域，而Rust使用 <code>&#123;&#125;</code> 标注函数作用域。</p>
<p>函数签名中的参数称为形参(parameter)，在调用函数时传入的实值称为实参(argument)，不过在日常交流中一般不区分parameter和argument这两个概念的区别。</p>
<h3 id="语句和表达式">语句和表达式</h3>
<p>Rust是一门基于表达式(expression)的语言。所谓的表达式，指的是有返回值的一个语句，例如 <code>x &gt; 1</code> 这个表达式会返回一个布尔量，例如上面我们定义的 <code>add()</code> 函数会返回一个 <code>u32</code> 整型。语句(statement)则不会产生返回值，例如 <code>let x = 1;</code>，就是一个语句。由于语句不产生返回值，因此形如 <code>let x = (let y = 1);</code> 这样的代码是错误的。这和C等语言有一定的区别，这些语言允许形如 <code>x = y = 1;</code> 这样的赋值语句，因为在这些语言中赋值也会返回一个值。</p>
<p>在Rust函数中，我们可以不通过 <code>return</code> 来返回一个值，而是可以通过不写分号，利用表达式来作为函数的返回值。例如上面的 <code>add()</code> 函数，函数体内只有一句 <code>x + y</code>，注意这行代码是没有分号的，所以这是一个表达式，相当于 <code>return x + y;</code>。当然，这是因为表达式出现在函数的尾部，所以Rust会自动将这句表达式作为函数的返回值。</p>
<p>Rust函数定义是一个语句，但函数调用是一个表达式，所以 <code>let z = add(x, y);</code> 这样的代码是合法的；另外，定义作用域的大括号 <code>&#123;&#125;</code> 也形成一个表达式，因此 <code>let a = &#123;let x = 1; x + 1&#125;;</code> 也是合法的。和函数一样，作用域的末行代码必须是一条表达式，否则这个作用域将会是没有返回值的表达式，返回值将是一个 <code>()</code>。</p>
<h2 id="注释">注释</h2>
<p>Rust的注释风格与C语言类似，单行注释以 <code>//</code> 开头。Rust不建议出现以下风格的注释</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>; <span class="comment">// define a variable</span></span><br></pre></td></tr></table></figure>
<p>Rust建议的注释风格如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// define a variable</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>即同一行代码中尽量不要既存在普通代码，又存在注释。</p>
<p>Rust还支持文档注释，这一点将在后面的包管理章节进行介绍。</p>
<h2 id="控制流">控制流</h2>
<p>在猜数字游戏中提到了 <code>match</code> 控制流，这是一个类似于C语言中 <code>switch</code> 的控制流。由于 <code>match</code> 属于Rust独有的控制流，因此本章节暂不做介绍。下面介绍Rust中的 <code>if-else</code> 控制流、<code>loop</code> 控制流、<code>for</code> 控制流和 <code>while</code> 控制流。</p>
<h3 id="if-else-控制流"><code>if-else</code> 控制流</h3>
<p>Rust中的 <code>if-else</code> 控制几乎与C语言完全相同，但是前面在介绍布尔量时也提到了，不像C语言，Rust严格要求 <code>if</code> 或 <code>else</code> 后面的条件表达式返回值类型为 <code>bool</code>，如果返回值类型为整型、浮点型或其他别的类型，Rust编译器将会报错。</p>
<p><code>if</code> 控制流还可以用在 <code>let</code> 语句中，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="keyword">if</span> a &gt; <span class="number">1</span> &#123;<span class="number">1</span>&#125; <span class="keyword">else</span> &#123;<span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="loop-控制流"><code>loop</code> 控制流</h3>
<h4 id="循环标签">循环标签</h4>
<p><code>loop</code> 控制流是Rust中一个比较有趣的循环控制流。<code>loop &#123;&#125;</code> 本身和 <code>while true &#123;&#125;</code> 是一样的，都是无限循环，但是 <code>loop</code> 控制流支持对 <code>loop</code> 打标签(loop label)，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&#x27;outer_loop</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="symbol">&#x27;inner_loop</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，这个 <code>loop label</code> 是一个形如 <code>'loop_name: loop</code> 的标签。</p>
<p><code>loop</code> 循环可以用 <code>break</code> 关键字跳出，不过 <code>loop label</code> 的存在使得我们可以指定 <code>break</code> 跳出哪一个 <code>loop</code>，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&#x27;outer_loop</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="symbol">&#x27;inner_loop</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> x &gt; <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> <span class="symbol">&#x27;outer_loop</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Rust的这个 <code>loop label</code> 机制在循环嵌套的时候非常有用，因为我们可能会在应用中碰到内层循环中判定某个条件，然后直接跳出整个嵌套循环的场景，但普通的 <code>break</code> 只能跳出当前的循环。在Rust中，通过标识最外层 <code>loop</code>，我们就可以直接通过 <code>break</code> 最外层的 <code>loop</code> 跳出整个大循环。</p>
<h4 id="从循环返回值">从循环返回值</h4>
<p><code>loop</code> 循环在 <code>break</code> 时可以提供一个返回值，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">cnt</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> cnt &lt; <span class="number">10</span> &#123;</span><br><span class="line">        cnt = cnt + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码将会在结束循环后返回 <code>cnt</code> 的值，这种设计在一些重连机制中非常实用。</p>
<h3 id="while-控制流"><code>while</code> 控制流</h3>
<p><code>while</code> 控制流和C语言基本上是一致的，没有什么特别之处。</p>
<h3 id="for-控制流"><code>for</code> 控制流</h3>
<p>Rust中的 <code>for</code> 控制流和Python中的 <code>for</code> 比较类似，可以遍历集合中的元素。对于一些需要用到索引的地方，可以这样使用 <code>for</code> 循环，如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">cnt</span> <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Current counter = &#123;&#125;&quot;</span>, cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的循环就会在数组 <code>[1, 2, 3]</code> 中完成元素的遍历。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析笔记-最小二乘法</title>
    <url>/2022/11/07/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/</url>
    <content><![CDATA[<h2 id="由函数表估计函数关系的常见方法">由函数表估计函数关系的常见方法</h2>
<ol type="1">
<li>多项式插值</li>
<li>样条曲线拟合</li>
</ol>
<p>多项式插值是一种很简单的函数拟合方法，对于关系比较简单的函数表来说效果还可以，但是如果函数表中的点复杂一些，就会有很大的误差，而且很容易出现Runge现象；样条曲线拟合是一种很好的函数拟合方式，每两个函数点之间都进行一次三次样条插值，且在插值点上能够实现一阶或两阶导数相等，但是计算量非常大。</p>
<p>上面提到的两种方法都有各自的优势和弊端。下面介绍另外一种函数拟合的方式——最小二乘法。最小二乘法可以克服数值振荡的问题，同时计算量也能够得到控制。</p>
<span id="more"></span>
<h2 id="什么是最小二乘法">什么是最小二乘法？</h2>
<p>最小二乘法是这样一系列操作：在函数空间 <span class="math inline">\(\Phi\)</span> 中，求一个最优的函数 <span class="math inline">\(s^*(x)\)</span>，使得</p>
<p><span class="math display">\[
\sum_{i=0}^m\omega_i [s^*(x_i) - f(x_i)]^2=min_{s(x)\in \Phi} \sum_{i=0}^m \omega_i [s(x_i) - f(x_i)]^2
\]</span></p>
<p>其中 <span class="math inline">\(\omega_i\)</span> 表示 <span class="math inline">\(x=x_i\)</span> 处的权。最小二乘法本质上是函数逼近。</p>
<h2 id="最小二乘法的具体做法">最小二乘法的具体做法</h2>
<p>求上面所述的 <span class="math inline">\(s^*(x)\)</span> 可以等价为求一系列 <span class="math inline">\(\{a_n\}\)</span> 使得</p>
<p><span class="math display">\[
\sum_{i=0}^m [a_i\varphi_i(x_i)-f(x_i)]^2
\]</span></p>
<p>取得极小值。为此可以写出在第 <span class="math inline">\(k\)</span> 个基函数 <span class="math inline">\(\varphi_k(x)\)</span> 上的法方程</p>
<p><span class="math display">\[
\sum_{j=0}^m (\varphi_j, \varphi_k)a_j = (f, \varphi_k), k = 0, 1, 2, ..., n
\]</span></p>
<p>其中，<span class="math inline">\((f, g)\)</span> 表示函数 <span class="math inline">\(f\)</span> 和 <span class="math inline">\(g\)</span> 在所有插值点上的函数值之积求和。法方程可以总结为被逼近函数 <span class="math inline">\(f(x)\)</span> 与基函数 <span class="math inline">\(\varphi_k(x)\)</span> 在插值点上的积之总和等于基函数 <span class="math inline">\(\varphi_k(x)\)</span> 与其他所有线性无关基函数 <span class="math inline">\(\varphi_j(x)\)</span> 在插值点上的积之总和的加权和，其中加权系数为 <span class="math inline">\(a_j\)</span>。</p>
<p>法方程展开可以得到以下等式</p>
<p><span class="math display">\[
\sum_{j=0}^m a_j\sum_{i=0}^n \omega_i(x_i) \varphi_j(x_i) \varphi_k(x_i) = \sum_{i=0}^n \omega_i(x_i) \varphi_k(x_i) f(x_i), k=0, 1, 2, ..., n
\]</span></p>
<p><em>由法方程可以推导出 <span class="math inline">\(s^*(x)\)</span> 的唯一性</em> 由于 <span class="math inline">\({\varphi(x)}\)</span> 是一组线性无关的基函数，因此上述方程组是非奇异的，那么必然能够解出唯一的一组 <span class="math inline">\(\{a_j\}\)</span>，所以 <span class="math inline">\(s^*(x)\)</span> 存在且唯一。</p>
<h2 id="最小二乘逼近的技巧">最小二乘逼近的技巧</h2>
<p>提高最小二乘法拟合精度的技巧主要在于选择合适的函数空间 <span class="math inline">\(\Phi\)</span>。所谓选择合适的函数空间，其实就是选择合适的拟合模型，这一点对于做ECM拟合的人来说应该是非常熟悉的事情了。一种常用的模型是多项式模型 <span class="math inline">\(\{x^n\}\)</span>，但用这个模型进行最小二乘法拟合的效果比多项式插值可能还要差，因为多项式的次数太高了，很容易出现病态问题——即函数表的数据稍有变化，拟合函数的参数 <span class="math inline">\(a_j\)</span> 就出现剧烈的变化。所以多项式模型做最小二乘逼近是很少使用的。</p>
<p>一种比较好的方法是，采用<strong>正交多项式族</strong>作为基函数。所谓的正交多项式族，是指一些形如 <span class="math inline">\(ax^3 + bx^2 + cx\)</span> 以及 <span class="math inline">\(ax^2 + bx + c\)</span> 的函数组成的一组基函数，这些多项式函数两两正交。</p>
<h3 id="正交多项式族">正交多项式族</h3>
<p>正交多项式族可以用以下公式求得</p>
<p><span class="math display">\[
\begin{aligned}
&amp;p_0(x) = 1\\
&amp;p_{k+1}(x) = (x -\alpha_k)p_k(x) - \beta_{k-1} p_{k-1}(x)\\
\end{aligned}
\]</span></p>
<p>其中 <span class="math display">\[
\begin{aligned}
&amp; \alpha_k = \frac{(xp_k, p_k)}{(p_k, p_k)}\\
&amp; \beta_{k-1} = \frac{(p_k, p_k)}{(p_{k-1}, p_{k-1})}\\
\end{aligned}
\]</span></p>
<p>同样，<span class="math inline">\((p_k, p_k)\)</span> 表示函数 <span class="math inline">\(p_k(x)\)</span> 和自己在所有插值点上的函数值之积求和。</p>
<p>由于正交多项式族是通过给定的插值点构造出来的，因此最易于计算的一组正交多项式族应当满足在插值点上正交，即在插值点上与其他所有基函数的函数值之积求和恰好为0，那么法方程就可以简化为</p>
<p><span class="math display">\[
a_k(\varphi_k, \varphi_k) = (f, \varphi_k), k= 0, 1, 2, ..., n
\]</span></p>
<p>所以，加权系数 <span class="math inline">\({a_k}\)</span> 的表达式就变得非常简单</p>
<p><span class="math display">\[
a_k = \frac{(f, \varphi_k)}{(\varphi_k, \varphi_k)}
\]</span></p>
<h3 id="利用正交多项式族进行最小二乘逼近">利用正交多项式族进行最小二乘逼近</h3>
<ol type="1">
<li>写出第 <span class="math inline">\(k\)</span> 项正交多项式 <span class="math inline">\(p_k(x) = (x - \alpha_{k-1})p_{k-1}(x) - \beta_{k-2}p_{k-2}(x)\)</span></li>
<li>由 <span class="math inline">\(p_k(x)\)</span> 可以计算得到 <span class="math inline">\(a_k=\displaystyle\frac{(f, \varphi_k)}{(\varphi_k, \varphi_k)}\)</span></li>
<li>第 <span class="math inline">\(k\)</span> 项正交多项式基函数 <span class="math inline">\(g_k(x)=a_kp_k(x)+g_{k-1}(x)\)</span></li>
<li>为了求出第 <span class="math inline">\(k+1\)</span> 项正交多项式 <span class="math inline">\(p_{k+1}(x)\)</span>，必须求出 <span class="math inline">\(\alpha_k\)</span> 和 <span class="math inline">\(\beta_{k-1}\)</span>，<span class="math inline">\(\alpha_k=\displaystyle\frac{(xp_k, p_k)}{(p_k, p_k)}\)</span>, <span class="math inline">\(\beta_{k-1} = \displaystyle\frac{(p_k, p_k)}{(p_{k-1}, p_{k-1})}\)</span></li>
<li>写出第 <span class="math inline">\(k+1\)</span> 项正交多项式 <span class="math inline">\(p_{k+1}(x)\)</span></li>
</ol>
<h2 id="周期函数逼近">周期函数逼近</h2>
<p>如果被逼近函数是一个周期函数，那么可以在函数空间 <span class="math inline">\(\Phi = \{1, sinx, cosx, sin2x, cos2x, ..., sinnx, cosnx\}\)</span> 上求最佳平方逼近函数 <span class="math inline">\(s_n(x) = \displaystyle\frac{a_0}{2} + \sum_{j=1}^n(a_jcosjx + b_jsinjx)\)</span>，其中</p>
<p><span class="math display">\[
\begin{aligned}
&amp;a_j = \frac{1}{\pi} \int^{2\pi}_0 f(x) cosjxdx, \ j = 0, 1, ...,n\\
&amp;b_j = \frac{1}{\pi} \int^{2\pi}_0 f(x) sinjxdx, \ j = 1, 2, ..., n
\end{aligned}
\]</span></p>
<p>其实实际应用中不可能进行连续积分，一般只能给出离散的采样点 <span class="math inline">\((x_i, y_i)\)</span>，那么可以将上面的连续积分离散化，得到</p>
<p><span class="math display">\[
\begin{aligned}
&amp;a_j = \frac{2}{N}\sum_{i=0}^{N-1}y_icoskx_i, \  k=0, 1, ..., n\\
&amp;b_j = \frac{2}{N}\sum_{i=0}^{N-1}y_isinkx_i, \ k = 1, 2, ..., n
\end{aligned}
\]</span></p>
<p>不过需要注意，上面的 <span class="math inline">\(x\)</span> 应线性变换至 <span class="math inline">\((0, 2\pi)\)</span>。</p>
]]></content>
      <categories>
        <category>University</category>
      </categories>
      <tags>
        <tag>Numerical Analysis</tag>
        <tag>Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入门-所有权系统</title>
    <url>/2022/11/08/Rust%E5%85%A5%E9%97%A8-%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>什么是所有权？</p>
<p>所有权机制是Rust保证内存安全的一个重要机制。形如Java和C#的编程语言通过垃圾回收(Garbage collector, GC)机制进行内存管理，程序员在编程时无需关心变量在内存中的位置，也无需关心内存的占用与释放，所有的内存都由一个Runtime来管理，因此程序的性能会受到一定的影响，内存占用也比较多；形如C和C++的编程语言要求开发者自行进行内存的申请与释放，其哲学是充分信任程序员的内存管理能力，但经验不足的程序员很容易在编程时遇到内存安全问题；Rust则是另类，通过所有权机制对内存进行管理，由编译器在编译时找出可能存在的内存安全问题。</p>
<p>本笔记将整理Rust中的所有权概念。</p>
<span id="more"></span>
<h2 id="栈stack和堆heap">栈(stack)和堆(heap)</h2>
<p>栈和堆是内存中的两片区域。对于Rust来说，变量的值存储在栈还是堆上与所有权机制是挂钩的，为了更好地理解所有权机制，在这里要强调一下栈和堆这两个不同的概念。</p>
<h3 id="栈">栈</h3>
<p>栈是一个后进先出(LIFO)的结构，就像叠盘子一样，我们总是往一堆盘子的最上方加叠盘子，取的时候也总是从最上方取盘子。这个特性决定了栈是一个紧凑、有序的结构，数据按顺序进栈(push into)，也按顺序出栈(pop off)；在栈中数据总是紧密相邻，数据之间不会出现空位，因此只有数据长度已知的数据才能入栈。</p>
<h3 id="堆">堆</h3>
<p>堆是一个无序、稀疏的结构，就像在一片沙滩上堆沙子一样，我们可以在这里堆一座城堡，在那里堆一个土包，城堡和土包之间可能相隔很远。一般来说，当一个数据的长度未知时，我们会将这个数据存到堆的一个比较稀疏的位置，以便数据扩张，这个过程叫做在堆上给数据分配(allocate)内存空间。分配完内存之后，Rust会返回指向这段数据起始位置的指针，并将这段内存标记为已使用。</p>
<h3 id="栈和堆之间的速度差异">栈和堆之间的速度差异</h3>
<p>数据入栈的速度明显快于在堆上分配内存，因为数据入栈时只要往栈顶上放就可以了，而在堆上分配内存要先在内存中找到一片大小足够的空间，然后才能把这些数据存进去，存完了还得将这一片内存标记为已使用，工作量明显大很多。</p>
<p>从栈中读数据的速度也要比从堆上读数据更快，因为在堆上读数据必须要通过指针，而现代处理器在内存中跳转越多读取速度越慢。</p>
<h3 id="所有权系统的工作">所有权系统的工作</h3>
<p>所有权系统会跟踪哪部分代码正在使用堆上的哪些数据，最大程度上减少堆中的重复数据，并且会清理堆中不再使用的数据。所以总体来说，所有权系统主要任务就是进行堆的管理。</p>
<h2 id="所有权系统">所有权系统</h2>
<h3 id="所有权规则">所有权规则</h3>
<ol type="1">
<li>内存中的每一个值都有一个对应的 <code>Owner</code> 变量</li>
<li>内存中的每一个值在同一时刻只能有一个 <code>Owner</code></li>
<li>当 <code>Owner</code> 离开对应的变量作用域，这个值将从内存中被丢弃</li>
</ol>
<p>变量作用域的概念在函数部分简单说明过，这里不再赘述。</p>
<h3 id="演示所有权规则">演示所有权规则</h3>
<p>在变量数据类型中，基本的标量类型和复合类型变量在完成定义后，其数据长度总是已知的，因此总是被存入栈中。这些变量在离开作用域以后，其对应的值会从栈中被移除。所以这些基本的数据类型不会涉及到堆的管理。</p>
<p>下面介绍一种更加复杂的数据类型，来演示一下Rust的所有权规则。</p>
<h4 id="string-变量"><code>String</code> 变量</h4>
<p>Rust中提供了一种非常易懂的字符串字面值机制，即直接通过硬编码定义一串字符串，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>这个字符串字面值是不可变的。如果我们想要创建一个长度可变的字符串变量要怎么操作呢？Rust为此定义了 <code>String</code> 类型的字符串变量。可以使用 <code>String::from()</code> 方法从字符串字面值创建一个 <code>String</code> 变量，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>如果我们将其定义为一个可变变量，那么可以使用 <code>String</code> 的 <code>push_str()</code> 方法进行追加字符串，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;, world!&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="string-类型的内存分配"><code>String</code> 类型的内存分配</h4>
<p>由于 <code>String</code> 类型可变变量的长度是可增长的，因此它们的值不能存在栈中，只能存到堆里面。这意味着 <code>String</code> 类型变量的内存是在运行时分配的，而且在 <code>String</code> 类型的变量使用完毕以后，这部分内存需要被回收。</p>
<p>运行时分配内存由形如 <code>String::from()</code> 等变量构造的方法进行实现，这种构造变量的方法在其他的编程语言中非常常见；比较棘手的是如何去回收变量在堆中占据的内存。在形如C这种可以直接操作内存的语言中，程序员需要手动为前面 <code>allocate</code> 的内存进行 <code>free</code> 操作，并且这个对应关系必须梳理清楚，否则代码将会出现异常的行为；Rust提供了另一种策略，即内存会在其绑定的变量离开作用域之后自动释放，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行到这里的时候 s 对应的内存已经被释放了</span></span><br></pre></td></tr></table></figure>
<p>这是一种很自然的做法，对于程序员也是如此：变量在它应该起作用的地方起作用，在它不应该起作用的地方失效。在变量离开作用域的时候，Rust会隐式地对这个变量调用用于释放内存的 <code>drop</code> 函数。</p>
<h4 id="string-类型变量在内存中的移动"><code>String</code> 类型变量在内存中的移动</h4>
<p>下面来考虑另外一个问题。对于普通的标量类型变量，如果我们要创建一份变量的拷贝，那么只需要将一个变量的值赋值给另一个变量即可，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x;</span><br></pre></td></tr></table></figure>
<p>这是很自然的做法。上面的操作在内存中的行为也很容易理解，其实就是在栈中存入了两个 <code>i32</code> 类型的整型变量。但是，<code>String</code> 类型的变量如果这样操作的话，在内存中的行为就有明显区别了。前面提到，这个 <code>String</code> 类型的变量是变长的变量，因此只能存入堆中，然后将指针等描述信息存入栈中。实际上一个 <code>String</code> 变量对应了三个栈中的变量</p>
<ul>
<li>指针</li>
<li>长度</li>
<li>容量</li>
</ul>
<p>其中，长度指的是当前这个 <code>String</code> 变量在堆中占据了多少字节的内存；容量这个概念暂时不重要，可以先不去管它。<code>String</code> 变量真正的字符串值被存储在内存的堆中，由栈中的指针指示内存地址。</p>
<p><img src="/2022/11/08/Rust%E5%85%A5%E9%97%A8-%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9F//trpl04-01.svg" width="50%" height="50%" align="center" alt="String变量在内存中的存储"></p>
<p>所以，将一个 <code>String</code> 变量的值拷贝给另外一个 <code>String</code> 变量，并不像标量类型那么简单，对于下面的代码</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x;</span><br></pre></td></tr></table></figure>
<p>在内存中实际上的操作是，CPU复制了 <code>x</code> 在栈中的指针、长度和容量，然后将这些值绑定给变量 <code>y</code>，对于堆中的内容则不动。也就是说，变量 <code>x</code> 和 <code>y</code> 会指向相同的堆地址，这种拷贝方式很像是其他编程语言中的<strong>浅拷贝</strong>（但Rust中的操作与其他语言不完全相同，因此并非浅拷贝，<em>需要注意以下叙述中所有被称为浅拷贝的行为都不是在Rust中发生的行为</em>）。</p>
<p><img src="/2022/11/08/Rust%E5%85%A5%E9%97%A8-%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9F//trpl04-02.svg" width="50%" height="50%" align="center" alt="String变量在内存中的拷贝"></p>
<p>浅拷贝在拷贝的时候，只拷贝了栈上存储的类似于Metadata的部分，对于真正存储在堆上的Data部分是不会拷贝的，所以浅拷贝的速度非常快。但浅拷贝存在一个问题，这个问题出现在内存释放的时候。浅拷贝之后，程序的内存栈中出现了两个指向内存中同一堆地址的指针，假如在释放内存的时候，我们只释放了变量 <code>y</code> 的内存，那么操作系统会回收对应堆的内存，但是栈中仍然存在一个指向那个堆地址的指针信息在 <code>x</code> 中。这将会导致一个严重的内存安全漏洞，因此在第一次释放内存以后，操作系统以为它已经收回了访问这一段内存堆地址的访问权限，但实际上栈中还有一个 <code>x</code> 的指针可以访问这段内存。</p>
<p>为了形象地说明上面这个问题的严重性，下面以租房为例。<code>let x = String::from("hello");</code> 就相当于房东将它的一间房子出租给了变量 <code>x</code>，然后把钥匙（指向内存堆地址的指针）给了它；过段时间 <code>x</code> 跟房东说它不租了，要转租给 <code>y</code>，但偷偷留了一把钥匙，但房东以为只有 <code>y</code> 有钥匙；等 <code>y</code> 退租了以后，房东收回了 <code>y</code> 的那把钥匙，却不知道 <code>x</code> 那里还有一把钥匙。假如 <code>x</code> 在某个时刻突然想起来自己这里还有一把钥匙，要把它还给房东，而恰好房东在这之前已经将房子租给了 <code>z</code>，那么这就会导致 <code>z</code> 因为 <code>x</code> 交还了钥匙而被房东赶了出去。如果你是 <code>z</code> 你崩不崩溃？反正程序是会崩溃的。</p>
<p>上面的这个问题被称为<strong>二次释放(double free)</strong>。事实上，恶意人员拿到一个指向堆中内存地址的指针可能并不能拿来偷取内存中的数据，因为堆中的数据是一般是无序的，除非刚好在这个地址附近有什么机密数据；主要的问题在于，操作系统栈中还有一个指针指向这片内存，假如恰好这片内存在第一次释放之后，又分配给了其他的变量，那么再次释放指针将会破坏其他变量的数据结构，很可能导致程序崩溃。事实上，在C语言中，如果程序员申请了一段堆中的内存，经过一些操作以后释放了这些内存，但没有把指针置为 <code>NULL</code>，而是再次调用释放内存的API进行了一次内存的释放，那么程序将会马上崩溃。</p>
<p>所有权机制为二次释放问题提供了解决方案。假如我们定义了一个 <code>String</code> 类型变量 <code>x</code>，然后将其栈中的值拷贝至 <code>y</code> 的栈上，那么 <code>x</code> 马上就会被弃用，因为我们前面提到——一个内存中的值在同一时刻只能存在一个 <code>Owner</code> ——当 <code>x</code> 在栈中的值被拷贝至 <code>y</code> 的栈上以后，堆中那些值的 <code>Owner</code> 马上由 <code>x</code> 转为 <code>y</code>；而一旦 <code>x</code> 不是任何内存中值的 <code>Owner</code> 以后，这个变量就不再能够访问，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(x);</span><br></pre></td></tr></table></figure>
<p>这段代码将无法通过编译，因为Rust编译器认为 <code>x</code> 是一个无效的引用。</p>
<p>前面我们说，只拷贝栈上Metadata而不拷贝堆上Data的拷贝，一般可以称为<strong>浅拷贝(shallow copy)</strong>。需要注意的是，这与Rust中的行为并不完全相同，因为浅拷贝不会影响原来变量的那些Metadata，而在Rust中原来的变量直接变为不可引用，所以在Rust中与其称其为拷贝，不如直接称其为<strong>移动(move)</strong>，就像将一个文件从一个位置移动到另一个位置之后，原来那个位置就不再能访问这个文件了。</p>
<p><img src="/2022/11/08/Rust%E5%85%A5%E9%97%A8-%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9F//trpl04-04.svg" width="50%" height="50%" align="center" alt="String类型变量移动后原变量被弃用"></p>
<h4 id="string-类型变量的深拷贝"><code>String</code> 类型变量的深拷贝</h4>
<p>有时候我们确实是需要将一个 <code>String</code> 类型变量栈中的值和堆中的值都进行一次拷贝，那么Rust也提供了一种称为 <code>clone</code> 的方法，如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x.<span class="title function_ invoke__">clone</span>();</span><br></pre></td></tr></table></figure>
<p>上面这段代码在内存中的行为就是完全拷贝了 <code>x</code> 变量在栈中的值和在堆中的值到 <code>y</code> 变量上，图示如下</p>
<p><img src="/2022/11/08/Rust%E5%85%A5%E9%97%A8-%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9F//trpl04-03.svg" width="50%" height="50%" align="center" alt="String类型变量的克隆"></p>
<h3 id="函数与所有权">函数与所有权</h3>
<p>对于向函数传参这种情况，其实也涉及到变量的复制和移动的问题。如果是一个 <code>String</code> 要传入函数中，那么在传参的过程中将会出现 <code>String</code> 变量的移动，即函数外部的 <code>String</code> 变量由于传入了函数，导致在内存中发生了移动，最后的结果是</p>
<ul>
<li>原来的那个变量在传入函数之后不再能引用</li>
<li>这一段内存在函数执行结束之后将会自动被释放，除非函数返回了这个变量</li>
</ul>
<p>例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 s 传入 take_ownership() 函数后，s 将会被移动到函数的作用域中去</span></span><br><span class="line">    <span class="title function_ invoke__">take_ownership</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从这里开始 s 已经不再能访问了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">take_ownership</span>(s: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>值得注意的是，如果是变量的值仅存储在栈上，那么不会遇到上面这种问题，变量传入函数时Rust将会自动在栈上复制一份数据传到函数里，而不是将原来的变量移动到函数里。</p>
<p>对于前者，我们经常会碰到这样一种情况：我先拿到了一串数据，然后传入函数得到另一串数据，最后我希望比较传入函数的这串数据和函数计算得到的另一串数据的差异。这个时候，Rust的实现就有点复杂了，似乎只能让这个函数将传入的数据和计算结果一起使用元组返回才能满足我们的需求。这无疑是非常尴尬的设计，每次调个函数还得把数据传进去再传出来，太麻烦了。万幸的是，Rust在调用函数的时候，提供了一种引用机制，能够省去上面说的这些麻烦。</p>
<h2 id="引用与借用">引用与借用</h2>
<p>Rust中允许通过 <code>&amp;</code> 符号创建一个指向某个变量的引用(reference)，而这个创建引用的过程称为借用(borrowing)。引用可以理解为一个变量的快捷方式，不拥有对内存的所有权，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">length</span> = <span class="title function_ invoke__">get_length</span>(&amp;s);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">get_length</span>(s_ref: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">    s_ref.<span class="title function_ invoke__">len</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这段代码定义了一个 <code>String</code> 类型变量 <code>s</code>，然后创建了一个 <code>s</code> 的引用 <code>&amp;s</code> 并传入 <code>get_length()</code> 函数。注意这个函数的签名就是 <code>String</code> 的引用类型 <code>&amp;String</code>。<code>get_length()</code> 函数返回 <code>&amp;s</code> 这个引用指向的 <code>String</code> 变量长度，并返回给到 <code>length</code> 变量，最后 <code>println!(s)</code> 仍然能够输出 <code>s</code> 的值。这说明，将引用传入一个函数，并不会影响引用的那个变量本身。</p>
<p>需要注意的是，不可变变量的引用被称为不可变引用，这是只读的，任何尝试通过不可变引用来改变原变量值的行为都无法通过编译。</p>
<h3 id="创建可变引用">创建可变引用</h3>
<p>如果我们真的需要改变引用变量的值，那么</p>
<ol type="1">
<li>确保原变量是可变变量</li>
<li>使用可变引用</li>
</ol>
<p>例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">change</span>(&amp;<span class="keyword">mut</span> s);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">change</span>(s: &amp;<span class="keyword">mut</span> <span class="type">String</span>) &#123;</span><br><span class="line">    s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;，世界！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于同一个变量，同一时刻允许存在多个不可变引用，但只允许存在一个可变引用，而且不允许同时存在可变引用和不可变引用。这个限制主要是为了在编译时就避免数据竞争(data race)情况的出现。</p>
<h3 id="引用作用域">引用作用域</h3>
<p>一个变量引用的作用域从创建开始，一直持续到最后一次使用结束。例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s_ref</span>: &amp;<span class="type">String</span> = &amp;s;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s_ref);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s_mut_ref</span>: &amp;<span class="type">String</span> = &amp;s;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s_mut_ref);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于最后一次使用 <code>s_ref</code> 在定义 <code>s_mut_ref</code> 之前，所以可变引用 <code>s_ref</code> 和不可变引用 <code>s_mut_ref</code> 的作用域错开了，因此这不会与可变引用和不可变引用无法共存的规则相冲突。</p>
<h3 id="悬垂引用">悬垂引用</h3>
<p>悬垂引用(dangling reference)在一些支持指针的语言中是可能出现的，这个错误来源于释放了堆中的内存，但是栈中的指针没有随之释放掉。其实这和二次释放是类似的问题，只不过悬垂引用不会引发和二次释放一样的严重错误。Rust通过编译器进行悬垂引用的检查，形如下面的代码是无法通过编译的</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span>: &amp;<span class="type">String</span> = <span class="title function_ invoke__">dangle</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">dangle</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &amp;s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码试图通过从函数返回一个引用来创建悬垂引用，因为 <code>dangle()</code> 函数完成以后 <code>s</code> 离开了作用域，<code>s</code> 的内存会被释放掉；如果这样成功返回了 <code>s</code> 的指针，那么确实会出现悬垂引用，不过Rust编译器能够检查到这个错误，并阻止编译通过。所以，Rust中是不会在运行时出现悬垂引用的。</p>
<h2 id="slice切片">slice切片</h2>
<h3 id="字符串切片">字符串切片</h3>
<p>有时候我们可能想取一个 <code>String</code> 变量中的一部分，或者说某一个字符串的子串。Rust提供了字符串slice的方式，进行字符串子串提取。不过需要注意，字符串slice同样是一种引用，不拥有对应内存的所有权，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">sub_string</span> = &amp;s[..<span class="number">7</span>];</span><br></pre></td></tr></table></figure>
<p>这个 <code>&amp;s[..7]</code> 表示引用 <code>s</code> 的第0至第6个字符，形成一个字符串slice引用。这里由于从 <code>0</code> 开始引用，因此可以不写开头的索引，如果要引用第1至第6字符，则要写 <code>&amp;s[1..7]</code>，注意Rust中的区间永远是左闭右开的；如果我们要一直引用到末尾，则可以不写右边的索引，例如 <code>&amp;s[1..]</code>。</p>
<p>我们在写函数签名的时候，可能会需要注明字符串slice的数据类型，这里记一下字符串slice的数据类型为 <code>&amp;str</code>。实际上，字符串字面值(string literal)的数据类型就是 <code>&amp;str</code>！</p>
<p>另外，字符串的slice还能继续被切片，其语法和对字符串进行切片是一致的。</p>
<h3 id="数组切片">数组切片</h3>
<p>不只是字符串能够被切片，数组也是可以切片的，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">a_slice</span> = &amp;a[..<span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<p>那么 <code>a_slice</code> 就会对应 <code>[1, 2, 3]</code>。这里强调一下，数组的切片数据类型形如 <code>&amp;[i32]</code>，这里原数组内的元素是 <code>i32</code> 类型的整型；如果是一个 <code>f64</code> 数组，那么其数组切片数据类型就是 <code>&amp;[f64]</code>。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
</search>
