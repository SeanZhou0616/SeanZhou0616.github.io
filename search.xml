<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Potential Flow Analysis - Magnus Effect</title>
    <url>/2022/11/01/Potential-Flow-Analysis-Magnus-Effect/</url>
    <content><![CDATA[<h2 id="velocity-vector-representation">Velocity vector representation</h2>
<p>Potential flow describes the velocity field as the gradient of the velocity potential. For any position vector <span class="math inline">\(\pmb{r}\)</span> in the vector field, write down the velocity potential as <span class="math inline">\(\phi\)</span>, then in the 2D polar coordinate system, the velocity vector can be represented as <span class="math display">\[
\pmb{v} = \frac{\partial \phi}{\partial r}\pmb{e}_r + \frac{1}{r}\frac{\partial \phi}{\partial \theta}\pmb{e}_{\theta}
\]</span> and the components of the velocity vector along two directions are <span class="math display">\[
\begin{aligned}
&amp;\pmb{v}_r = \frac{\partial \phi}{\partial r} \pmb{e}_r\\
&amp;\pmb{v}_{\theta} = \frac{1}{r}\frac{\partial \phi}{\partial \theta} \pmb{e}_{\theta}
\end{aligned}
\]</span></p>
<span id="more"></span>
<h2 id="d-potential-flow-expression">2D potential flow expression</h2>
<p>Let's assume that there is a 2D velocity field with uniform velocity <span class="math inline">\(U\)</span> and pressure <span class="math inline">\(p_{\infty}\)</span>. Somewhere in this velocity field, there is a rotating circular cylinder with radius <span class="math inline">\(R\)</span> and angular velocity <span class="math inline">\(\displaystyle \frac{d\theta}{dt}\)</span>. Taking the center of the cylinder as the origin, a polar coordinate system could be established, and the velocity potential at a random point <span class="math inline">\((r, \theta)\)</span> would be constructed by the following 3 parts:</p>
<ol type="1">
<li>Uniform Stream - <span class="math inline">\(\phi_1 = Urcos\theta\)</span></li>
<li>Source Doublet - <span class="math inline">\(\phi_2 = UR^2 \displaystyle \frac{cos\theta}{r}\)</span></li>
<li>Potential Vortex - <span class="math inline">\(\phi_3 = \displaystyle \frac{\Gamma \theta}{2\pi}\)</span></li>
</ol>
<p><span class="math inline">\(\Gamma\)</span> represents a potential vortex with circulation, which has a counterclockwise direction. Thus, velocity potential at a random point <span class="math inline">\((r, \theta)\)</span> is <span class="math display">\[
\phi = \phi_1 + \phi_2 + \phi_3 = Urcos\theta + UR^2\frac{cos\theta}{r} + \frac{\Gamma \theta}{2\pi}
\]</span></p>
<h2 id="velocity-pressure-field">Velocity &amp; Pressure field</h2>
<p>We can derive the expression of two components of the velocity vector as <span class="math display">\[
\begin{aligned}
&amp;u_r= \frac{\partial \phi}{\partial r} = Ucos\theta - \frac{UR^2cos\theta}{r^2} \\
&amp;u_{\theta} = \frac{1}{r}\frac{\partial \phi}{\partial \theta} = \frac{1}{r}(-Ursin\theta - UR^2\frac{sin\theta}{r}+\frac{\Gamma}{2\pi})
=-Usin\theta - \frac{UR^2sin\theta}{r^2} +\frac{\Gamma}{2\pi r} \\
\end{aligned}
\]</span> According to Bernoulli equation, pressure at a random point <span class="math inline">\((r, \theta)\)</span> will be derived as <span class="math display">\[
p = p_{\infty}+\frac{\rho}{2}(U^2-\pmb{v}^2)=p_{\infty}+\frac{\rho}{2}[U^2-(u_r^2 + u_{\theta}^2)]
\]</span> <span class="math display">\[
p = p_{\infty} +\frac{\rho}{2}[U^2(\frac{R^4}{r^4}-2cos2\theta\frac{R^2}{r^2})+(\frac{\Gamma}{2\pi r})^2-\frac{\Gamma}{\pi r}Usin\theta(1+\frac{R^2}{r^2})]
\]</span></p>
<h2 id="dimensionless-pressure-coefficient">Dimensionless pressure coefficient</h2>
<p>The dimensionless pressure coefficient <span class="math inline">\(c_p\)</span> can be expressed as <span class="math display">\[
c_p = \frac{p - p_{\infty}}{\displaystyle\frac{\rho}{2}u_{\infty}}= 1-\frac{\pmb{v}^2}{u^2_{\infty}}
\]</span> <span class="math display">\[
c_p = \frac{p - p_{\infty}}{\displaystyle\frac{\rho}{2}u_{\infty}}= 1-\frac{\pmb{v}^2}{u^2_{\infty}} = -\frac{U^2(\displaystyle\frac{R^4}{r^4}-2cos2\theta\frac{R^2}{r^2})+(\frac{\Gamma}{2\pi r})^2-\frac{\Gamma}{\pi r}Usin\theta(1+\frac{R^2}{r^2})}{U^2}
\]</span></p>
<h2 id="magnus-force">Magnus force</h2>
<p>As Magnus force is the force acting on the target cylinder, let's take a look at the pressure along the contour. Let <span class="math inline">\(r=R\)</span>, the velocity vector will be <span class="math display">\[
\begin{aligned}
&amp;u_r = 0\\
&amp;u_{\theta} = -2Usin\theta + \frac{\Gamma}{2\pi r}
\end{aligned}
\]</span> And the pressure along the contour will be simplified as <span class="math display">\[
p_{r=R} = p_{\infty} + \frac{\rho}{2} [U^2(1-4sin^2\theta) + \frac{2\Gamma U sin\theta}{\pi r} - (\frac{\Gamma}{2\pi r})^2]
\]</span> Then it will be possible to calculate Magnus force by integrating the pressure around cylinder <span class="math display">\[
F_{L}=\int_0^{2\pi}-p_{r=R} \cdot Rsin\theta d\theta
\]</span> The expression will be simplified as follows due to the odd power integral property of sine function <span class="math display">\[
F_L = -\frac{\rho \Gamma U}{\pi}\int_0^{2\pi}sin^2\theta d\theta
\]</span> Because that <span class="math display">\[
\int_0^{2\pi}sin^2\theta d\theta = \int_0^{2\pi} \frac{1-cos2\theta}{2} d\theta = \pi
\]</span> then Magnus force can be expressed in an elegant form <span class="math display">\[
F_L = -\rho \Gamma U
\]</span></p>
<h2 id="potential-flow-plots">Potential flow plots</h2>
<figure>
<img src="/2022/11/01/Potential-Flow-Analysis-Magnus-Effect//potential-flow-analysis-velocity-field-plot.png" alt><figcaption>Potential Flow Plots by Sean Zhou</figcaption>
</figure>
]]></content>
      <categories>
        <category>Mechanics</category>
      </categories>
      <tags>
        <tag>Aerodynamics</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博文图片显示问题[SOLVED]</title>
    <url>/2022/11/01/hexo%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98-SOLVED/</url>
    <content><![CDATA[<p>在使用hexo进行博客搭建的过程，发现使用Markdown语法的文档，无法正常加载上传的图片，例如</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Potential Flow Analysis</span>](<span class="link">./2022-11-1-Potential-Flow-Analysis-Magnus-Effect/potential-flow-analysis-velocity-field-plot.png</span>)</span><br></pre></td></tr></table></figure>
<p>通过观察构建信息，发现图片总是指向一个以 <code>/.io/</code> 开头的文件夹。经过在hexo官网的搜索，在评论区发现（😓）这个问题似乎是 <code>hexo-asset-image</code> 包的一个bug，只需要修改 <code>node_modules/hexo-asset-image/index.js</code> 的第24行，将其改为</p>
<figure class="highlight javascript"><figcaption><span>node_modules/hexo-asset-image/index.js</span></figcaption><table><tr><td class="code"><pre><span class="line"># <span class="title class_">JavaScript</span> </span><br><span class="line"><span class="keyword">var</span> endPos = link.<span class="property">length</span>;</span><br></pre></td></tr></table></figure>
<p>即可。</p>
]]></content>
      <categories>
        <category>Technical Issues</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言标准</title>
    <url>/2022/11/02/C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86/</url>
    <content><![CDATA[<h2 id="classic-c">Classic C</h2>
<p>最早的C语言标准是 Kernighan &amp; Ritchie 的 <em>The C Programming Language</em> ，也被称为 <em>K&amp;R C</em> 或 <em>Classic C</em> 。</p>
<h2 id="c89">C89</h2>
<p>最早的C语言国际标准则是 1989 年通过的 ANSI C 标准，这个版本的C语言被简称为 <em>C89</em> ；一年以后， ISO 也通过了本质上与 C89 相同的标准，即 1990 年的 ISO C ，又称为 <em>C90</em> 。<strong>所以 C89 和 C90 是同一个版本的C语言。</strong> 由于这个标准实际上是 ANSI 制定的，人们更习惯以 ANSI C 或 C89 来表示这个版本的C语言。</p>
<h2 id="c99">C99</h2>
<p>为了实现以下三个目标：</p>
<ul>
<li>Internationalization</li>
<li>Correction of deficiencies</li>
<li>Improvement of computational usefulness</li>
</ul>
<p>ANSI/ISO 标准委员会对 C89 进行了一定的更新。</p>
<h2 id="c11">C11</h2>
<p>C语言标准委员会经过观察，发现 C99 标准的执行存在一定的问题。某些 C99 标准对许多应用场景是无用的，另外C语言需要进一步适应当前多核处理的趋势，为此 C11 标准被推出。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu/Debian从源码安装Python记录</title>
    <url>/2022/11/02/Ubuntu-Debian%E4%BB%8E%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85Python%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>先安装编译所需的依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update </span><br><span class="line">sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>从官网下载源码包，例如 <code>Python-3.10.7.tgz</code>，随便放到哪个目录下，解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf Python-3.10.7.tgz</span><br></pre></td></tr></table></figure>
<p>进入解压所得的文件夹，先生成Makefile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --enable-optimizations</span><br></pre></td></tr></table></figure>
<p>经过一段时间的刷屏后，进行编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j $(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>
<p><code>$(nproc)</code> 表示自动从环境中获取当前处理器的最大核心数。</p>
<p>完成编译后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make altinstall</span><br></pre></td></tr></table></figure>
<p>这样会将Python自动安装到 <code>/usr/local/bin</code> 和 <code>/usr/local/lib</code>。这时输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3.10</span><br></pre></td></tr></table></figure>
<p>应该能够呼出Python Interactive Shell了，最后建立软链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/bin/python3.10 /usr/bin/python3</span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/bin/python3.10 /usr/bin/python</span><br></pre></td></tr></table></figure>
<p>这样就可以通过 <code>python3</code> 或者 <code>python</code> 来调用Python3.10了。</p>
]]></content>
      <categories>
        <category>Technical Issues</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Debian</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能导论-概论</title>
    <url>/2022/11/02/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA-%E6%A6%82%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="人工智能的发展历程">人工智能的发展历程</h2>
<h3 id="人工智能的起源">人工智能的起源</h3>
<h4 id="图灵机">图灵机</h4>
<p>1936年英国数学家艾伦图灵提出了一种计算模型——图灵机，这种计算模型能够模拟人类所能完成的任何计算过程。</p>
<h4 id="图灵测试">图灵测试</h4>
<p>1950年图灵提出了图灵测试，让人与机器对话，如果人无法判断对话方为机器还是真实的人，那么认为这个机器通过了图灵测试，说明机器是能够思考的。</p>
<h4 id="达特茅斯会议">达特茅斯会议</h4>
<p>1956年8月31日，由约翰麦卡锡等人发起，首次提出了Artificial Intelligence概念。达特茅斯会议被誉为人工智能的开端。</p>
<span id="more"></span>
<h4 id="感知器">感知器</h4>
<p>弗兰克罗森布拉特于1958年首次定义感知器Perceptron。</p>
<ul>
<li>二元线性分类器</li>
<li>最简单的前向神经网络</li>
<li>单层人工神经网络</li>
</ul>
<h4 id="美国政府取得的成果">美国政府取得的成果</h4>
<p>美国政府在上世纪对人工智能进行了大量资金的投入。</p>
<ul>
<li>1959年，亚瑟塞缪尔开发的西洋跳棋程序战胜了当时的西洋棋大师。亚瑟塞缪尔被称为机器学习之父。</li>
<li>1960年约翰麦卡锡开发了LISP语言。</li>
<li>1964年-1966年，MIT人工智能实验室编写了世界上第一个聊天程序ELIZA。</li>
<li>1966年-1972年，斯坦福研究院人工智能中心研制了第一款移动机器人Shakey。</li>
</ul>
<h4 id="人工智能的发展陷入停滞">人工智能的发展陷入停滞</h4>
<ul>
<li>1969年Minsky&amp;Papert出版了《Perceptrons》，证明了感知机对于异或等线性不可分问题不适用</li>
<li>当时人们希望用人工智能解决的主要是一些搜索问题，但是由于现实中的许多问题计算量太大，人工智能被认为无法解决这些问题</li>
<li>1973年，James Lighthill向英国政府提交了一份研究报告，认为人工智能的研究已经失败了</li>
</ul>
<h3 id="人工智能的发展">人工智能的发展</h3>
<h4 id="专家系统">专家系统</h4>
<h5 id="mycin系统">MYCIN系统</h5>
<p>1971年由斯坦福大学研制，是早期医疗诊断专家系统中比较成功的应用实例，用于医学诊断感染性疾病。</p>
<h5 id="cyc项目">Cyc项目</h5>
<p>1984年由Cycorp公司开发维护，致力于将各领域知识综合集成，实现知识推理。</p>
<h5 id="局限性">局限性</h5>
<ul>
<li>特殊情况下无法做出创造性的回应</li>
<li>知识库中的错误可能导致错误的决策</li>
<li>维护成本太高</li>
<li>人类专家解决方案可能不同，而且带有主观性</li>
</ul>
<h4 id="反向传播bp算法">反向传播BP算法</h4>
<p>1982年由鲁梅尔哈特和辛顿提出，这是一种可以训练的算法，具有以下优点</p>
<ul>
<li>系统性地解决了多层神经网络隐藏层连接权重的学习问题</li>
<li>数学上给出了完整的推导</li>
<li>解决了简单感知机不能解决异或的问题</li>
</ul>
<p>目前绝大多数的神经网络模型都采用了BP网络，可以说BP网络是人工智能前向神经网络的核心。</p>
<h4 id="卷积神经网络">卷积神经网络</h4>
<p>1989年，勒丘恩和本吉奥提出了卷积神经网络Convolutional Neural Network，简称CNN。</p>
<ul>
<li>卷积计算</li>
<li>深度结构</li>
<li>处理大型图像出色</li>
<li>需要确定的参数更少</li>
</ul>
<p>CNN是图像识别领域的核心算法之一，在学习数据充足时有着稳定高效的表现。</p>
<h4 id="支持向量机svm">支持向量机SVM</h4>
<p>1995年由科尔特斯和瓦普尼克提出，可以使用Kernel Trick进行非线性分类，将输入隐式映射到高维特征空间中，以统计学为基础，和神经网络有明显的差异。</p>
<p>支持向量机广泛应用于</p>
<ul>
<li>模式识别</li>
<li>分类</li>
<li>回归分析</li>
</ul>
<h4 id="长短期记忆lstm">长短期记忆LSTM</h4>
<p>1989年由科尔特斯和施密德湖贝提出，适用于处理预测时间序列中间隔和延迟长的时间，自然语言处理NLP是循环神经网络RNN的典型应用。</p>
<p>RNN适用于</p>
<ul>
<li>文本生成</li>
<li>机器翻译</li>
<li>语音识别</li>
<li>生成图像描述</li>
<li>视频标记</li>
</ul>
<h4 id="深蓝国际象棋">深蓝——国际象棋</h4>
<p>1997年，IBM深蓝计算机战胜了世界象棋冠军卡斯帕罗夫。这成为了人工智能发展史上的里程碑事件。</p>
<h3 id="人工智能的爆发">人工智能的爆发</h3>
<p>上世纪末，人工智能又因为算力不足而陷入了短暂的停滞期。21世纪以来，得益于算力和数据的大规模增长，人工智能又迎来了爆发。</p>
<h4 id="深度学习">深度学习</h4>
<p>2006年，杰弗里辛顿在《Science》上提出了深层网络训练中梯度消失的解决方案，开启了深度学习在学术界和工业界的热潮。</p>
<h4 id="华人在人工智能爆发期中的贡献">华人在人工智能爆发期中的贡献</h4>
<ul>
<li>李飞飞提出了IMAGENET</li>
<li>吴恩达创办了COURSERA，致力于推广人工智能教育</li>
</ul>
<h4 id="iphone-siri">iPhone Siri</h4>
<ul>
<li>自然语言输入</li>
<li>调用系统自带应用</li>
<li>提供对话式的应答</li>
</ul>
<h4 id="alexnet">AlexNet</h4>
<p>由辛顿提出，主要特性有</p>
<ul>
<li>ReLU激活函数</li>
<li>Dropout技术</li>
<li>GPU加速模型</li>
</ul>
<h4 id="生成对抗网络gan">生成对抗网络GAN</h4>
<p>由伊恩古德费勒提出，采用两个神经网络训练而成。</p>
<ul>
<li>生成器（生成网络）- 用于学习生成新的可用案例</li>
<li>判别器（判别网络）- 用于生成案例或实际案例的评判学习</li>
</ul>
<p>可以处理无监督学习，实现博弈对抗学习；可以为数据集生成新的案例。</p>
<h4 id="alphago---深度强化学习">AlphaGo - 深度强化学习</h4>
<p>从2016年战胜李世石开始，称霸围棋圈。</p>
<h4 id="总结">总结</h4>
<p>截至目前，人工智能领域最大的突破进展——深度学习。这主要是因为算力和数据量都得到了大幅度的提升。</p>
<h2 id="人工智能的挑战和机遇">人工智能的挑战和机遇</h2>
<h3 id="人工智能近期进展">人工智能近期进展</h3>
<p>2015年，微软研究院的图像分类错误率低于人眼识别的错误率，达到4.94%。</p>
<p>2017年，微软的语音识别系统可以与专业的速记员比肩，错误率降低至5.1%。</p>
<p>2017年，Google的Deep Mind发布了文本至语音的世界范围内最强的生成模型——WaveNet，可以根据文本生成听起来相对真实的人类声音。</p>
<p>2019年，SQuAD阅读挑战赛中，BERT模型的阅读理解能力已经超越了人类。</p>
<p>ResNet是CNN的一个重要突破，解决了深度学习中层数越多性能越差的深度网络退化问题。</p>
<p>Transformer (BERT) 尝试引入注意力机制，加全连接层，进行序列建模，适用于并行化计算，在精度和性能上都优于RNN模型。Transformer从NLP领域走进了机器视觉的领域。</p>
<p>AlphaZero是Deep Mind于2018年发布的模型，通杀围棋、国际象棋和日本将棋，训练不到2天直接秒了AlphaGo。</p>
<p>2020年Deep Mind发布了AlphaFold2，在根据基因序列预测蛋白质结构的CASP比赛中位列第一。</p>
<h3 id="人工智能的挑战">人工智能的挑战</h3>
<h4 id="挑战1-数据标注">挑战1 数据标注</h4>
<p>数据标注极其枯燥耗时，但却是人工智能的基础。“有多少智能就需要多少人工”</p>
<h4 id="挑战2-硬件配置">挑战2 硬件配置</h4>
<p>一开始，人们都是用CPU进行机器学习的，但是随着算法越来越复杂，CPU已经无法满足算法的计算需求了。人们发现原本用于图像渲染的GPU，有着完美支持矢量运算的SIMD架构，进行机器学习的效率非常高。</p>
<p>FPGA也非常适用于机器学习。</p>
<h4 id="挑战3-软件架构">挑战3 软件架构</h4>
<p>环境安装、部署、测试、迭代改进、性能调优的工作非常繁琐复杂，因为会涉及到多个工具，甚至多个平台。为了加速机器学习开发，学界和业界开发了许多基础设施，也称为机器学习框架。</p>
<h4 id="挑战4-参数调节">挑战4 参数调节</h4>
<p>参数调节的目的就是搜索超参数的最佳配置，而超参数的搜索本质上是一个受计算能力和时间约束的迭代过程。</p>
<h4 id="挑战5-未知脆弱性">挑战5 未知脆弱性</h4>
<h4 id="挑战6-强人工智能">挑战6 强人工智能</h4>
<p>缺乏完善的基础理论。仍然停留在给定大量的训练数据，学习某些特定的任务。</p>
<p>深度学习是机器学习的一部分，机器学习是人工智能的一部分。</p>
<h3 id="人工智能的机遇">人工智能的机遇</h3>
<h3 id="拥抱人工智能">拥抱人工智能</h3>
<p>美国国家科学基金会将投入2.2亿美元建立NSF国家人工智能研究所。聚焦AI七大领域</p>
<ul>
<li>人机交互与协作</li>
<li>AI驱动的高级优化方法</li>
<li>AI驱动的信息基础设施</li>
<li>计算机网络系统AI技术</li>
<li>动态系统AI技术</li>
<li>AI增强学习</li>
<li>AI驱动的农业和食品创新</li>
</ul>
<h3 id="对ai的政策">对AI的政策</h3>
<h4 id="国家层面">国家层面</h4>
<ul>
<li>鼓励</li>
<li>扶持</li>
<li>推动</li>
</ul>
<p>国务院提出，2025年要让AI成为产业升级和经济转型的主要驱动力，2030年中国要成为世界主要AI创新中心。</p>
<h4 id="上海市层面">上海市层面</h4>
<p><strong>上海的优势</strong> 数据资源丰富、应用领域广泛、产业门类齐全</p>
<p>全面实施智能上海行动</p>
<ul>
<li>应用驱动</li>
<li>科技引领</li>
<li>产业协同</li>
<li>生态培育</li>
<li>人才集聚 推动人工智能成为上海建设“四个中心”和具有全球影响力的科技创新中心的新引擎，为上海建设卓越的全球城市注入新动能。</li>
</ul>
<h4 id="同济大学层面">同济大学层面</h4>
<p>同济大学成立了上海自主智能无人系统科学中心，主要围绕</p>
<ul>
<li>自主与感知</li>
<li>智能与涌现</li>
<li>群智与协同 三大科学问题</li>
</ul>
<p>研究方向包括：</p>
<ul>
<li>超材料感知</li>
<li>多尺度融合</li>
<li>自主与交互</li>
<li>多体与协同</li>
</ul>
<p>力争在自主智能无人系统领域取得一系列科研成果，推动上海成为人工智能创新策源高地、应用示范高地、制度供给高地和人才集聚高地。</p>
<h2 id="人工智能的竞技场自动驾驶">人工智能的竞技场——自动驾驶</h2>
<h3 id="自动驾驶技术的背景">自动驾驶技术的背景</h3>
<p>每年全球约有130万人死于道路交通事故，约90%的事故由驾驶员因素导致。2014年SAE发布了驾驶自动化分级L0-L5。我国的驾驶自动化分级参照了SAE的标准，结合中国国情进行相应的调整。</p>
<p>2016年，Google的自动驾驶部门成为WAYMO。2018年底，Waymo自动驾驶服务上线，其中一部分已经取消了安全员。</p>
<p>辅助驾驶方面，特斯拉的AutoPilot辅助驾驶里程突破了20亿英里。</p>
<h4 id="国外自动驾驶的尝试">国外自动驾驶的尝试</h4>
<h5 id="早期的半自动驾驶汽车">早期的半自动驾驶汽车</h5>
<p>1977年，日本筑波大学创造了第一辆半自动驾驶汽车。这辆车利用机器视觉，跟踪道路上的白色车道线。</p>
<p>1984年，国防高级研究计划局出现了DARPA自主地面车辆Autonomous Land Vehicle项目。此时已经使用了激光雷达、机器视觉技术。</p>
<h5 id="darpa无人驾驶汽车挑战赛">DARPA无人驾驶汽车挑战赛</h5>
<p>DARPA Grand Challenge沙漠挑战赛。2004年，没有一支参赛队伍完成比赛；2005年，Stanford大学的Standley车队获得冠军，这支车队也就是Sebastian Thrun的队伍。2007年，DARPA举办了城市挑战赛Urban Challenge，卡内基梅隆大学的Boss车队获得冠军。</p>
<h4 id="国内自动驾驶">国内自动驾驶</h4>
<p>2003年，我国自主研发的无人驾驶汽车在高速路上进行了第一次测试；2009年，中国开始举办智能车未来挑战大赛。</p>
<h3 id="自动驾驶中的ai技术">自动驾驶中的AI技术</h3>
<h4 id="自动驾驶的内涵及关键技术">自动驾驶的内涵及关键技术</h4>
<p>人类驾驶员：观察道路、交通、环境、车辆状态，经过大脑定位、决策、规划路径，操作方向盘、制动踏板、油门踏板、挡位，实现对车辆的控制。</p>
<p>通过算法，来进行感知、决策、规划、控制，部分或替代人类驾驶员，就是自动驾驶。</p>
<p>对了保证自动驾驶的安全，需要经过严格的测试验证和产品准入认证。</p>
<h5 id="关键技术总结">关键技术总结</h5>
<ul>
<li>感知</li>
<li>定位</li>
<li>决策</li>
<li>规划</li>
<li>控制</li>
<li>测试验证</li>
</ul>
<h4 id="算法架构">算法架构</h4>
<h5 id="分层递进式">分层递进式</h5>
<p>将算法分为</p>
<ul>
<li>环境感知</li>
<li>融合定位</li>
<li>推理决策</li>
<li>轨迹规划</li>
<li>运动控制</li>
<li>测试评价</li>
</ul>
<h5 id="端到端式">端到端式</h5>
<p>利用一个训练好的神经网络，隐藏中间的过程，从观察环境到输出控制指令的过程全部封装，是一个黑盒模型。</p>
<p>需要数据标注、超参数调整等一系列复杂的训练过程。</p>
<h4 id="感知融合">感知融合</h4>
<ul>
<li>端到端学习的激光点云物体检测</li>
<li>立体匹配网络的多传感器感知融合</li>
<li>卷积编码-解码模型的视觉感知</li>
</ul>
<p>感知是自动驾驶的基础。深度学习在感知领域取得了巨大成功，助力自动驾驶的发展。</p>
<h4 id="定位">定位</h4>
<ul>
<li>无监督深度学习的单目视觉里程计</li>
<li>深度卷积神经网络的匹配定位</li>
</ul>
<p>基于深度学习的SLAM技术，使得智能汽车精确知道自己所在的位置。</p>
<h4 id="决策">决策</h4>
<ul>
<li>深度学习的环形路口决策</li>
<li>强化学习的安全可行换道决策方法</li>
</ul>
<p>可信、可解释、可推理的AI技术将赋能自动驾驶汽车的智能决策。</p>
<h4 id="规划控制">规划控制</h4>
<ul>
<li>无模型学习的自动驾驶控制</li>
<li>模仿学习自动驾驶车辆视觉轨迹规划</li>
</ul>
<p>学习算法、数据机理混合算法，提供解决自动驾驶规划控制问题的新思路。</p>
<h4 id="端到端学习算法">端到端学习算法</h4>
<ul>
<li>卷积神经网络端到端学习算法</li>
<li>直接感知信息学习启发的自动驾驶</li>
</ul>
<p>发挥人工智能的学习潜能，聚焦实现完全自动驾驶的技术突破。</p>
<h4 id="测试验证">测试验证</h4>
<ul>
<li>深度学习+机器学习，创建真实的交通环境感知</li>
<li>多种测试工具协同</li>
</ul>
<p>应用AI技术，可实现复杂交通场景自动重构，加速测试。</p>
<h3 id="自动驾驶对ai的挑战">自动驾驶对AI的挑战</h3>
<h4 id="驾驶复杂性">1 驾驶复杂性</h4>
<ul>
<li>驾驶环境复杂（例如没有信号灯的交通环岛）</li>
<li>驾驶任务困难（例如飘移）</li>
</ul>
<p>自动驾驶技术的发展就是要在不同场景中去探索适配这些场景，从而增强自动驾驶系统的稳定性、可靠性。</p>
<h4 id="驾驶拟人性">2 驾驶拟人性</h4>
<p>机器人无法运动自如。</p>
<h4 id="驾驶可信性">3 驾驶可信性</h4>
<p>深度学习缺乏可解释性，AI在面对道德困境时无法做出判断，在伦理道德上有难以解决的问题。</p>
<h4 id="驾驶安全性">4 驾驶安全性</h4>
<p>如何判断自动驾驶汽车遭受网络攻击时也足够安全？</p>
<h4 id="驾驶智能性">5 驾驶智能性</h4>
<p>自动驾驶汽车足够智能吗？</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>卡尔曼滤波器基础</title>
    <url>/2022/11/02/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2%E5%99%A8%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="引入">引入</h2>
<p>卡尔曼滤波器是一种利用观测数据来修正先验数据的滤波器，适用于<em>线性高斯系统</em>。</p>
<p>以直线运动的车辆为例。记<span class="math inline">\(t\)</span>时刻的车辆位置为<span class="math inline">\(p_t\)</span>，速度为<span class="math inline">\(v_t\)</span>，加速度为<span class="math inline">\(u_t\)</span>，那么在纵向应有车辆运动学模型</p>
<p><span class="math display">\[
\left \{ \begin{aligned}
&amp; p_t = p_{t-1} + \Delta t \ v_{t-1} + \frac{(\Delta t)^2}{2} u_{t-1}  \\
&amp; v_t = v_{t-1} + \Delta t \ u_{t-1}
\end{aligned}
\right.
\]</span></p>
<p>令</p>
<p><span class="math display">\[
\boldsymbol x_t = \begin{pmatrix} p_t \\ v_t \end{pmatrix}
\]</span></p>
<p>有</p>
<p><span class="math display">\[
\boldsymbol x_t = \begin{pmatrix} 1 &amp; \Delta t \\ 0 &amp; 1 \end{pmatrix}\boldsymbol x_{t-1} + \begin{pmatrix} \displaystyle \frac{(\Delta t)^2}{2} \\ \Delta t \end{pmatrix}u_{t-1} \tag{1}
\]</span></p>
<p>当然，这样的运动学模型是非常简单的。一方面，只考虑了纵向的运动，而且假设加速度的测量是noise-free的；另一方面，由于采样数据是离散的，在<span class="math inline">\(\Delta t\)</span>时间内的加速度变化我们不得而知。因此，利用这样的运动学模型对车辆的运动状态进行估计，误差必然会随着时间的推移而增大。</p>
<span id="more"></span>
<p>既然估计得到的运动状态并不是精确的，那么我们需要修正一下式(1)中的符号。用<span class="math inline">\(\hat{\boldsymbol{x}}_t^-\)</span>表示先验估计状态，用<span class="math inline">\(\hat{\boldsymbol{x}}_t\)</span>表示最优估计状态，没有^符号的视为真值。需要注意的是，在本例中我们将加速度输入视作真值。那么式(1)可以改写为</p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t^- = \begin{pmatrix} 1 &amp; \Delta t \\ 0 &amp; 1 \end{pmatrix}\hat{\boldsymbol{x}}_{t-1} + \begin{pmatrix} \displaystyle \frac{(\Delta t)^2}{2} \\ \Delta t \end{pmatrix}u_{t-1} \tag{2}
\]</span></p>
<p>假设我们为这辆测试车安装了GNSS导航系统，可以利用RTK定位数据进行车辆位置的观测。不过GNSS只能观测车辆的位置，而不能观测车辆的速度，所以我们可以将观测到的状态量记为<span class="math inline">\(\boldsymbol{z}_t = \begin{pmatrix} z_p \\ z_v \end{pmatrix}\)</span>，将观测矩阵记为<span class="math inline">\(H=\begin{pmatrix} 1 &amp; 0 \end{pmatrix}\)</span>然后写出以下观测方程</p>
<p><span class="math display">\[
\boldsymbol{z}_t = H\boldsymbol{x}_t \tag{3}
\]</span></p>
<p>很显然，无论是先验估计得到的值还是观测得到的值都与真值有一定偏离，那么如何用观测到的状态量<span class="math inline">\(z_t\)</span>修正先验估计状态呢？下面就介绍一下卡尔曼滤波器。</p>
<h2 id="卡尔曼滤波器---估计部分">卡尔曼滤波器 - 估计部分</h2>
<p>卡尔曼滤波器总体上可以分为两个部分，估计部分与更新部分。先来讲估计部分。式(2)是卡尔曼滤波器估计部分的主体，不过我们需要考虑估计中可能存在的噪声，所以将式(2)修正为</p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t^- = \begin{pmatrix} 1 &amp; \Delta t \\ 0 &amp; 1 \end{pmatrix}\hat{\boldsymbol{x}}_{t-1} + \begin{pmatrix} \displaystyle \frac{(\Delta t)^2}{2} \\ \Delta t \end{pmatrix}u_{t-1} + w_t
\]</span></p>
<p>在卡尔曼滤波器的假设中，过程噪声服从高斯分布，即<span class="math inline">\(w_t \in \mathcal N (0, Q)\)</span>，其中<span class="math inline">\(Q\)</span>为过程噪声的协方差矩阵。</p>
<p>我们将<span class="math inline">\(\begin{pmatrix} 1 &amp; \Delta t \\ 0 &amp; 1 \end{pmatrix}\)</span>记作<span class="math inline">\(F_t\)</span>，将<span class="math inline">\(\begin{pmatrix} \displaystyle \frac{(\Delta t)^2}{2} \\ \Delta t \end{pmatrix}\)</span>记作<span class="math inline">\(B_t\)</span>，将上述公式一般化为</p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t^- = F_t \hat{\boldsymbol{x}}_{t-1} + B_t u_{t-1} + w_t \tag{4}
\]</span></p>
<p>其中<span class="math inline">\(F_t\)</span>被称为状态转移矩阵，<span class="math inline">\(B_t\)</span>被称为控制矩阵，<span class="math inline">\(u_t\)</span>被称为控制输入量。</p>
<p>估计部分的另一部分是先验估计状态的协方差矩阵<span class="math inline">\(P_t^-\)</span>，先给出公式</p>
<p><span class="math display">\[
P_t^- = FP_{t-1}F^T + Q \tag{5}
\]</span></p>
<p>其中，<span class="math inline">\(P_{t-1}\)</span>是最优估计状态<span class="math inline">\(\hat{\boldsymbol{x}}_{t-1}\)</span>的协方差矩阵。那么这个先验估计状态的协方差矩阵是怎么来的呢？首先，要引入一条公式</p>
<p><span class="math display">\[
cov(Ax, Ax) = Acov(x, x)A^T
\]</span></p>
<p>很显然，只需要将式(4)代入，即可得到</p>
<p><span class="math display">\[
\begin{aligned}
cov(\hat{\boldsymbol{x}}_t^-, \hat{\boldsymbol{x}}_t^-) &amp;= cov(F_t \hat{\boldsymbol{x}}_{t-1} + B_t u_{t-1} + w_t, F_t \hat{\boldsymbol{x}}_{t-1} + B_t u_{t-1} + w_t) \\
&amp;= cov(F_t \hat{\boldsymbol{x}}_{t-1}+w_t, F_t \hat{\boldsymbol{x}}_{t-1}+w_t) \\
&amp;= cov(F_t \hat{\boldsymbol{x}}_{t-1}, F_t \hat{\boldsymbol{x}}_{t-1}) + cov(w_t, w_t) \\
&amp;= F_t cov(\hat{\boldsymbol{x}}_{t-1}) F_t^T + Q \\
&amp;= F_t P_{t-1} F_t^T + Q
\end{aligned}
\]</span></p>
<p>请注意，这里之所以能够将<span class="math inline">\(cov(F_t \hat{\boldsymbol{x}}_{t-1} + w_t, F_t \hat{\boldsymbol{x}}_{t-1} + w_t)\)</span>拆分为<span class="math inline">\(cov(F_t \hat{\boldsymbol{x}}_{t-1}, F_t \hat{\boldsymbol{x}}_{t-1}) + cov(w_t, w_t)\)</span>是因为卡尔曼滤波器作用的对象是线性高斯系统；另外，控制量视为真值，不考虑其协方差。</p>
<p>总结一下，卡尔曼滤波器的估计部分，就是</p>
<ol type="1">
<li>t时刻先验估计状态 = 状态转移矩阵 X t-1时刻最优估计状态 + 控制矩阵 X 控制输入量 + 过程噪声</li>
<li>t时刻先验估计状态的协方差矩阵 = 状态转移矩阵 X t-1时刻最优估计状态的协方差矩阵 X 状态转移矩阵的转置 + 过程噪声的协方差矩阵</li>
</ol>
<h2 id="卡尔曼滤波器---更新部分">卡尔曼滤波器 - 更新部分</h2>
<p>下面讲卡尔曼滤波器的第二部分。先看一下式(3)，发现观测值和真值之间只有一个转换矩阵，没有考虑观测时可能存在的噪声，为此我们引入观测噪声<span class="math inline">\(v_t\)</span>，修正式(3)</p>
<p><span class="math display">\[
z_t = H \boldsymbol{x}_t + v_t \tag{6}
\]</span></p>
<p>假定观测噪声<span class="math inline">\(v_t\)</span>也服从高斯分布，即<span class="math inline">\(v_t \in \mathcal N(0, R)\)</span>，其中<span class="math inline">\(R\)</span>为观测噪声的协方差矩阵。</p>
<p>说到底，先验估计值和观测值都是存在误差的，卡尔曼滤波器实质上就是对先验估计值和观测值进行加权，从而得到一个最接近真值的最优估计值。那么这个加权值怎么来的，就是卡尔曼滤波器的重点。在卡尔曼滤波器的定义中，这个加权值称为<strong>卡尔曼增益</strong>，记为<span class="math inline">\(K_t\)</span>。先不管这个加权值怎么来的，假定我们已知卡尔曼增益<span class="math inline">\(K_t\)</span>，那么应当能够写出最优估计值的表达式</p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t = \hat{\boldsymbol{x}}_t^- + K_t(z_t - H\hat{\boldsymbol{x}}_t^-) \tag{7}
\]</span></p>
<p>式(7)是容易理解的，其实就是对观测值和经过转换的先验估计值作差，然后乘上卡尔曼增益，再加到原来的先验估计值上去。观测值和经过转换的先验估计值之差，其实就是观测值和先验估计值之间的差值，经过卡尔曼增益缩放之后，体现为观测值对先验估计值的影响，本质上就是一种加权操作。卡尔曼增益越大，那么观测值所占的权重就越大，体现为我们更信任观测值；反之，观测值占的权重越小，体现为我们更信任先验估计。</p>
<p>下面推导一下卡尔曼增益的表达式。在推导之前，先要说明卡尔曼增益的目标，是在经过卡尔曼增益的加权之后，使得真值与最优估计值之间的误差最小，即求<span class="math inline">\(argmin\{\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t\}\)</span>。这里我们假定所谓的<span class="math inline">\(e_t = \boldsymbol{x}_t - \hat{\boldsymbol{x}}_t\)</span>满足<span class="math inline">\(e_t \in \mathcal N(0, P_t)\)</span>，那么为了使得误差最小，其实就是要求协方差矩阵<span class="math inline">\(P_t\)</span>的trace最小。下面进行推导。</p>
<p><span class="math display">\[
\begin{aligned}
e_t &amp; = \boldsymbol{x}_t - \hat{\boldsymbol{x}}_t \\
&amp;=\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^- - K_t(z_t - H\hat{\boldsymbol{x}}_t^-) \\
&amp;= \boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^--K_t(H\boldsymbol{x}_t +v_t - H\hat{\boldsymbol{x}}_t^-) \\
&amp;= (I - K_tH)(\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^-) - K_t v_t \\
\end{aligned}
\]</span></p>
<p>记<span class="math inline">\(\hat{e}_t=\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^-\)</span>，则可将上式简化为</p>
<p><span class="math display">\[
e_t = (I-K_tH)\hat{e}_t - K_t v_t \tag{8}
\]</span></p>
<p>这里先引入一下协方差的计算公式</p>
<p><span class="math display">\[
cov(X, Y) = E[XY] - E[X]E[Y]
\]</span></p>
<p>那么对于<span class="math inline">\(e_t\)</span>来说，<span class="math inline">\(P_t=cov(e_t, e_t) = E(e_te_t^T)-E(e_t)^2=E(e_te_t^T)\)</span>。下面对协方差矩阵<span class="math inline">\(P_t\)</span>进行推演</p>
<p><span class="math display">\[
\begin{aligned}
P_t &amp;= E\{[(I - K_tH)\hat{e}_t-K_tv_t][\hat{e}_t^T(I-H^TK_t^T)-v_t^TK_t^T]\} \\
&amp;= E\{(I-K_tH)\hat{e}_t\hat{e}_t^T(I-H^TK_t^T)-(I-K_tH)\hat{e}_tv_t^TK_t^T-K_tv_t\hat{e}_t^T(I-H^TK_t^T)+K_tv_tv_t^TK_t^T\} \\
&amp;= E\{(I-K_tH)\hat{e}_t\hat{e}_t^T(I-H^TK_t^T) + K_tv_tv_t^TK_t^T\} \\
&amp; - (I-K_tH)E\{\hat{e}_t\}E\{v_t^T\}K_t^T - K_tE\{v_t\}E\{\hat{e}^T_t\}(I-H^TK_t^T)
\end{aligned}
\]</span></p>
<p>由于<span class="math inline">\(v_t \in \mathcal N (0, R)\)</span>，所以<span class="math inline">\(E\{v_t\}=0\)</span>，那么上式可以简化为</p>
<p><span class="math display">\[
\begin{aligned}
P_t &amp;=(I-K_tH)E\{\hat{e}_t\hat{e}_t^T\}(I-H^TK_t^T)+K_tE\{v_t v_t^T\}K_t^T \\
&amp;=(I - K_tH)E\{\hat{e}_t\hat{e}_t^T\}(I-H^TK_t^T)+K_tRK_t^T
\end{aligned}
\]</span></p>
<p>记<span class="math inline">\(\hat{P}_t=E(\hat{e}_t\hat{e}_t^T)\)</span>，则有</p>
<p><span class="math display">\[
P_t = (I-K_tH)\hat{P}_t(I-H^TK_t^T)+K_tRK_t^T \tag{9}
\]</span></p>
<p>接下来，我们所要做的就是最小化<span class="math inline">\(P_t\)</span>，即取<span class="math inline">\(\displaystyle\frac{d\ tr(P_t)}{dK_t}=0\)</span>，求<span class="math inline">\(K_t\)</span>。在这之前，先引入矩阵求导的两条公式。</p>
<p><span class="math display">\[
\frac{d\ tr(AB)}{dA}=B^T \tag{10}
\]</span></p>
<p><span class="math display">\[
\frac{d\ tr(ABA^T)}{dA} = 2AB \tag{11}
\]</span></p>
<p>利用式(10)和式(11)求<span class="math inline">\(\displaystyle\frac{d\ tr(P_t)}{dK_t}\)</span>，有下式</p>
<p><span class="math display">\[
\begin{aligned}
\frac{d\ tr(P_t)}{dK_t} &amp;= \frac{d \ tr(\hat{P}_t-K_tH\hat{P}_t-\hat{P}_tH^TK_t^T+K_tH\hat{P}_tH^TK_t^T+K_tRK_t^T)}{dK_t} \\
&amp;= -\hat{P}_t^TH^T-\hat{P}_t H^T+2K_tH\hat{P}_tH^T + 2K_tR \\
&amp;= -2 \hat{P}_tH^T+2K_tH\hat{P}_tH^T + 2K_tR\\
&amp;=0
\end{aligned}
\]</span></p>
<p>移项后可得</p>
<p><span class="math display">\[
K_t = \frac{\hat{P}_tH^T}{H\hat{P}_tH^T+R}
\]</span></p>
<p>由于真值是确定值，其方差为0，因此<span class="math inline">\(\hat{P}_t=var(\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^-)=var(-\hat{\boldsymbol{x}}_t^-)=var(\hat{\boldsymbol{x}}_t^-)=Q\)</span>，所以上式可改写为</p>
<p><span class="math display">\[
K_t = \frac{QH^T}{HQH^T+R} \tag{12}
\]</span></p>
<p>卡尔曼增益的推导至此结束。</p>
<p>很显然，<span class="math inline">\(Q\)</span>表征着先验估计的不确定性，<span class="math inline">\(R\)</span>表征着测量的不确定性。<span class="math inline">\(Q\)</span>越大，<span class="math inline">\(K_t\)</span>越大，观测值所占的比重越大，因为先验估计越不确定，就越相信观测值；相反，<span class="math inline">\(R\)</span>越大，<span class="math inline">\(K_t\)</span>越小，观测值所占的比重越小，因为观测值越不确定，就越不相信观测值。</p>
<p>与估计部分相同的，我们需要给出最优估计值的协方差矩阵<span class="math inline">\(P_t\)</span>。请注意这里的<span class="math inline">\(P_t\)</span>并不是<span class="math inline">\(e_t\)</span>的协方差矩阵，而是<span class="math inline">\(\hat{\boldsymbol{x}}_t\)</span>的协方差矩阵。</p>
<p><span class="math display">\[
\begin{aligned}
P_t &amp;= var(\hat{\boldsymbol{x}}_t)\\
&amp;= var(\hat{\boldsymbol{x}}_t^- + K_t(z_t - H\hat{\boldsymbol{x}}_t^-)) \\
&amp;= var(\hat{\boldsymbol{x}}_t^-+K_t(H\boldsymbol{x}_t+v_t - H\hat{\boldsymbol{x}}_t^-))\\
&amp;= var((I-K_tH)\hat{\boldsymbol{x}}_t^- + K_tH\boldsymbol{x}_t+K_tv_t) \\
&amp;= (I-K_tH)var(\hat{\boldsymbol{x}}_t^-)+var(K_tv_t) \\
&amp;= (I-K_tH)P_t^-+K_tR
\end{aligned}
\]</span></p>
<p>这里怎么推出来多了一项<span class="math inline">\(K_tR\)</span>呢？这有点搞，需要研究一下。</p>
<h2 id="卡尔曼滤波器总结">卡尔曼滤波器总结</h2>
<h3 id="估计部分两条式子">估计部分两条式子</h3>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t^- = F_t \hat{\boldsymbol{x}}_{t-1}+B_t u_{t-1}+w_{t-1} \tag{1}
\]</span></p>
<p><span class="math display">\[
P_t^- = F_t P_{t-1} F_t^T + Q_t \tag{2}
\]</span></p>
<h3 id="更新部分三条式子">更新部分三条式子</h3>
<p><span class="math display">\[
K_t = \frac{P_t^-H^T}{HP_t^-H^T + R_t} \tag{3}
\]</span></p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t = \hat{\boldsymbol{x}}_t^- + K_t(z_t - H\hat{\boldsymbol{x}}_t^-) \tag{4}
\]</span></p>
<p><span class="math display">\[
P_t = (I-K_tH)P_t^- \tag{5}
\]</span></p>
]]></content>
      <categories>
        <category>Control Engineering</category>
      </categories>
      <tags>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析笔记-第二章 线性方程组的直接解法</title>
    <url>/2022/11/02/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E7%9B%B4%E6%8E%A5%E8%A7%A3%E6%B3%95/</url>
    <content><![CDATA[<h2 id="本章概述">本章概述</h2>
<p>我们发现，在科学计算中有非常多的问题到最后都会转变为对大规模线性方程组求解的问题，因此对线性方程组进行高效求解，是科学计算中非常重要的一个需求。</p>
<p>在本章的学习中，我们先了解一下线性方程组最基本的求解方法，叫做<strong>直接法</strong>求解线性方程组。在不考虑浮点误差的情况下，直接法求解可以得到线性方程组的精确解（在方程组有解的前提下），而且解法也很简单普适。但缺点是计算量比较大，对于大规模线性方程组的求解，我们一般不会利用直接法进行求解，而是会选择使用<strong>迭代法</strong>，通过逐次逼近的方式得到目标线性方程组的近似解。迭代法的具体内容会在后续的章节中涉及。</p>
<span id="more"></span>
<h2 id="高斯消去法">2.1 高斯消去法</h2>
<p>线性方程组的直接法，也叫做<strong>高斯消去法</strong>。对于一个<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>，若有线性方程组<span class="math inline">\(Ax=b\)</span>，可以使用高斯消去法对方程进行直接的求解，如下</p>
<h3 id="高斯消去法求解线性方程组">2.1.1 高斯消去法求解线性方程组</h3>
<p>高斯消去法求解线性方程组分为<strong>消去过程</strong>和<strong>回代过程</strong>。消去过程其实是将<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>转换为上三角矩阵的过程，回代过程则是利用转换好的上三角矩阵来求解<span class="math inline">\(x\)</span>的过程。</p>
<h4 id="消去过程">消去过程</h4>
<p>消去的目标：将目标列对角线以下元素全部消去为0。</p>
<p>消去的方法也很简单，对于<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>，假如我们想要将第一列除<span class="math inline">\(a_{11}\)</span>以外的元素全部消去为0，那么只需要将第一行元素乘上<span class="math inline">\(\displaystyle -\frac{a_{i1}}{a_{11}}\)</span>，然后加到第<span class="math inline">\(i\)</span>行上，那么第<span class="math inline">\(i\)</span>行的行首元素<span class="math inline">\(a_{i1}\)</span>就恰好被消去了。接下来，我们再对从<span class="math inline">\(a_{22}\)</span>开始的<span class="math inline">\(n-1\)</span>阶子阵进行同样的操作，经过有限次初等变换之后，就能够将一个<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>转换为一个上三角矩阵<span class="math inline">\(A^{(n)}\)</span>。</p>
<h4 id="回代过程">回代过程</h4>
<p>得到上三角矩阵<span class="math inline">\(A^{(n)}\)</span>后，从<span class="math inline">\(a^{(n)}_{nn}\)</span>开始，可以根据<span class="math inline">\(a^{(n)}_{nn}x_n=b_n\)</span>计算得到<span class="math inline">\(x_n\)</span>，然后从下往上，利用<span class="math inline">\(x_n, b_{n-1}, b_n, a^{n-1}_{(n-1)(n-1)}\)</span>计算得到<span class="math inline">\(x_{n-1}\)</span>，以此类推，最后计算得到整个向量<span class="math inline">\(x\)</span>。</p>
<h4 id="缺陷">缺陷</h4>
<ol type="1">
<li>计算量大。整个高斯消去法的计算量达到<span class="math inline">\(O(n^3)\)</span>，对于大规模线性方程组来说这个计算量是不可接受的。</li>
<li>行首元素不能是0，否则高斯消去法会异常中止；当然，我们可以通过交换行来处理，但也有可能出现当前列可用行首元素全为0的情况。</li>
<li>在考虑浮点误差的时候，如果选中行的行首元素比较小，那么可能会出现转换系数太大的情况，导致选中行乘上转换系数之后，某些元素变得太大，然后因为浮点数的“大数吃小数”现象而引发比较大的计算误差。</li>
</ol>
<h3 id="高斯消去法的选主元策略">2.1.2 高斯消去法的选主元策略</h3>
<p>行首元素，简称为主元，是可以通过交换行来进行主元的选取的。选主元策略可以有效解决上述缺陷中的第三点问题。在进行消去之前，我们将当前列中行首元素最大的行交换上来，以这一行的行首元素作为主元，那么转换系数必然小于等于1，这样可以避免当前行乘以转换系数之后出现元素太大的现象。这种修正之后的算法称为<strong>列主元素高斯消去法</strong>。</p>
<p>当然，假如原来的矩阵中元素的大小分布本来就差距极大，那么这总会导致引入浮点误差的时候，最后计算的精度比较差，但这不是高斯消去法本身的缺陷，而是浮点计算的缺陷。选主元策略能够最大程度上减小浮点误差对结果的影响，但并不能完全规避浮点误差。</p>
<h2 id="矩阵的三角分解">2.2 矩阵的三角分解</h2>
<h3 id="上三角阵与下三角阵">2.2.1 上三角阵与下三角阵</h3>
<p>前面提到，高斯消去法的消去过程本质上就是通过矩阵的初等变换，将一个任意的<span class="math inline">\(n\)</span>阶方阵转换为一个上三角阵。线性代数中，我们也学过，对一个矩阵进行某种类型的初等变换，等价于给这个矩阵乘上一个初等矩阵。所以，将<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>转换为上三角阵的过程，可以用矩阵乘法来描述。</p>
<p>需要进一步补充的是，消去过程中出现的初等矩阵，其实都是对角阵加上第<span class="math inline">\(i\)</span>列的转换系数构成的下三角矩阵。所以，上述过程可以描述为<span class="math inline">\(A\)</span>与<span class="math inline">\(n-1\)</span>个下三角矩阵做矩阵乘法的过程 <span class="math display">\[
L_{n-1}...L_2L_1A
\]</span> 最后的结果是一个上三角矩阵，我们可以将其记作<span class="math inline">\(U\)</span>。</p>
<p>需要说明的是，初等变换矩阵总是可逆的，所以矩阵<span class="math inline">\(A\)</span>其实可以写作 <span class="math display">\[
A=L_1^{-1}L_2^{-1}...L_{n-1}^{-1}U
\]</span> 令<span class="math inline">\(L=L_1^{-1}L_2^{-1}...L_{n-1}^{-1}\)</span>，有 <span class="math display">\[
A=LU
\]</span> 需要注意的是，下三角矩阵的逆仍然是下三角矩阵，两个下三角阵的乘积同样也仍然是下三角矩阵，所以<span class="math inline">\(L\)</span>也是一个下三角矩阵。另外，下三角阵<span class="math inline">\(L\)</span>的对角线元素全为1，所以<span class="math inline">\(L\)</span>还是一个单位下三角阵。</p>
<p>前面的下三角阵<span class="math inline">\(L_1\)</span>等，可以写为 <span class="math display">\[
L_i=
\begin{pmatrix}
1 &amp; &amp; &amp; &amp; &amp; &amp; &amp;  \\
&amp; 1 &amp; &amp; &amp; &amp; &amp; &amp; \\
&amp; &amp; ... &amp; &amp; &amp; &amp; \\
&amp; &amp; &amp; 1 \\
&amp; &amp; &amp; m_{i+1,i}&amp; 1 \\
&amp; &amp; &amp; m_{i+2,i} &amp; &amp; 1 \\
&amp; &amp; &amp; ... &amp; \\
&amp; &amp; &amp; m_{n,i} &amp; &amp; ... &amp; &amp; &amp; 1
\end{pmatrix}
\]</span> 可以证明，<span class="math inline">\(L_i^{-1}\)</span>为 <span class="math display">\[
L_i^{-1}=
\begin{pmatrix}
1 &amp; &amp; &amp; &amp; &amp; &amp; &amp;  \\
&amp; 1 &amp; &amp; &amp; &amp; &amp; &amp; \\
&amp; &amp; ... &amp; &amp; &amp; &amp; \\
&amp; &amp; &amp; 1 \\
&amp; &amp; &amp; -m_{i+1,i}&amp; 1 \\
&amp; &amp; &amp; -m_{i+2,i} &amp; &amp; 1 \\
&amp; &amp; &amp; ... &amp; \\
&amp; &amp; &amp; -m_{n,i} &amp; &amp; ... &amp; &amp; &amp; 1
\end{pmatrix}
\]</span> 上述初等矩阵的逆之积<span class="math inline">\(L\)</span>可以证明是 <span class="math display">\[
L=\begin{pmatrix}
1 \\
-m_{21} &amp; 1 \\
-m_{31} &amp; -m_{32} &amp; 1 \\
&amp; &amp; &amp; ... \\
... &amp; &amp; &amp; &amp; 1 \\
-m_{n1} &amp; ... &amp; &amp; &amp; &amp; 1
\end{pmatrix}
\]</span></p>
<p>也就是说，任一<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>，都能够写作一个单位下三角矩阵<span class="math inline">\(L\)</span>和一个上三角阵<span class="math inline">\(U\)</span>的乘积。这个分解过程称为Doolittle分解，或直接称为<span class="math inline">\(LU\)</span>分解。</p>
<h4 id="doolittle分解">Doolittle分解</h4>
<p>Doolittle分解是<span class="math inline">\(LU\)</span>分解最常见的分解形式，注意<span class="math inline">\(L\)</span>是<strong>单位下三角阵</strong>，而<span class="math inline">\(U\)</span>是普通的上三角阵。</p>
<h4 id="crout分解">Crout分解</h4>
<p>Crout分解也是一种<span class="math inline">\(LU\)</span>分解，但和Doolittle分解刚好相反，这里<span class="math inline">\(U\)</span>是<strong>单位上三角阵</strong>，而<span class="math inline">\(L\)</span>是普通的下三角阵。</p>
<h4 id="ldu分解"><span class="math inline">\(LDU\)</span>分解</h4>
<p>可以发现，在<span class="math inline">\(LU\)</span>分解中，总归是只有一个矩阵对角线全1；实际上我们也可以将矩阵<span class="math inline">\(A\)</span>拆分成三个矩阵，使得下三角阵<span class="math inline">\(L\)</span>和上三角阵<span class="math inline">\(U\)</span>均为单位三角阵，原来那个非单位对角阵的对角线元素提取出来变为一个对角阵<span class="math inline">\(D\)</span>即可，这被称为<span class="math inline">\(LDU\)</span>分解。</p>
<h3 id="lu分解的性质">2.2.2 <span class="math inline">\(LU\)</span>分解的性质</h3>
<h4 id="前提条件">前提条件</h4>
<p>对方阵<span class="math inline">\(A\)</span>进行<span class="math inline">\(LU\)</span>分解本质上和高斯消去法并没有什么不同，所以也要求方阵<span class="math inline">\(A\)</span>的所有顺序余子式均非0。这个条件是充要的。</p>
<h4 id="唯一性">唯一性</h4>
<p>给定方阵<span class="math inline">\(A\)</span>的<span class="math inline">\(LU\)</span>分解是唯一的，证明很简单，利用三角阵和单位三角阵的性质即可，如下</p>
<p>假如方阵<span class="math inline">\(A\)</span>存在两组<span class="math inline">\(LU\)</span>分解，分别记作<span class="math inline">\(A=LU\)</span>，<span class="math inline">\(A=L_1U_1\)</span>，那么有 <span class="math display">\[
LU=L_1U_1
\]</span> 可以证明，<span class="math inline">\(L\)</span>和<span class="math inline">\(U\)</span>都是可逆阵，所以有 <span class="math display">\[
L_1^{-1}L=U_1U^{-1}
\]</span> 单位下三角阵的乘积仍然是单位下三角阵，上三角阵的乘积仍然是上三角阵，因此上式要成立，必须取等式左右两边可能情况的交集，也就是要找到一种矩阵，既是单位下三角阵，同时又是上三角阵，那么这个阵只能是单位对角阵，也就是说<span class="math inline">\(L_1^{-1}L=U_1U^{-1}=I\)</span>。那么显然，<span class="math inline">\(L_1=L\)</span>，<span class="math inline">\(U_1=U\)</span>，所以方阵<span class="math inline">\(A\)</span>的<span class="math inline">\(LU\)</span>分解唯一性得证。</p>
<h3 id="lu分解的作用">2.2.3 <span class="math inline">\(LU\)</span>分解的作用</h3>
<p><span class="math inline">\(LU\)</span>分解的作用，主要还是提供一种除了高斯消去法以外的线性方程组解法。单位下三角阵<span class="math inline">\(L\)</span>和上三角阵<span class="math inline">\(U\)</span>的构造过程，本质上就是高斯消去法的消去过程；利用这两个三角阵进行<span class="math inline">\(x\)</span>求解的过程，本质上就是高斯消去法的回代过程。</p>
<p>另外，对于一些特殊的方阵，<span class="math inline">\(LU\)</span>分解可以简化高斯消去法的计算过程。</p>
<h3 id="cholesky分解">2.2.4 Cholesky分解</h3>
<p>Cholesky分解就是一种可以简化特殊线性方程组求解过程的分解方法。</p>
<p>Cholesky分解面向的对象是对称正定矩阵。这里，补充一下对称正定矩阵的定义。对称正定矩阵，指的是这样一种对称方阵<span class="math inline">\(M\)</span>，对于任意的非0实系数向量<span class="math inline">\(z\)</span>，都满足<span class="math inline">\(z^TMz&gt;0\)</span>。</p>
<p>如果我们将对称正定矩阵<span class="math inline">\(M\)</span>进行<span class="math inline">\(LDU\)</span>分解，可以得到 <span class="math display">\[
M = LDU
\]</span> 由对称正定矩阵的对称性，可得 <span class="math display">\[
M=M^T
\]</span> 即 <span class="math display">\[
LDU=U^TDL^T
\]</span> 由<span class="math inline">\(LU\)</span>分解的唯一性，可知 <span class="math display">\[
L=U^T
\]</span> 所以，对称正定矩阵<span class="math inline">\(M\)</span>可以分解为 <span class="math display">\[
M=LDL^T
\]</span> 如果我们将对角阵<span class="math inline">\(D\)</span>进行开方处理，那么对称正定矩阵<span class="math inline">\(M\)</span>可以改写为 <span class="math display">\[
M=LD^{\frac{1}{2}}(LD^{\frac{1}{2}})^T
\]</span> 记<span class="math inline">\(G=LD^{\frac{1}{2}}\)</span>，有 <span class="math display">\[
M=GG^T
\]</span> 由于<span class="math inline">\(L\)</span>是一个单位下三角阵，<span class="math inline">\(D^{\frac{1}{2}}\)</span>是一个对角阵，所以<span class="math inline">\(G\)</span>是一个对角线非0的下三角阵。需要特别强调的是，Cholesky分解仅适用于对称正定矩阵，对非正定矩阵是不适用的。</p>
<p>Cholesky分解为对称正定矩阵的线性方程组求解节省了大量的计算量，这也是<span class="math inline">\(LU\)</span>分解的意义所在。</p>
<h3 id="三对角矩阵的lu分解">2.2.5 三对角矩阵的<span class="math inline">\(LU\)</span>分解</h3>
<p>三对角矩阵也是科学计算中一种非常常见的矩阵，其形式如 <span class="math display">\[
A=\begin{pmatrix}
b_1 &amp; c_1 \\
a_2 &amp; b_2 &amp; c_2 \\
&amp; a_3 &amp; b_3 &amp; c_3 \\
&amp; &amp; &amp; ... &amp; \\
&amp; &amp; &amp; &amp; ... &amp; \\
&amp; &amp; &amp; &amp; a_{n-1} &amp; b_{n-1} &amp; c_{n-1} \\
&amp; &amp; &amp; &amp; &amp;a_n &amp; b_n \\
\end{pmatrix}
\]</span> 假如我们需要求解<span class="math inline">\(Ax=d\)</span>，那么可以对<span class="math inline">\(A\)</span>进行Crout分解，将其转换为下三角阵<span class="math inline">\(L\)</span>和单位上三角阵<span class="math inline">\(U\)</span>，如下 <span class="math display">\[
L = \begin{pmatrix}
l_1 \\
v_2 &amp; l_2 \\
&amp; &amp; ... \\
&amp; &amp; &amp; ... \\
&amp; &amp; &amp; v_n &amp; l_n \\
\end{pmatrix}
\]</span> <span class="math display">\[
U = \begin{pmatrix}
1 &amp; u_1 \\
&amp; 1 &amp; u_2 \\
&amp; &amp; &amp; ... \\
&amp; &amp; &amp; 1 &amp; u_{n-1} \\
&amp; &amp; &amp; &amp; 1
\end{pmatrix}
\]</span> 教材中，将这种三对角阵的求解方法称为追赶法，其实就是消去和回代，我不想用这种很无厘头的说法，还是用消去和回代来说明这两个流程。</p>
<h4 id="中间变量y的由来">中间变量<span class="math inline">\(y\)</span>的由来</h4>
<p>首先，我们需要明确，<span class="math inline">\(A=LU\)</span>，所以要求的方程组为<span class="math inline">\(LUx=d\)</span>，一般来说，我们会先令<span class="math inline">\(y=Ux\)</span>，然后求<span class="math inline">\(Ly=d\)</span>，所以要声明一个中间变量<span class="math inline">\(y\)</span>，这个<span class="math inline">\(y\)</span>是一个n阶向量。</p>
<h4 id="消去过程-1">消去过程</h4>
<p>由<span class="math inline">\(A=LU\)</span>和<span class="math inline">\(Ly=d\)</span>可以整理得到 <span class="math display">\[
\begin{aligned}
&amp; a_i = v_i \\
&amp; b_i = l_i + v_i u_{i-1}\\
&amp; c_i = l_iu_i\\
&amp; d_i = v_iy_{i-1} + l_iy_i
\end{aligned}
\]</span> 其中，<span class="math inline">\(a_i, b_i, c_i, d_i\)</span>均为已知量，所以可以移项得到 <span class="math display">\[
\begin{aligned}
&amp;l_i = b_i - a_iu_{i-1}\\
&amp;u_i = \frac{c_i}{l_i} \\
&amp;y_i = \frac{d_i - a_iy_{i-1}}{l_i}
\end{aligned}
\]</span> 根据上面这些关系，可以递推得到<span class="math inline">\(L\)</span>，<span class="math inline">\(U\)</span>以及<span class="math inline">\(y\)</span>。</p>
<h4 id="回代过程-1">回代过程</h4>
<p>根据<span class="math inline">\(y=Ux\)</span>，可以得到 <span class="math display">\[
x_i+u_ix_{i+1}=y_i
\]</span> 那么，先求得<span class="math inline">\(x_n=y_n\)</span>，然后从下向上进行<span class="math inline">\(x\)</span>的求解即可 <span class="math display">\[
x_i = y_i - u_ix_{i+1}
\]</span></p>
]]></content>
      <categories>
        <category>Mathematics</category>
      </categories>
      <tags>
        <tag>Numerical Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析笔记-第三章 多项式插值</title>
    <url>/2022/11/02/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%8F%92%E5%80%BC/</url>
    <content><![CDATA[<h2 id="本章概述">本章概述</h2>
<p>在实际应用中，我们经常会遇到利用多项式拟合去拟合一组数据，从而进行数据预测的情况。这个方法在数值计算中被称为多项式插值。本章，主要介绍多项式插值的基本概念，Lagrange插值多项式，Newton插值多项式，插值多项式的误差分析以及Hermite插值多项式。</p>
<span id="more"></span>
<h2 id="插值多项式的基本概念">3.1 插值多项式的基本概念</h2>
<h3 id="插值多项式的定义">3.1.1 插值多项式的定义</h3>
<p>假如在区间<span class="math inline">\([a,b]\)</span>上，有<span class="math inline">\(n+1\)</span>个函数<span class="math inline">\(f(x)\)</span>的采样点<span class="math inline">\(x_0, x_1, ..., x_n\)</span>，以及相应的函数值<span class="math inline">\(f(x_0), f(x_1), ..., f(x_n)\)</span>，那么存在一个不超过<span class="math inline">\(n\)</span>次的多项式<span class="math inline">\(p_n(x)\)</span>，满足<span class="math inline">\(p_n(x_0) = f(x_0), p_n(x_1) = f(x_1), ..., p_n(x_n) = f(x_n)\)</span>。这个多项式<span class="math inline">\(p_n(x)\)</span>称为函数<span class="math inline">\(f(x)\)</span>在区间<span class="math inline">\([a,b]\)</span>上的<span class="math inline">\(n\)</span>次插值多项式。</p>
<p>这里有几个概念：</p>
<ul>
<li>采样点<span class="math inline">\(x_0, x_1, ..., x_n\)</span>被称为<strong>插值节点</strong></li>
<li>区间<span class="math inline">\([a,b]\)</span>被称为<strong>插值区间</strong></li>
</ul>
<h3 id="插值多项式的存在性与唯一性">3.1.2 插值多项式的存在性与唯一性</h3>
<p><span class="math inline">\(f(x)\)</span>在给定插值节点与插值区间的情况下，<span class="math inline">\(n\)</span>次插值多项式是存在且唯一的。这个性质可以通过Vandermonde法得证。</p>
<h4 id="vandermonde法">Vandermonde法</h4>
<p>如果我们将插值节点代入插值多项式，并将系数<span class="math inline">\(a\)</span>视作未知量，可以得到<span class="math inline">\(n+1\)</span>条方程形成的<span class="math inline">\(n+1\)</span>元线性方程组，例如</p>
<p><span class="math display">\[
\begin{aligned}
&amp;a_0 + a_1x_0+a_2x_0^2+...+a_nx_0^n=y_0 \\
&amp;a_0 + a_1x_1 + a_2x_1^2+ ... + a_nx_1^n = y1\\
&amp;...\\
&amp;a_0+a_1x_n+a_2x_n^2+...+a_nx_n^n=y_n
\end{aligned}
\]</span> 可以将<span class="math inline">\(x_i\)</span>看作系数矩阵，如 <span class="math display">\[
\begin{pmatrix}
1 &amp; x_0 &amp; x_0^2 &amp; ... &amp; x_0^n \\
1 &amp; x_1 &amp; x_1^2 &amp; ... &amp; x_1^n \\
... &amp; &amp; &amp; ...\\
1 &amp; x_n &amp; x_n^2 &amp; ... &amp; x_n^n
\end{pmatrix}
\]</span> 上述矩阵的行列式就是Vandermonde行列式 <span class="math display">\[
\begin{vmatrix}
1 &amp; x_0 &amp; x_0^2 &amp; ... &amp; x_0^n \\
1 &amp; x_1 &amp; x_1^2 &amp; ... &amp; x_1^n \\
... &amp; &amp; &amp; ...\\
1 &amp; x_n &amp; x_n^2 &amp; ... &amp; x_n^n
\end{vmatrix}=\prod_{i=1}^n\prod_{j=0}^{i-1}(x_i-x_j)
\]</span> 书上没太讲明白Vandermonde法具体是怎么证明插值多项式的存在性和唯一性的。存在性大概就是，对于上面这个Vandermonde矩阵，总归存在一个子阵的行列式不为0，那么这个子阵对应的不大于n阶的插值多项式就必然存在。唯一性的证明不太清楚。</p>
<h2 id="lagrange插值多项式">3.2 Lagrange插值多项式</h2>
<h3 id="插值多项式的基函数法">3.2.1 插值多项式的基函数法</h3>
<p>线性代数中可以证明，在<span class="math inline">\(n\)</span>次的线性空间中，插值多项式的基是不唯一的，也就是说同一个插值多项式可以用多组基函数的组合来表示。也就是说，我们可以定义<span class="math inline">\(n+1\)</span>个线性无关的多项式<span class="math inline">\(\varphi_0(x), \varphi_1(x), ..., \varphi_n(x)\)</span>，作为插值多项式的基函数，通过这些基函数的线性组合来表示一个插值多项式。 <span class="math display">\[
p_n(x) = a_0\varphi_0(x)+a_1\varphi_1(x)+a_2\varphi_2(x)+...+a_n\varphi_n(x)
\]</span> 最基础的基函数就是<span class="math inline">\(\varphi_i(x)=x^i\)</span>，也就是前面的插值多项式定义中的写法。接下来，我们会介绍Lagrange基函数以及用Lagrange基函数的线性组合表示的Lagrange插值多项式。</p>
<h3 id="lagrange插值多项式-1">3.2.2 Lagrange插值多项式</h3>
<h4 id="lagrange基函数">Lagrange基函数</h4>
<p>Lagrange基函数的定义出于这样的一种想法：能不能找一种基函数，使得参数恰好与某一个节点相等的时候，函数值为1，其他情况下函数值为0呢？这就相当于我们基于插值节点，找到一组正交的基函数，从而满足了线性无关条件。</p>
<p>满足这个条件的基函数其实也很好构造。参数非指定节点的时候，基函数的某一乘项恰好为0；参数为指定节点的时候，基函数的分子分母恰好相等。这样就可以满足上面的条件了。这个函数可以表示为 <span class="math display">\[
l_k(x) = \prod_{i=0\&amp;i\neq k}^{n}\frac{(x-x_i)}{(x_k-x_i)}
\]</span> 那么，<span class="math inline">\(x\neq x_k\)</span>时，分子上总有一项为0，因此结果为0；<span class="math inline">\(x=x_k\)</span>时，分子分母相同，因此结果为1。</p>
<h4 id="lagrange插值多项式-2">Lagrange插值多项式</h4>
<p>以Lagrange基函数为基，可以写出Lagrange插值多项式 <span class="math display">\[
L_n(x)=a_0l_0(x)+a_1l_1(x)+...+a_nl_n(x)
\]</span> Lagrange插值多项式的系数很容易求得，因为代入某一个插值节点的时候，其他的Lagrange基函数全为0，对应的Lagrange基函数为1，所以只剩下一个系数，也就是说 <span class="math display">\[
L_n(x_i) = a_i = y_i
\]</span> 所以Lagrange插值多项式实际上可以写成 <span class="math display">\[
L_n(x)=y_0l_0(x)+y_1l_1(x)+...+y_nl_n(x)
\]</span></p>
<p>习惯上，我们将一次的Lagrange插值多项式称为Lagrange线性插值，将二次的称为Lagrange二次插值或者抛物线插值。 <span class="math display">\[
L_1(x)=y_0\frac{x-x_1}{x_0-x_1}+y_1\frac{x-x_0}{x_1-x_0}
\]</span> <span class="math display">\[
L_2(x)=y_0\frac{(x-x_1)(x-x_2)}{(x_0-x_1)(x_0-x_2)}+y_1\frac{(x-x_0)(x-x_2)}{(x_1-x_0)(x_1-x_2)}+y_2\frac{(x-x_0)(x-x_1)}{(x_2-x_0)(x_2-x_1)}
\]</span> 可以看出，Lagrange插值多项式的对称性还是很明显的。</p>
<h4 id="lagrange插值多项式的误差估计">Lagrange插值多项式的误差估计</h4>
<p>写出了Lagrange插值多项式之后，我们希望能够估计用Lagrange插值多项式进行多项式拟合的结果误差，也就是希望能够求出插值余项<span class="math inline">\(R_n(x)\)</span>。首先，给出插值余项多项式的定义 <span class="math display">\[
R_n(x)=f(x)-L_n(x)
\]</span> 这个定义的重要之处在于，明确了<span class="math inline">\(R_n(x)\)</span>至少有<span class="math inline">\(x+1\)</span>个零点，因为在插值节点上<span class="math inline">\(f(x_i)=L_n(x_i)\)</span>。</p>
<p>因此，我们可以设<span class="math inline">\(R_n(x)=K(x)\prod_{i=0}^n(x-x_i)\)</span>，或者将其简写为<span class="math inline">\(R_n(x)=K(x)\Pi(x)\)</span>。</p>
<p>接下来，引入一个辅助函数<span class="math inline">\(\varphi(x) = R_n(x)-K(x)\Pi(x)=f(x)-L_n(x)-K(x)\Pi(x)\)</span>，如果将<span class="math inline">\(x\)</span>视作插值区间上的一个定点，则<span class="math inline">\(\varphi(t)=f(t)-L_n(t)-K(x)\Pi(t)\)</span>在插值区间上有<span class="math inline">\(n+2\)</span>个零点。根据罗尔定理，<span class="math inline">\(\varphi^{(n+1)}(t)\)</span>在插值区间上必有1个零点。我们将这个零点记为<span class="math inline">\(t=\xi\)</span>，那么可以得到 <span class="math display">\[
\varphi^{(n+1)}(\xi)=0
\]</span> 由于<span class="math inline">\(L_n(t)\)</span>是不大于<span class="math inline">\(n\)</span>阶的多项式，因此<span class="math inline">\(L_n^{(n+1)}(t)=0\)</span>；<span class="math inline">\(\Pi(t)\)</span>则是一个<span class="math inline">\(n+1\)</span>阶多项式，因此<span class="math inline">\(\Pi^{(n+1)}(t)=(n+1)!\)</span>，那么由<span class="math inline">\(\varphi^{(n+1)}(\xi)=0\)</span>可以推得 <span class="math display">\[
f^{(n+1)}(\xi)=K(x)(n+1)!
\]</span> 所以，<span class="math inline">\(K(x)=\displaystyle\frac{f^{(n+1)}(\xi)}{(n+1)!}\)</span>，那么整个Lagrange插值多项式的插值余项就可以写为 <span class="math display">\[
R_n(x)=\frac{f^{(n+1)}(\xi)}{(n+1)!}\Pi(x)
\]</span> Lagrange插值余项并不是一个精确的值，因为<span class="math inline">\(\xi\)</span>是不知道的，但我们可以根据余项的表达式进行误差上界的估计 <span class="math display">\[
R_n(x)\leq\frac{max|f^{(n+1)}(x)|}{(n+1)!}\Pi(x)
\]</span></p>
<h2 id="newton插值多项式">3.3 Newton插值多项式</h2>
<h3 id="newton基函数">3.3.1 Newton基函数</h3>
<p>Newton基函数的定义为 <span class="math display">\[
n_0(x)=1
\]</span> <span class="math display">\[
n_j(x)=\prod_{i=0}^{j-1}(x-x_i),\ j&gt;0
\]</span></p>
<h3 id="newton插值多项式-1">3.3.2 Newton插值多项式</h3>
<p>Newton插值多项式是Newton基函数的线性组合，即 <span class="math display">\[
N_n(x)=a_0+a_1(x-x_0)+a_2(x-x_0)(x-x_1)+...+a_n\prod_{i=0}^{n-1}(x-x_i)
\]</span> Newton插值多项式比较有趣的地方在于系数。 <span class="math display">\[
y_0 = a_0
\]</span> <span class="math display">\[
y_1 = y_0 + a_1(x_1-x_0)
\]</span> 那么 <span class="math display">\[
a_1 = \frac{y_1-y_0}{x_1-x_0}
\]</span> 那么 <span class="math display">\[
a_2 = \frac{\displaystyle\frac{y_2-y_0}{x_2-x_0}-\frac{y_1-y_0}{x_1-x_0}}{x_2-x_1}
\]</span> 这个系数很明显是有规律的，这个规律可以用差商来简化描述。</p>
<h4 id="差商和newton插值多项式系数的关系">差商和Newton插值多项式系数的关系</h4>
<p>我们将<span class="math inline">\(f[x_i, x_k]=\displaystyle\frac{f_i-f_k}{x_i-x_k}\)</span>记为<span class="math inline">\(f(x)\)</span>关于节点<span class="math inline">\(x_i, x_k\)</span>的一阶差商，将<span class="math inline">\(f[x_i, x_j,x_k] = \displaystyle\frac{\displaystyle\frac{f_i-f_k}{x_i-x_k}-\frac{f_i-f_j}{x_i-x_j}}{x_k-x_j}=\frac{f[x_i, x_k]-f[x_i, x_j]}{x_k-x_j}\)</span>记为<span class="math inline">\(f(x)\)</span>关于节点<span class="math inline">\(x_i, x_j, x_k\)</span>的二阶差商。</p>
<p>可以证明，Newton插值多项式的第<span class="math inline">\(n\)</span>阶系数<span class="math inline">\(a_n\)</span>就是<span class="math inline">\(f(x)\)</span>关于<span class="math inline">\(n\)</span>个节点的<span class="math inline">\(n\)</span>阶差商。</p>
<h4 id="差商的性质">差商的性质</h4>
<ol type="1">
<li>差商可以表示为函数值<span class="math inline">\(f(x_i)\)</span>的线性组合</li>
<li>差商所含节点具有对称性，交换两个节点的位置并不会影响最终的结果</li>
<li>若<span class="math inline">\(f(x)\)</span>在插值区间上<span class="math inline">\(n\)</span>阶可导，那么插值区间上存在一点<span class="math inline">\(\xi\)</span>使得<span class="math inline">\(f[x_0, x_1, ...,x_n]=\displaystyle\frac{f^{(n)}(\xi)}{n!}\)</span>成立</li>
</ol>
<p>关于第一条性质，可以用下式表示 <span class="math display">\[
f[x_0, x_1, ..., x_k] = \sum_{j=0}^{k}\frac{f(x_j)}{\prod_{i=0\&amp;i\neq j}^{k}(x_j-x_i)}
\]</span> 关于第三条性质，将在Newton插值多项式的余项计算中给出证明。</p>
<h3 id="newton插值多项式的余项">3.3.3 Newton插值多项式的余项</h3>
<p>Newton插值多项式相较于Lagrange插值多项式，有一个非常明显的好处：当插值阶数上升时，除了最高阶项以外，其他的所有项都不会发生变化。所以，Newton插值多项式提高插值阶数非常灵活。假定有一<span class="math inline">\(n\)</span>阶Newton插值多项式<span class="math inline">\(N_n(x)\)</span>，如果我们考虑上升一阶插值阶数，可以得到<span class="math inline">\(N_{n+1}(x)\)</span>，此时比较其差值 <span class="math display">\[
N_{n+1}(x)-N_n(x)=f[x_0, x_1, ..., x_n, x]\prod_{i=0}^{n}(x-x_i)
\]</span> 假定<span class="math inline">\(x\)</span>也是一个节点，将上式换元为 <span class="math display">\[
N_{n+1}(t) - N_n(t)=f[x_0, x_1, ..., x_n, x]\Pi_{i=0}^n(t-x_i)
\]</span> 由于<span class="math inline">\(x\)</span>是一个节点，所以有<span class="math inline">\(N_{n+1}(x)=f(x)\)</span>，那么上式可以写作 <span class="math display">\[
f(x)=N_n(x) + f[x_0, x_1, ..., x_n, x] \Pi_{i=0}^n(x-x_i)
\]</span> 那么余项其实就是 <span class="math display">\[
R_n(x)=f(x) - N_n(x) = f[x_0, x_1, ..., x_n, x]\Pi_{i=0}^n(x-x_i)
\]</span> 也就是说，通过Newton插值多项式能够直接得到插值余项的表达式。</p>
<p>注意，<span class="math inline">\(n\)</span>阶插值多项式具有唯一性，那么余项也具有唯一性，所以Newton插值多项式的余项应该和Lagrange插值多项式的余项相等，那么 <span class="math display">\[
f[x_0, x_1, ..., x_n,x]\Pi_{i=0}^n(x-x_i)=\frac{f^{(n+1)}(\xi)}{(n+1)!}\Pi_{i=0}^n(x-x_i)
\]</span> 注意，这里的差商是<span class="math inline">\(n+2\)</span>项。所以，我们可以证明得到差商的第三个性质，即 <span class="math display">\[
f[x_0, x_1, ..., x_n]=\frac{f^{(n)}(\xi)}{n!}
\]</span></p>
<h3 id="等距节点与差分">3.3.4 等距节点与差分</h3>
<p>在实际应用中，我们一般会按照固定的间隔取插值节点，即相邻的两个插值节点的差值是固定的，这个差值称为步长，一般用符号<span class="math inline">\(h\)</span>来表示。</p>
<p>若有 <span class="math display">\[
\Delta f_i = f(x_i + h) - f(x_i) = f_{i+1}- f_i
\]</span> 称这个<span class="math inline">\(\Delta f_i\)</span>为<span class="math inline">\(f(x)\)</span>在节点<span class="math inline">\(x_i\)</span>处步长为<span class="math inline">\(h\)</span>的一阶向前差分。</p>
<p>有一阶差分，自然也有更高阶的差分，例如 <span class="math display">\[
\Delta^2f_i = \Delta f_{i+1} - \Delta f_i
\]</span> 这个<span class="math inline">\(\Delta^2f_i\)</span>称为<span class="math inline">\(f(x)\)</span>在节点<span class="math inline">\(x_i\)</span>处步长为<span class="math inline">\(h\)</span>的二阶向前差分。</p>
<p>另外，除了向前差分，还有向后差分以及中心差分。向后差分就是<span class="math inline">\(\Delta f_i = f(x_i)-f(x_i - h)\)</span>，中心差分就是<span class="math inline">\(\Delta f_i = f(x_i+\frac{1}{2}h)- f(x_i - \frac{1}{2}h)\)</span>。</p>
<p>在插值节点等距分布的情况下，<span class="math inline">\(k+1\)</span>阶差商也可以简化为 <span class="math display">\[
f[x_0, x_1, ..., x_k] = \frac{\Delta^k f_0}{k!h^k}
\]</span></p>
<h2 id="hermite多项式">3.4 Hermite多项式</h2>
<h3 id="hermite插值问题">3.4.1 Hermite插值问题</h3>
<p>与Lagrange和Newton插值不同，Hermite插值问题不仅要考虑插值多项式在插值点上的值和函数相同，而且在全部或部分插值点上，还要满足一阶导数甚至高阶导数相同的条件。</p>
<p>若函数值、导数值的相同条件共有<span class="math inline">\(n+1\)</span>条，那么插值区间上存在一个不超过<span class="math inline">\(n\)</span>阶的Hermite多项式，满足在插值点上的函数值和导数值符合要求。</p>
<h3 id="hermite基函数">3.4.2 Hermite基函数</h3>
<p>Hermite插值多项式的求解其实是比较灵活的，下面介绍一种比较基础的、通过Hermite基函数来求解Hermite插值多项式的方法。</p>
<p>例如，在插值点<span class="math inline">\(x_0, x_1\)</span>上，要求找出一个插值多项式<span class="math inline">\(H(x)\)</span>，满足<span class="math inline">\(H(x_0)=f(x_0), H(x_1)=f(x_1), H^{(1)}(x_0)=f^{(1)}(x_0), H^{(1)}(x_1)=f^{(1)}(x_1)\)</span>，那么可以构造三次Hermite插值多项式如下 <span class="math display">\[
H(x) = f(x_0)h_0(x)+f(x_1)h_1(x)+f^{(1)}(x_0)\bar h_0(x) + f^{(1)}(x_1)\bar h_1(x)
\]</span> 其中，<span class="math inline">\(h(x)\)</span>被称为Hermite基函数。<span class="math inline">\(h_0(x)\)</span>满足<span class="math inline">\(h_0(x_0)=1, h_0(x_1)=0, h_0^{(1)}(x_0)=0, h^{(1)}(x_1)=0\)</span>的条件，<span class="math inline">\(h_1(x)\)</span>满足<span class="math inline">\(h_1(x_0)=0, h_1(x_1)=1, h_1^{(1)}(x_0)=0, h_1^{(1)}(x_1)=0\)</span>的条件，<span class="math inline">\(\bar h_0(x)\)</span>满足<span class="math inline">\(\bar h_0(x_0)=0, \bar h_0(x_1)=0, \bar h_0^{(1)}(x_0)=1, \bar h_0^{(1)}(x_1)=0\)</span>的条件，<span class="math inline">\(\bar h_1(x)\)</span>满足<span class="math inline">\(\bar h_1(x_0)=0, \bar h_1(x_1)=0, \bar h_1^{(1)}(x_0)=0, \bar h_1^{(1)}(x_1)=1\)</span>的条件。其实这种构造基函数的方式和Lagrange基函数非常相似，只不过推广到了导数条件上去。</p>
<p>为了满足上述条件，需要进行各个基函数的构造。以<span class="math inline">\(h_0(x)\)</span>为例，由于<span class="math inline">\(x=x_1\)</span>时函数值和导数值均为0，因此<span class="math inline">\(x_1\)</span>肯定是<span class="math inline">\(h_0(x)\)</span>的二重零点，所以<span class="math inline">\(h_0(x)\)</span>必有因子<span class="math inline">\((x-x_1)^2\)</span>；由于<span class="math inline">\(H(x)\)</span>是三次多项式，所以所有的基函数都可能是三次多项式，那么可以令<span class="math inline">\(h_0(x)=(a+bx)(x-x_1)^2\)</span>。事实上，为了方便计算，我们会令<span class="math inline">\(h_0(x)=(a+b\displaystyle \frac{x-x_0}{x_1-x_0})(\frac{x-x_1}{x_0-x_1})^2\)</span>。那么将<span class="math inline">\(x=x_0\)</span>时的函数值和导数值条件代入，可以得到 <span class="math display">\[
\begin{aligned}
&amp;h_0(x_0)=(a+b\frac{x_0-x_0}{x_1-x_0})(\frac{x_0-x_1}{x_0-x_1})^2=1\\
&amp;h_0^{(1)}(x_0)=\frac{b}{x_1-x_0}(\frac{x_0-x_1}{x_0-x_1})^2+(a+b\frac{x_0-x_0}{x_1-x_0})\frac{2}{x_0-x_1}\frac{x_0-x_1}{x_0-x_1}=0
\end{aligned}
\]</span> 那么 <span class="math display">\[
\begin{aligned}
&amp;a=1\\
&amp;b=2
\end{aligned}
\]</span> 即 <span class="math display">\[
h_0(x)=(1+2\frac{x-x_0}{x_1-x_0})(\frac{x-x_1}{x_0-x_1})^2
\]</span> 其他的基函数同理，都可以求出来。</p>
<p>很明显，Hermite基函数的构造也是比较繁琐的，特别是在未知数的数量增多之后，求解起来将会非常麻烦。对于导数条件比较少的情况，其实可以找一些其他的方法进行Hermite插值多项式的求解。</p>
<h3 id="hermite多项式的其他解法">3.4.3 Hermite多项式的其他解法</h3>
<p>假设我们现在需要对插值区间内的5个插值点进行Hermite插值，但是只要求在某一个插值点上导数值相同，也就是说，Hermite插值问题中的6个条件只有1个是导数条件。对于这种问题，我们完全可以先进行函数值条件的插值，得到一个不大于4次的插值多项式，然后再利用最后一个导数条件以及前面的5个零点条件求出另一个不大于5次的插值多项式，最后将上面两个插值多项式相加，就可以得到不大于5次的Hermite多项式了。</p>
<h3 id="hermite多项式的余项">3.4.4 Hermite多项式的余项</h3>
<p>假定在插值区间上有3个插值点<span class="math inline">\(x_0, x_1, x_2\)</span>，5个插值条件<span class="math inline">\(f(x_0), f(x_1), f(x_2), f^{(1)}(x_0), f^{(1)}(x_1)\)</span>，那么有余项 <span class="math display">\[
R_4(x) = \frac{f^{(5)}(\xi)}{5!}(x-x_0)^2(x-x_1)^2(x-x_0)
\]</span> 余项的组成是很有规律的。前面的<span class="math inline">\(\displaystyle \frac{f^{(n+1)}(\xi)}{(n+1)!}\)</span>的阶数永远和插值条件个数相等，后面的连乘项中，每个插值点上有几个条件，那这个<span class="math inline">\(x-x_i\)</span>就是多少次方。</p>
<h2 id="样条插值">3.5 样条插值</h2>
]]></content>
      <categories>
        <category>Mathematics</category>
      </categories>
      <tags>
        <tag>Numerical Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器最大TCP连接数问题</title>
    <url>/2022/11/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%80%E5%A4%A7TCP%E8%BF%9E%E6%8E%A5%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在不考虑硬件资源的情况下，一个服务器（对应公网的一个 ip 地址）最大能够建立多少个TCP连接？</p>
<p>需要明确的一点是，一个TCP连接有四要素：</p>
<ol type="1">
<li>服务器 ip 地址</li>
<li>服务器端口</li>
<li>客户端 ip 地址</li>
<li>客户端端口</li>
</ol>
<p>所以TCP最大连接数其实就是求一个组合问题。在 ipv4 的情况下，同一网络中最多能够存在 <span class="math inline">\(2^{32}\)</span> 个 ip 地址；服务器往往只监听一个特殊的端口，所以服务器这边的 ip 地址和端口是唯一确定的；TCP 中端口是用一个16位无符号整型数来表示的，再考虑到1000以内的端口一般是保留的，所以粗略估计一下，一个服务器最多能够建立起 <span class="math inline">\((2^{32}-1) \times (2^{16}-1000)\)</span> 个TCP连接。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer Networking</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>栈和堆</title>
    <url>/2022/11/02/%E6%A0%88%E5%92%8C%E5%A0%86/</url>
    <content><![CDATA[<h2 id="栈和堆分别是什么">栈和堆分别是什么</h2>
<h3 id="stack">Stack</h3>
<p>栈是比较熟悉的一个概念。栈是内存中一个后进先出的存储区域，数据进栈和出栈就像把书一层一层叠起来，然后又一层一层取出来的过程。</p>
<h3 id="heap">Heap</h3>
<p>内存中的堆和数据结构中的堆不是一个概念。数据结构中的堆是什么二叉树之类的，内存中的堆指的是一片无序的内存空间。我们经常会听说为数据变量分配内存空间(Allocate)这种说法，其实分配内存的过程就是在堆中找一片空白内存给指定的变量进行数据存储的过程。</p>
<span id="more"></span>
<h2 id="栈和堆的主要区别">栈和堆的主要区别</h2>
<h3 id="存储的区别">存储的区别</h3>
<p>栈是一片有序的内存，所有进栈的数据长度都必须是已知且固定的。并且，栈是紧凑的，数据被连续地存放，就像一摞书，书与书之间不会有空隙。</p>
<p>堆是一片无序的内存空间。这里的无序并不是说堆中的数据存放非常混乱，而是相较于栈并不紧凑。在堆中存放数据，就像去饭店吃饭，服务员会先问我们有几个人，然后找到一张合适的空桌子，再记下桌子的编号。假如我们暂时离开，去上个厕所，那么从厕所回来时可以根据桌号去找到这张被分配好的桌子。上面的例子中，桌子的编号就相当于是指针，这个指针的类型和长度都是已知的，会被存入栈中；我们有几个人就相当于数据长度，系统需要根据当前的数据长度从空闲的内存中找到一片足够大小的连续空间，用于存放这些数据。</p>
<h3 id="性能的区别">性能的区别</h3>
<h4 id="写入速度">写入速度</h4>
<p>向栈中写数据比堆更快，因为向栈中写数据只需要把数据往栈上放就行了。向堆中写数据则必须找到一段长度足够的空内存，才能写数据。</p>
<h4 id="读取速度">读取速度</h4>
<p>从栈中读数据更快，因为栈中的数据经常可以被临时存入Cache中以加速访问，而访问堆中的数据则必须先从栈中取指针，然后再到内存中的对应地址读数据。</p>
<h2 id="堆栈对于rust编程的重要性">堆栈对于Rust编程的重要性</h2>
<p>在某些高级语言中，例如Java，变量在内存中的存储细节对于程序员来说被隐藏了。但对于一些偏底层的语言，例如C/C++，搞清楚变量在堆和栈中的行为是非常有必要的，不当的处理会导致内存泄漏等严重的内存安全问题，因为堆中的数据结构非常松散。</p>
<p>Rust以内存安全特性著名，这种特性是由底层的<strong>所有权机制</strong>保证的，内存不安全的代码在编译时就会被发现。也正因此，Rust程序员必须对堆栈的原理有一定了解，否则在<strong>所有权机制</strong>的保护下，我们所编写的Rust代码可能根本无法通过编译。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer System</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学习方法-无监督学习概述</title>
    <url>/2022/11/02/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95-%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>本文是李航老师的《统计学习方法》无监督学习部分的学习笔记。</p>
<h2 id="概述">概述</h2>
<h3 id="特征">特征</h3>
<ul>
<li>数据集无标签 <span class="math inline">\(U = \{x_1, x_2, ..., x_n\}\)</span></li>
</ul>
<p>一般用 <span class="math inline">\(z=g_{\theta}(x)\)</span> 或 <span class="math inline">\(P_{\theta}(z|x)\)</span> 来表示模型，其中 <span class="math inline">\(z\)</span> 表示分析结果，以与监督学习区分。</p>
<h3 id="常用方法">常用方法</h3>
<ol type="1">
<li>聚类</li>
<li>降维 Dimensionality Reduction</li>
<li>概率模型估计
<ol type="1">
<li>混合模型</li>
<li>概率图模型
<ol type="1">
<li>有向图模型</li>
<li>无向图模型</li>
</ol></li>
</ol></li>
</ol>
<span id="more"></span>
<h3 id="三要素">三要素</h3>
<p>无监督学习和监督学习一样，都有三要素：模型、策略、算法。</p>
<p>策略方面</p>
<ul>
<li>聚类：样本与所属类别中心距离的最小化</li>
<li>降维：降维过程中信息损失的最小化</li>
<li>概率模型：模型生成概率的最大化</li>
</ul>
<h2 id="类-cluster">类 Cluster</h2>
<p>用 <span class="math inline">\(G\)</span> 表示一个类，用 <span class="math inline">\(x_i, x_j\)</span> 表示类中的两个元素，用 <span class="math inline">\(n_G\)</span> 表示类的大小，用 <span class="math inline">\(d_{ij}\)</span> 表示元素 <span class="math inline">\(x_i, x_j\)</span> 之间的距离，可以给出类的定义</p>
<p>若有实数值 <span class="math inline">\(T &gt; 0\)</span>，对于任意 <span class="math inline">\(x_i, x_j \in G\)</span>，满足 <span class="math inline">\(d_{ij} \leq T\)</span>，则称 <span class="math inline">\(G\)</span> 为一个类。</p>
<h3 id="类的特征">类的特征</h3>
<h4 id="类的中心-bar-x_g">类的中心 <span class="math inline">\(\bar x_G\)</span></h4>
<p>类的中心一般取类中所有元素的平均值。</p>
<p><span class="math display">\[
\bar x_G = \frac{1}{n_G} \sum^{n_G}_{i=1}x_i
\]</span></p>
<h4 id="类的直径-d_g">类的直径 <span class="math inline">\(D_G\)</span></h4>
<p>类的直径一般取类中相隔最远的两个元素之间的间距。</p>
<p><span class="math display">\[
D_G = \mathop{max}\limits_{x_i, x_j \in G}d_{ij}
\]</span></p>
<h4 id="类的样本散布矩阵-a_g-和样本协方差矩阵-s_g">类的样本散布矩阵 <span class="math inline">\(A_G\)</span> 和样本协方差矩阵 <span class="math inline">\(S_G\)</span></h4>
<ul>
<li>样本散布矩阵 Scatter Matrix</li>
<li>样本协方差矩阵 Covariance Matrix</li>
</ul>
<p><span class="math display">\[
A_G = \sum^{n_G}_{i=1}(x_i - \bar x_G)(x_i - \bar x_G)^T
\]</span></p>
<p><span class="math display">\[
S_G = \frac{1}{m-1}A_G
\]</span></p>
<p>其中，<span class="math inline">\(m\)</span> 为样本的维数。</p>
<h3 id="类与类之间的距离">类与类之间的距离</h3>
<p>类 <span class="math inline">\(G_p\)</span> 和 类 <span class="math inline">\(G_q\)</span> 之间的距离 <span class="math inline">\(D(p, q)\)</span>，也称为类之间的连接(Linkage)。</p>
<h4 id="最短距离-或-单连接-single-linkage">最短距离 或 单连接 Single Linkage</h4>
<p><span class="math display">\[
D(p, q) = min\{d_{ij}|x_i \in G_p, x_j \in G_q\}
\]</span></p>
<h3 id="最长距离-或-完全连接-complete-linkage">最长距离 或 完全连接 Complete Linkage</h3>
<p><span class="math display">\[
D(p, q) = max\{d_{ij}|x_i \in G_p, x_j \in G_q\}
\]</span></p>
<h3 id="中心距离">中心距离</h3>
<p><span class="math display">\[
D(p, q) = d_{\bar x_p, \bar x_q}
\]</span></p>
<h3 id="平均距离">平均距离</h3>
<p><span class="math display">\[
D(p, q) = \frac{1}{n_pn_q}\sum_{x_i \in G_p}\sum_{x_j \in G_q}d_{ij}
\]</span></p>
<h2 id="常用的聚类方法">常用的聚类方法</h2>
<h3 id="层次聚类">层次聚类</h3>
<p>层次聚类分成聚合和分解两种方向，但原理基本类似。从聚合的角度来看，层次聚类的过程主要是</p>
<ol type="1">
<li>第一次迭代，每一个数据都看作一个类</li>
<li>根据一定的规则，进行类的合并，直到达到收敛条件</li>
</ol>
<p>层次聚类的主要元素</p>
<ol type="1">
<li>距离定义</li>
<li>合并规则</li>
<li>收敛条件（如类个数或类直径阈值）</li>
</ol>
<h3 id="k均值聚类">k均值聚类</h3>
<h4 id="策略">策略</h4>
<p>通过损失函数的最小化来选择样本集合的最优划分</p>
<h4 id="要点">要点</h4>
<ol type="1">
<li>距离采用欧式距离定义</li>
<li>各个元素与所属类中心的距离之和定义为损失函数</li>
<li><span class="math inline">\(k\)</span> 的值需要预先定义好</li>
</ol>
<p>如果将优化目标写作 <span class="math inline">\(C^{*}\)</span>，那么有定义</p>
<p><span class="math display">\[
C^* = \mathop{argmin}\limits_{C}W(C) = \mathop{argmin}\limits_{C}\sum^k_{i=1}\sum_{C(i)=l}||x_i - \bar x_l||^2
\]</span></p>
<p>其实就是先计算每个类中所有元素到类中心点的距离之和，再把所有类的这个距离之和再求和，求解使得这个损失函数最小的元素划分方案。</p>
<h3 id="迭代过程">迭代过程</h3>
<ol type="1">
<li>在样本中随机选取 <span class="math inline">\(k\)</span> 个点，作为初始类的中心，然后对剩余的每个点进行距离计算，将点放到离自己最近的类中心点对应的那个类中去</li>
<li>重新计算类的中心，然后用新的类中心去计算每个点与类之间的距离，并调整点的归属，直到收敛</li>
</ol>
<h4 id="特征-1">特征</h4>
<ol type="1">
<li>算法复杂度 <span class="math inline">\(O(mnk)\)</span>，其中 <span class="math inline">\(m\)</span> 为数据维度，<span class="math inline">\(n\)</span> 为样本数量，<span class="math inline">\(k\)</span> 为类的数量</li>
<li>初始点的选取会对最终的聚类结果造成很大的影响</li>
<li>必须事先给定 <span class="math inline">\(k\)</span> 的取值才能进行聚类，如果事先无法确定最优的 <span class="math inline">\(k\)</span> 值，可以选择若干个 <span class="math inline">\(k\)</span> 值进行试验，选择效果最好的那个 <span class="math inline">\(k\)</span> 值</li>
<li>聚类效果可以用类的平均直径来衡量</li>
</ol>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Unsupervised Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学习方法-模型评估与选择</title>
    <url>/2022/11/02/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95-%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<h2 id="模型评估参数">模型评估参数</h2>
<h3 id="训练误差">训练误差</h3>
<p>将训练得到的模型记为 <span class="math inline">\(Y = \hat f(X)\)</span>，那么训练误差就是模型 <span class="math inline">\(\hat f\)</span> 在训练集 <span class="math inline">\(T\)</span> 中的经验风险函数。</p>
<p><span class="math display">\[
R_{emp}(\hat f) = \frac{1}{N}\sum^N_{i=1}L(y_i, \hat f(x_i)), (x_i, y_i) \in T
\]</span></p>
<h3 id="测试误差">测试误差</h3>
<p>测试误差指的是模型 <span class="math inline">\(\hat f\)</span> 在测试集中的经验风险函数。</p>
<p><span class="math display">\[
e_{test} = \frac{1}{N&#39;}\sum^{N&#39;}_{i=1}L(y_i, \hat f(x_i)), (x_i, y_i) \in T_{test}
\]</span></p>
<h3 id="模型评估方法">模型评估方法</h3>
<p>训练误差对于模型的好坏评价意义不大，主要用来判断假设空间选取是否合适；测试误差对于模型的泛化能力评估意义比较大。</p>
<h2 id="交叉验证-cross-validation">交叉验证 Cross Validation</h2>
<p>为了更好地评估训练得到模型的性能，交叉验证是必要的。利用测试集进行模型泛化能力的评估是交叉验证的结果，本小节的重点是记录交叉验证的方法，或者说如何进行训练集和测试集的划分。</p>
<h3 id="简单交叉验证">简单交叉验证</h3>
<p>随机将数据集的70%作为训练集，剩余30%作为测试集。</p>
<h3 id="s折交叉验证-s-fold">S折交叉验证 S-Fold</h3>
<p>S折交叉验证是工业中最常用的交叉验证方法，因为这种方法能最大程度上发挥数据集的作用。具体的做法是，将数据集随机分成S个子集，随后进行S次迭代，每一次迭代都将S个子集中的其中一个子集作为测试集，其他的S-1个子集作为训练集。经过S次迭代之后，选出平均测试误差最小的模型作为最优模型。</p>
<h3 id="留一交叉验证-leave-one-cut">留一交叉验证 Leave-one-cut</h3>
<p>留一交叉验证是S折交叉验证的一种特殊情况，即取S的值为样本容量。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust变量绑定与解构</title>
    <url>/2022/11/03/Rust%E5%8F%98%E9%87%8F%E7%BB%91%E5%AE%9A%E4%B8%8E%E8%A7%A3%E6%9E%84/</url>
    <content><![CDATA[<h2 id="为什么要设定变量的可变性">为什么要设定变量的可变性？</h2>
<p>不可变的变量能够使得代码更加安全，可变变量可以使得代码更加灵活，如果既要实现可变又要不可变，那么需要在底层实现上花非常大的力气。</p>
<p>另外，不可变变量的声明可以在运行时避免多余的 <code>runtime</code> 检查，由此提升运行时性能。</p>
<span id="more"></span>
<h2 id="变量绑定">变量绑定</h2>
<p>在Rust中，我们不说变量的赋值，而是说变量的绑定。因为这里涉及到Rust的核心概念——<strong>所有权</strong>。简单来说，Rust将内存看作对象，变量绑定就是将某一个内存对象的所有权赋予目标变量的过程，而原来的变量对这个内存对象的所有权就失效了。</p>
<p>内存对象在Rust中就像财产，变量就像一个个人，将某一个内存对象绑定给某一个变量，就类似于声明这个内存对象现在由这个变量所拥有。</p>
<h2 id="变量默认不可变">变量默认不可变</h2>
<p>Rust中通过 <code>let</code> 声明的变量默认是不能变更的，必须使用 <code>let mut</code> 声明，变量才能够变更，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>, x);</span><br><span class="line">    x = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码在Rust中会报错，必须改为</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>, x);</span><br><span class="line">    x = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码才能通过编译。</p>
<p>变量默认声明为immutables的好处在于，强迫程序员去避免对变量值的变更，从而使得代码更加安全。但Rust又提供了声明为mutables的途径，而不是像ClojureScript一样每次变更必须重新生成一个对象，付出大量内存拷贝的成本。</p>
<h2 id="忽略未使用变量">忽略未使用变量</h2>
<p>Rust默认会在一个变量没有被使用的时候提供一个警告，但是在项目开发初期我们可能会声明一些暂时用不到的变量。为了避免Rust反复警告，可以用下划线开头来命名变量，这样Rust就会忽略这个未使用的变量。</p>
<h2 id="不可变变量和常量的区别">不可变变量和常量的区别</h2>
<p>immutable和constant是有区别的。</p>
<ul>
<li>在声明常量的时候，必须使用 <code>const</code> 关键字，并且必须在声明的时候就标注常量的值</li>
<li>常量在编译时就固定了，运行时永远不可变，因此不允许使用 <code>mut</code></li>
</ul>
<p>Rust中，推荐用全大写作为常量名，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI: <span class="type">f32</span> = <span class="number">3.1415926</span>;</span><br></pre></td></tr></table></figure>
<p>常量可以在任意作用域内声明，并在所在的作用域内有效。</p>
<h2 id="变量遮蔽-shadowing">变量遮蔽 shadowing</h2>
<p>Rust允许声明相同的变量，在后面声明的变量会遮蔽之前的变量，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = x + <span class="number">1</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = x * <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;The value of x is &#123;&#125;&quot;</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>观察输出为12和6。注意，在同一个作用域内，调用相同命名的变量时总是调用声明靠后的那一个，但是变量遮蔽不代表原来的变量被抹去了，原来的变量仍然存在，只是这个名字不再能访问之前那个变量。（这一点通过作用域就可以看出）</p>
<p>我们将 <code>let x = 5;</code> 声明的 <code>x</code> 称为 original x，将 <code>let x = x + 1;</code> 声明的这个 <code>x</code> 称为 old x，将 <code>let x = x * 2;</code> 声明的这个 <code>x</code> 称为 new x。在声明完 original x 后，对应于5的变量x是当前唯一的名为x的变量，Rust访问x肯定返回5；声明完 old x 后，在 <code>main()</code> 函数作用域内，old x 成为了最新的一个名为x的变量，Rust访问x就返回6了。注意，在这个时候 original x 仍然存在，它仍然与存储了5的内存地址绑定，只不过当前的 <code>x</code> 已经不指向 original x，即由于变量遮蔽，original x目前不可访问了，但它仍然存活。声明完new x之后，此时作用域中最新的名为x的变量是 new x，因此Rust访问 <code>x</code> 返回12；但这个小作用域结束返回到 <code>main()</code> 函数作用域之后，new x就不存在了，当前最新的名为x的变量又变成了old x，所以Rust访问 <code>x</code> 会访问old x，并得到内存中存储的值6。</p>
<p>所以变量遮蔽本质上是定义了一个访问队列，当前存活的最新的同名变量排在最前面，其他的变量按照声明的时间先后进行排列，如果最前面的变量因为作用域的切换而灰飞烟灭了，那么排在后面的变量就会顶上，Rust呢总是访问排在最前面的那个同名变量。</p>
<p>从上面这个结论，也可以推出，如果两个变量的类型不同，也是允许进行变量遮蔽的，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">spaces</span> = <span class="string">&quot;   &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">spaces</span> = spaces.<span class="title function_ invoke__">len</span>();</span><br></pre></td></tr></table></figure>
<p>但注意，可变变量的类型是确定的，下面的代码是不能通过编译的</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">spaces</span> = <span class="string">&quot;   &quot;</span>;</span><br><span class="line">spaces = spaces.<span class="title function_ invoke__">len</span>();</span><br></pre></td></tr></table></figure>
<h2 id="什么是变量解构">什么是变量解构？</h2>
<p>对于比较复杂的类型，可以通过模式匹配进行变量解构，实际上就是将一个结构复杂的变量分解成若干个结构不那么复杂的变量，或者干脆就是基本变量类型，例如从一个结构体中提取一个整型。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust基本类型</title>
    <url>/2022/11/03/Rust%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="基本类型">基本类型</h2>
<ul>
<li>数值类型
<ul>
<li>有符号整数 <code>i8, i16, i32, i64, isize</code></li>
<li>无符号整数 <code>u8, u16, u32, u64, usize</code></li>
<li>浮点数 <code>f32, f64</code></li>
<li>有理数和复数</li>
</ul></li>
<li>字符串</li>
<li>布尔类型 <code>true, false</code></li>
<li>字符类型 <code>char</code>，表示单个Unicode字符</li>
<li>单元类型，即 <code>()</code>，相当于 <code>null</code></li>
</ul>
<span id="more"></span>
<p><code>isize</code> 和 <code>usize</code> 取决于当前处理器的位数，如果是64位处理器就对应 <code>i64</code> 和 <code>u64</code>。Rust默认使用 <code>i32</code> 作为整型的数值类型。</p>
<p>Rust编译器会自动推断变量的类型，但在某些情况下Rust编译器无法自动推断，例如将一个字符串中的数字转为一个数值类型的变量，此时如果没有显式地定义变量类型，编译器将会报错。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">guess</span> = <span class="string">&quot;42&quot;</span>.<span class="title function_ invoke__">parse</span>();</span><br></pre></td></tr></table></figure>
<p>如果我们改写为</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">i32</span> = <span class="string">&quot;42&quot;</span>.<span class="title function_ invoke__">parse</span>();</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">guess</span> = <span class="string">&quot;42&quot;</span>.parse::&lt;<span class="type">i32</span>&gt;();</span><br></pre></td></tr></table></figure>
<p>那么编译器就知道该将这个 <code>"42"</code> 解析为哪个数值类型，就不会报错了。</p>
<h2 id="整型溢出规则">整型溢出规则</h2>
<p>在 <code>debug</code> 模式下，Rust会检查整型的溢出；在 <code>release</code> 模式下，Rust不会检查整型溢出，如果出现溢出则按照补码的规则进行循环。</p>
<p>为了显式地处理可能的溢出，可以用标准库的方法进行检查</p>
<ul>
<li><code>wrapping_*</code> 方法在所有模式下都会按照补码循环规则进行溢出处理，例如 <code>wrapping_add</code></li>
<li><code>checked_*</code> 方法会在溢出时返回 <code>None</code></li>
<li><code>overflowing_*</code> 方法会返回运算结果和指示是否溢出的布尔量</li>
<li><code>saturating_*</code> 方法会在溢出时返回当前数据类型能够表示的最大或最小值</li>
</ul>
<h2 id="浮点类型">浮点类型</h2>
<p><strong>Rust默认使用 <code>f64</code> 类型浮点数，处理速度与 <code>f32</code> 几乎相同且精度更高</strong>。</p>
<p>浮点数并非小数，存在精度损失问题，这一点就不过多展开了；对于无法表示的结果，会用 <code>NaN</code> 来表示。如果一个浮点运算可能会出现无法表示的结果，那么可以使用 <code>.is_nan()</code> 来确认运算结果是否正常。</p>
<h2 id="代码可读性">代码可读性</h2>
<p>在数值中插入 <code>_</code> 是允许的，可以提升代码可读性，没有实际意义，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">one_million</span>: <span class="type">i64</span> = <span class="number">1_000_000</span>;</span><br></pre></td></tr></table></figure>
<h2 id="序列">序列</h2>
<p><code>1..5</code> 相当于 <code>Python</code> 中的 <code>range(1, 5)</code>，可以生成1~4的连续数字；如果需要包括5，则需要声明为 <code>1..=5</code>，这样可以生成1~5的连续数字。</p>
<p>注意，Rust序列仅允许用于数字或者字符。</p>
<h2 id="有理数和复数">有理数和复数</h2>
<p>Rust标准库中不支持有理数和复数，但是社区开发的 <code>num</code> 库中可以支持。只需要在 <code>Cargo.toml</code> 文件的 <code>[dependencies]</code> 中加入 <code>num = "0.4.0"</code> 即可。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> num::complex::Complex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = Complex&#123; re: <span class="number">2.1</span>, im: -<span class="number">1.2</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = Complex::<span class="title function_ invoke__">new</span>(<span class="number">11.1</span>, <span class="number">22.2</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = a + b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Result = &#123;&#125; + &#123;&#125;i&quot;</span>, result.re, result.im);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust基本语法</title>
    <url>/2022/11/03/Rust%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="基本语法">基本语法</h2>
<p>下面通过一段简单的代码来认识一下Rust的基本语法。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>: <span class="type">i32</span> = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">c</span> = <span class="number">30i32</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">d</span> = <span class="number">30_i32</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">e</span> = <span class="title function_ invoke__">add</span>(<span class="title function_ invoke__">add</span>(a, b), <span class="title function_ invoke__">add</span>(c, d));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;( a + b ) + ( c + d ) = &#123;&#125;&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>(i: <span class="type">i32</span>, j: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    i + j</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="面向表达式的语言">面向表达式的语言</h3>
<p>在Rust中需要特别注意区分两个不同的概念：语句 Statement 和表达式 Expression。从结构上来看，最大的区别就在于代码行尾有没有 <code>;</code> 符号，有 <code>;</code> 的是语句，没有的则是表达式。</p>
<p>Rust的函数可以通过 <code>return</code> 返回值，也可以直接通过表达式来返回值，例如 <code>fn add(i, j)</code> 函数中的返回值就是通过 <code>i + j</code> 进行返回的。注意不要加上 <code>;</code>，否则返回的就是一个空的 <code>()</code>。</p>
<h3 id="指定变量类型">指定变量类型</h3>
<h4 id="immutable">immutable</h4>
<p>通过 <code>let</code> 修饰符可以将一个变量声明为不可变的变量，即 immutables。</p>
<h4 id="mutable">mutable</h4>
<p>通过 <code>let mut</code> 修饰符可以将一个变量声明为可变变量，即 mutables。</p>
<h4 id="数据类型">数据类型</h4>
<p>通过 <code>let</code> 声明变量时，编译器会自动判断合适的数据类型。我们也可以手动为变量声明数据类型，例如 <code>let b: i32 = 20;</code> 就是将 <code>b</code> 声明为不可变的 <code>i32</code> 类型变量，即32位 <code>integer</code>。也可以通过 <code>30i32</code> 或 <code>30_i32</code> 来在赋值时声明数据类型。</p>
<h4 id="string和char的区别">string和char的区别</h4>
<p>在Rust中，用 <code>""</code> 来表示字符串，用 <code>''</code> 来表示字符，这里规定相较于 <code>Python</code> 更加严格。</p>
<h3 id="函数签名">函数签名</h3>
<p>Rust中的函数签名和 <code>Python</code> 非常相似，通过 <code>:</code> 来表示入参的数据类型，通过 <code>-&gt;</code> 来表示返回值的类型。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust新建Cargo项目</title>
    <url>/2022/11/03/Rust%E6%96%B0%E5%BB%BACargo%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="新建项目">新建项目</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo new world_hello</span><br></pre></td></tr></table></figure>
<p>通过 <code>cargo new</code> 命令可以新建一个 <code>bin</code> 类型的项目。Rust中分 <code>bin</code> 和 <code>lib</code> 类型项目，<code>bin</code> 指最后生成的是可执行文件，<code>lib</code> 表示这属于一个库。<code>cargo new</code> 默认新建 <code>bin</code> 类型项目。</p>
<span id="more"></span>
<h2 id="运行项目">运行项目</h2>
<h3 id="run-运行">run 运行</h3>
<p>通过 <code>cargo run</code> 可以直接编译并运行生成的二进制文件。不过需要注意，<code>cargo run</code> 默认使用 <code>debug</code> 模式进行项目的编译与运行。</p>
<h3 id="先编译然后手动执行">先编译，然后手动执行</h3>
<p>通过 <code>cargo build</code> 可以进行项目的编译。完成编译之后，通过 <code>./target/debug/world_hello</code> 可以运行生成的二进制文件。</p>
<h3 id="两种编译方式">两种编译方式</h3>
<p>默认状态下，使用 <code>debug</code> 方式进行项目的编译。这种方式的编译速度比较快，编译器没有进行优化，所以用于 <code>debug</code> 时的快速编译，但是运行性能会有损失。</p>
<p>另一种方式是 <code>release</code> 方式，用这种方式进行编译，需要更长时间用于编译器的优化工作，但是运行性能将有很大的提升。指定 <code>release</code> 编译的方式是 <code>cargo run --release</code> 或 <code>cargo build --release</code>。</p>
<p>当然，如果用 <code>release</code> 方式进行编译，那么可执行文件将在 <code>./target/release</code> 下。</p>
<h3 id="cargo-check">cargo check</h3>
<p>在项目规模上升之后，每次进行一些代码的变更可能都要花很长时间去编译，这会影响开发效率。<code>cargo</code> 最酷炫的工具便是 <code>cargo check</code>，可以快速检查代码是否能够通过编译，而不需要完整地走一次 <code>cargo build</code> 流程浪费时间。（在开发的过程中，大部分情况下编译是为了检查代码是否编写正确，能够正确地编译为二进制文件）</p>
<h2 id="项目结构">项目结构</h2>
<p>通过 <code>tree</code> 命令，可以发现一个干净的Rust项目中仅有 <code>Cargo.toml</code> 以及 <code>/src/main.rs</code> 这两个文件。经过编译之后，项目中会生成 <code>/target</code> 文件夹以及 <code>Cargo.lock</code> 文件。</p>
<h3 id="cargo.toml-和-cargo.lock">Cargo.toml 和 Cargo.lock</h3>
<p><code>Cargo.toml</code> 和 <code>Cargo.lock</code> 是cargo的两个核心文件。其中 <code>Cargo.toml</code> 就类似于 <code>CMakeLists.txt</code> 相较于cmake的作用，用于对项目的构建信息等进行描述。而 <code>Cargo.lock</code> 是根据 <code>Cargo.toml</code> 生成的依赖清单。一般来说，我们需要合理地编写 <code>Cargo.toml</code> 文件，而不太需要管自动生成的 <code>Cargo.lock</code> 文件。</p>
<p>如果项目类型为 <code>bin</code>，那么最好将 <code>Cargo.lock</code> 一起上传至git仓库；如果项目类型为 <code>lib</code>，那么一般不需要考虑 <code>Cargo.lock</code>，将其加入 <code>.gitignore</code> 文件。</p>
<h3 id="cargo.toml-的结构">Cargo.toml 的结构</h3>
<h4 id="package">[package]</h4>
<p>打开 <code>Cargo.toml</code> 文件，可以看到 <code>[package]</code> 字段。其中，有 <code>name, version, edition</code> 等metadata。<code>name</code> 定义了项目的名称，<code>version</code> 定义了当前的项目版本，<code>edition</code> 定义了Rust大版本。</p>
<h4 id="dependency">[dependency]</h4>
<p><code>Cargo.toml</code> 文件中的 <code>[dependency]</code> 字段定义了项目的依赖。Rust支持以下三种类型的依赖引入</p>
<ul>
<li>从官方 <code>crates.io</code> 仓库引入，通过版本说明来描述</li>
<li>从项目源代码的git仓库或URL来描述</li>
<li>本地项目的绝对或相对路径，通过类Unix的方式来描述</li>
</ul>
<h3 id="main.rs">main.rs</h3>
<p><code>/src/main.rs</code> 是项目的入口文件，其中的 <code>main()</code> 函数则是项目的入口函数。我们简单地修改一下项目默认生成的 <code>main.rs</code>，如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">greeting</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">chinese</span> = <span class="string">&quot;世界，你好&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">english</span> = <span class="string">&quot;World, hello&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">regions</span> = [chinese, english];</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">region</span> <span class="keyword">in</span> regions.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, &amp;region);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">greeting</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面这个代码段可以看出，Rust中对于函数的定义以 <code>fn</code> 开头，对变量的声明利用 <code>let</code> 命令符开头，语句以 <code>;</code> 结尾。</p>
<p>组成数组的方式和 <code>Python</code> 类似，直接 <code>let regions = [chinese, english];</code> 即可。另外，Rust中利用迭代器进行数组的遍历，所以使用 <code>for region in regions.iter()</code> 语句进行 <code>regions</code> 数组中的元素遍历。<strong>Rust圣经的作者称数组为集合。</strong></p>
<p><code>println!</code> 函数后面有一个 <code>!</code> 感叹号，这个感叹号的作用相当于声明当前这个调用的函数是一个宏，暂时先不用太深究。<code>println!</code> 函数提供了类似于 <code>Python</code> 的字符串格式化功能，能够自动判断变量类型，无需手动格式化，比较方便。</p>
<p>注意，Rust中的字符串原生支持 <code>UTF-8</code> 编码，所以可以在字符串中引入各种语言。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>win10关闭terminal的提示音[SOLVED]</title>
    <url>/2022/11/03/win10%E5%85%B3%E9%97%ADterminal%E7%9A%84%E6%8F%90%E7%A4%BA%E9%9F%B3/</url>
    <content><![CDATA[<p>Win10的Terminal挺好用，但是按下tab的时候经常出现很烦人的提示音。下面记录一下如何删除这个提示音。</p>
<ol type="1">
<li>点击Settings</li>
<li>点击Profiles-Defaults</li>
<li>点击Advanced</li>
<li>将Bell notification style中的复选框全不选</li>
</ol>
<span id="more"></span>
<figure>
<img src="/2022/11/03/win10%E5%85%B3%E9%97%ADterminal%E7%9A%84%E6%8F%90%E7%A4%BA%E9%9F%B3//win10取消terminal的提示音.png" alt><figcaption>默认情况下第一项是选中的，取消第一项的选中</figcaption>
</figure>
]]></content>
      <categories>
        <category>Technical Issues</category>
      </categories>
      <tags>
        <tag>win10</tag>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>开始学习Rust!</title>
    <url>/2022/11/04/%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0Rust/</url>
    <content><![CDATA[<h2 id="rust是什么">Rust是什么？</h2>
<p>Rust是目前为止在内存安全方面设计最牛逼的语言。</p>
<span id="more"></span>
<h2 id="rust安装与更新">Rust安装与更新</h2>
<h3 id="如何安装rust">如何安装Rust</h3>
<p>笔者以WSL-Debian为开发环境，使用以下命令进行 <code>rustup</code> 的安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>
<p>运行上述命令，将自动从Rust官网下载 <code>rustup</code> 工具，然后帮助我们安装Rust整套工具链。除此以外，我们还需要一个链接器，可以通过安装 <code>build-essential</code> 进行 <code>GNU C Compiler</code> 的安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure>
<h3 id="如何更新rust">如何更新Rust</h3>
<p>安装了 <code>rustup</code> 之后，更新Rust工具链只需要运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustup update</span><br></pre></td></tr></table></figure>
<p>即可。</p>
<h3 id="如何卸载rust">如何卸载Rust</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustup self uninstall</span><br></pre></td></tr></table></figure>
<h3 id="检查是否正确安装rust">检查是否正确安装Rust</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rustc --version</span><br></pre></td></tr></table></figure>
<p>如果看到命令行返回 <code>rustc</code> 版本等信息，说明Rust已经成功安装。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
</search>
