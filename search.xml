<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Potential Flow Analysis - Magnus Effect</title>
    <url>/2022/11/01/Potential-Flow-Analysis-Magnus-Effect/</url>
    <content><![CDATA[<h2 id="velocity-vector-representation">Velocity vector representation</h2>
<p>Potential flow describes the velocity field as the gradient of the velocity potential. For any position vector <span class="math inline">\(\pmb{r}\)</span> in the vector field, write down the velocity potential as <span class="math inline">\(\phi\)</span>, then in the 2D polar coordinate system, the velocity vector can be represented as <span class="math display">\[
\pmb{v} = \frac{\partial \phi}{\partial r}\pmb{e}_r + \frac{1}{r}\frac{\partial \phi}{\partial \theta}\pmb{e}_{\theta}
\]</span> and the components of the velocity vector along two directions are <span class="math display">\[
\begin{aligned}
&amp;\pmb{v}_r = \frac{\partial \phi}{\partial r} \pmb{e}_r\\
&amp;\pmb{v}_{\theta} = \frac{1}{r}\frac{\partial \phi}{\partial \theta} \pmb{e}_{\theta}
\end{aligned}
\]</span></p>
<span id="more"></span>
<h2 id="d-potential-flow-expression">2D potential flow expression</h2>
<p>Let's assume that there is a 2D velocity field with uniform velocity <span class="math inline">\(U\)</span> and pressure <span class="math inline">\(p_{\infty}\)</span>. Somewhere in this velocity field, there is a rotating circular cylinder with radius <span class="math inline">\(R\)</span> and angular velocity <span class="math inline">\(\displaystyle \frac{d\theta}{dt}\)</span>. Taking the center of the cylinder as the origin, a polar coordinate system could be established, and the velocity potential at a random point <span class="math inline">\((r, \theta)\)</span> would be constructed by the following 3 parts:</p>
<ol type="1">
<li>Uniform Stream - <span class="math inline">\(\phi_1 = Urcos\theta\)</span></li>
<li>Source Doublet - <span class="math inline">\(\phi_2 = UR^2 \displaystyle \frac{cos\theta}{r}\)</span></li>
<li>Potential Vortex - <span class="math inline">\(\phi_3 = \displaystyle \frac{\Gamma \theta}{2\pi}\)</span></li>
</ol>
<p><span class="math inline">\(\Gamma\)</span> represents a potential vortex with circulation, which has a counterclockwise direction. Thus, velocity potential at a random point <span class="math inline">\((r, \theta)\)</span> is <span class="math display">\[
\phi = \phi_1 + \phi_2 + \phi_3 = Urcos\theta + UR^2\frac{cos\theta}{r} + \frac{\Gamma \theta}{2\pi}
\]</span></p>
<h2 id="velocity-pressure-field">Velocity &amp; Pressure field</h2>
<p>We can derive the expression of two components of the velocity vector as <span class="math display">\[
\begin{aligned}
&amp;u_r= \frac{\partial \phi}{\partial r} = Ucos\theta - \frac{UR^2cos\theta}{r^2} \\
&amp;u_{\theta} = \frac{1}{r}\frac{\partial \phi}{\partial \theta} = \frac{1}{r}(-Ursin\theta - UR^2\frac{sin\theta}{r}+\frac{\Gamma}{2\pi})
=-Usin\theta - \frac{UR^2sin\theta}{r^2} +\frac{\Gamma}{2\pi r} \\
\end{aligned}
\]</span> According to Bernoulli equation, pressure at a random point <span class="math inline">\((r, \theta)\)</span> will be derived as <span class="math display">\[
p = p_{\infty}+\frac{\rho}{2}(U^2-\pmb{v}^2)=p_{\infty}+\frac{\rho}{2}[U^2-(u_r^2 + u_{\theta}^2)]
\]</span> <span class="math display">\[
p = p_{\infty} +\frac{\rho}{2}[U^2(\frac{R^4}{r^4}-2cos2\theta\frac{R^2}{r^2})+(\frac{\Gamma}{2\pi r})^2-\frac{\Gamma}{\pi r}Usin\theta(1+\frac{R^2}{r^2})]
\]</span></p>
<h2 id="dimensionless-pressure-coefficient">Dimensionless pressure coefficient</h2>
<p>The dimensionless pressure coefficient <span class="math inline">\(c_p\)</span> can be expressed as <span class="math display">\[
c_p = \frac{p - p_{\infty}}{\displaystyle\frac{\rho}{2}u_{\infty}}= 1-\frac{\pmb{v}^2}{u^2_{\infty}}
\]</span> <span class="math display">\[
c_p = \frac{p - p_{\infty}}{\displaystyle\frac{\rho}{2}u_{\infty}}= 1-\frac{\pmb{v}^2}{u^2_{\infty}} = -\frac{U^2(\displaystyle\frac{R^4}{r^4}-2cos2\theta\frac{R^2}{r^2})+(\frac{\Gamma}{2\pi r})^2-\frac{\Gamma}{\pi r}Usin\theta(1+\frac{R^2}{r^2})}{U^2}
\]</span></p>
<h2 id="magnus-force">Magnus force</h2>
<p>As Magnus force is the force acting on the target cylinder, let's take a look at the pressure along the contour. Let <span class="math inline">\(r=R\)</span>, the velocity vector will be <span class="math display">\[
\begin{aligned}
&amp;u_r = 0\\
&amp;u_{\theta} = -2Usin\theta + \frac{\Gamma}{2\pi r}
\end{aligned}
\]</span> And the pressure along the contour will be simplified as <span class="math display">\[
p_{r=R} = p_{\infty} + \frac{\rho}{2} [U^2(1-4sin^2\theta) + \frac{2\Gamma U sin\theta}{\pi r} - (\frac{\Gamma}{2\pi r})^2]
\]</span> Then it will be possible to calculate Magnus force by integrating the pressure around cylinder <span class="math display">\[
F_{L}=\int_0^{2\pi}-p_{r=R} \cdot Rsin\theta d\theta
\]</span> The expression will be simplified as follows due to the odd power integral property of sine function <span class="math display">\[
F_L = -\frac{\rho \Gamma U}{\pi}\int_0^{2\pi}sin^2\theta d\theta
\]</span> Because that <span class="math display">\[
\int_0^{2\pi}sin^2\theta d\theta = \int_0^{2\pi} \frac{1-cos2\theta}{2} d\theta = \pi
\]</span> then Magnus force can be expressed in an elegant form <span class="math display">\[
F_L = -\rho \Gamma U
\]</span></p>
<h2 id="potential-flow-plots">Potential flow plots</h2>
<figure>
<img src="/2022/11/01/Potential-Flow-Analysis-Magnus-Effect//potential-flow-analysis-velocity-field-plot.png" alt><figcaption>Potential Flow Plots by Sean Zhou</figcaption>
</figure>
]]></content>
      <categories>
        <category>Mechanics</category>
      </categories>
      <tags>
        <tag>Aerodynamics</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博文图片显示问题[SOLVED]</title>
    <url>/2022/11/01/hexo%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98-SOLVED/</url>
    <content><![CDATA[<p>在使用hexo进行博客搭建的过程，发现使用Markdown语法的文档，无法正常加载上传的图片，例如</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Potential Flow Analysis</span>](<span class="link">./2022-11-1-Potential-Flow-Analysis-Magnus-Effect/potential-flow-analysis-velocity-field-plot.png</span>)</span><br></pre></td></tr></table></figure>
<p>通过观察构建信息，发现图片总是指向一个以 <code>/.io/</code> 开头的文件夹。经过在hexo官网的搜索，在评论区发现（😓）这个问题似乎是 <code>hexo-asset-image</code> 包的一个bug，只需要修改 <code>node_modules/hexo-asset-image/index.js</code> 的第24行，将其改为</p>
<figure class="highlight javascript"><figcaption><span>node_modules/hexo-asset-image/index.js</span></figcaption><table><tr><td class="code"><pre><span class="line"># <span class="title class_">JavaScript</span> </span><br><span class="line"><span class="keyword">var</span> endPos = link.<span class="property">length</span>;</span><br></pre></td></tr></table></figure>
<p>即可。</p>
]]></content>
      <categories>
        <category>Technical Issues</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入门-结构体</title>
    <url>/2022/11/11/Rust%E5%85%A5%E9%97%A8-%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    <content><![CDATA[<h2 id="什么是结构体">什么是结构体？</h2>
<h3 id="定义结构体">定义结构体</h3>
<p>假如我们想要存储一个学生的信息，包括姓名、学号、手机号以及电子邮箱，那么我们会希望这些信息能够组织在一起，以一个整体为单位来进行管理。Rust提供了 <code>struct</code> 结构体定义功能，可以将我们所需要的信息自定义为一个结构体变量，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    identifier: <span class="type">u32</span>,</span><br><span class="line">    phone_number: <span class="type">u32</span>,</span><br><span class="line">    email: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="实例化结构体">实例化结构体</h3>
<p>结构体的名称写在 <code>struct</code> 后面，建议以 <code>PascalCase</code> 进行结构体类型的命名。结构体中的变量称为<strong>字段(Field)</strong>，用 <code>&#123;&#125;</code> 包裹；定义时先写字段名，然后在 <code>:</code> 符号后写变量类型；字段之间用 <code>,</code> 分隔。</p>
<p>如果我们想要实例化一个结构体，可以有以下操作</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">xiao_ming</span> = Student &#123;</span><br><span class="line">    name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Xiao Ming&quot;</span>),</span><br><span class="line">    identifier: <span class="number">12345</span>,</span><br><span class="line">    phone_number: <span class="number">137110110110</span>,</span><br><span class="line">    email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;xiaoming@gmail.com&quot;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>结构体实例化的时候，需要我们对结构体的每个字段赋值，但需要注意的是这里不是使用 <code>=</code> 符号进行赋值，而是与定义时一样，使用 <code>:</code> 进行赋值。完成结构体的定义以后，如果我们想要访问结构体中的某一字段，可以使用 <code>.</code> 操作符进行访问，例如 <code>xiao_ming.email</code> 可以获取 <code>email</code> 字段的所有权。</p>
<p>如果结构体中的某些字段可能会需要修改，那么我们需要将整个结构体定义为可变变量，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">xiao_ming</span> = Student &#123;</span><br><span class="line">    name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Xiao Ming&quot;</span>),</span><br><span class="line">    identifier: <span class="number">12345</span>,</span><br><span class="line">    phone_number: <span class="number">137110110110</span>,</span><br><span class="line">    email: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;xiaoming@gmail.com&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiao_ming.email = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;xiaoming@163.com&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="结构体实例化函数">结构体实例化函数</h3>
<p>对于某些结构体，可能某些字段在初始化的时候总是有一个默认值，但Rust不支持在结构体定义的时候定义默认值，所以我们可能需要写一个函数来进行结构体的实例化。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    identifier: <span class="type">u32</span>,</span><br><span class="line">    active: <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">create_student</span>(name: <span class="type">String</span>, identifier: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="keyword">mut</span> Student &#123;</span><br><span class="line">    <span class="keyword">mut</span> Student &#123;</span><br><span class="line">        name: name,</span><br><span class="line">        identifier: identifier,</span><br><span class="line">        active: <span class="type">bool</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">xiao_ming</span> = <span class="title function_ invoke__">create_student</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Xiao Ming&quot;</span>), <span class="number">12345</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这个 <code>create_student</code> 函数的实现看起来有点蠢，因为入参的变量名与结构体的字段名明明是一样的，实例化的时候还得重复写形如 <code>name: name</code> 这样的代码。幸运的是，Rust支持<strong>字段初始化简化语法(Field init short)</strong>，允许我们通过下面的写法进行代码的简化</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">create_student</span>(name: <span class="type">String</span>, identifier: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="keyword">mut</span> Student &#123;</span><br><span class="line">    <span class="keyword">mut</span> Student &#123;</span><br><span class="line">        name,</span><br><span class="line">        identifier,</span><br><span class="line">        active: <span class="type">bool</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="更新结构体实例">更新结构体实例</h3>
<p>使用旧的一个结构体实例中的大部分内容来构建一个新的结构体实例也可能在实际中用到。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言标准</title>
    <url>/2022/11/02/C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86/</url>
    <content><![CDATA[<h2 id="classic-c">Classic C</h2>
<p>最早的C语言标准是 Kernighan &amp; Ritchie 的 <em>The C Programming Language</em> ，也被称为 <em>K&amp;R C</em> 或 <em>Classic C</em> 。</p>
<h2 id="c89">C89</h2>
<p>最早的C语言国际标准则是 1989 年通过的 ANSI C 标准，这个版本的C语言被简称为 <em>C89</em> ；一年以后， ISO 也通过了本质上与 C89 相同的标准，即 1990 年的 ISO C ，又称为 <em>C90</em> 。<strong>所以 C89 和 C90 是同一个版本的C语言。</strong> 由于这个标准实际上是 ANSI 制定的，人们更习惯以 ANSI C 或 C89 来表示这个版本的C语言。</p>
<h2 id="c99">C99</h2>
<p>为了实现以下三个目标：</p>
<ul>
<li>Internationalization</li>
<li>Correction of deficiencies</li>
<li>Improvement of computational usefulness</li>
</ul>
<p>ANSI/ISO 标准委员会对 C89 进行了一定的更新。</p>
<h2 id="c11">C11</h2>
<p>C语言标准委员会经过观察，发现 C99 标准的执行存在一定的问题。某些 C99 标准对许多应用场景是无用的，另外C语言需要进一步适应当前多核处理的趋势，为此 C11 标准被推出。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu/Debian从源码安装Python记录</title>
    <url>/2022/11/02/Ubuntu-Debian%E4%BB%8E%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85Python%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>先安装编译所需的依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update </span><br><span class="line">sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>从官网下载源码包，例如 <code>Python-3.10.7.tgz</code>，随便放到哪个目录下，解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf Python-3.10.7.tgz</span><br></pre></td></tr></table></figure>
<p>进入解压所得的文件夹，先生成Makefile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --enable-optimizations</span><br></pre></td></tr></table></figure>
<p>经过一段时间的刷屏后，进行编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j $(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>
<p><code>$(nproc)</code> 表示自动从环境中获取当前处理器的最大核心数。</p>
<p>完成编译后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make altinstall</span><br></pre></td></tr></table></figure>
<p>这样会将Python自动安装到 <code>/usr/local/bin</code> 和 <code>/usr/local/lib</code>。这时输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3.10</span><br></pre></td></tr></table></figure>
<p>应该能够呼出Python Interactive Shell了，最后建立软链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/bin/python3.10 /usr/bin/python3</span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/bin/python3.10 /usr/bin/python</span><br></pre></td></tr></table></figure>
<p>这样就可以通过 <code>python3</code> 或者 <code>python</code> 来调用Python3.10了。</p>
]]></content>
      <categories>
        <category>Technical Issues</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Debian</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能导论-概论</title>
    <url>/2022/11/02/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA-%E6%A6%82%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="人工智能的发展历程">人工智能的发展历程</h2>
<h3 id="人工智能的起源">人工智能的起源</h3>
<h4 id="图灵机">图灵机</h4>
<p>1936年英国数学家艾伦图灵提出了一种计算模型——图灵机，这种计算模型能够模拟人类所能完成的任何计算过程。</p>
<h4 id="图灵测试">图灵测试</h4>
<p>1950年图灵提出了图灵测试，让人与机器对话，如果人无法判断对话方为机器还是真实的人，那么认为这个机器通过了图灵测试，说明机器是能够思考的。</p>
<h4 id="达特茅斯会议">达特茅斯会议</h4>
<p>1956年8月31日，由约翰麦卡锡等人发起，首次提出了Artificial Intelligence概念。达特茅斯会议被誉为人工智能的开端。</p>
<span id="more"></span>
<h4 id="感知器">感知器</h4>
<p>弗兰克罗森布拉特于1958年首次定义感知器Perceptron。</p>
<ul>
<li>二元线性分类器</li>
<li>最简单的前向神经网络</li>
<li>单层人工神经网络</li>
</ul>
<h4 id="美国政府取得的成果">美国政府取得的成果</h4>
<p>美国政府在上世纪对人工智能进行了大量资金的投入。</p>
<ul>
<li>1959年，亚瑟塞缪尔开发的西洋跳棋程序战胜了当时的西洋棋大师。亚瑟塞缪尔被称为机器学习之父。</li>
<li>1960年约翰麦卡锡开发了LISP语言。</li>
<li>1964年-1966年，MIT人工智能实验室编写了世界上第一个聊天程序ELIZA。</li>
<li>1966年-1972年，斯坦福研究院人工智能中心研制了第一款移动机器人Shakey。</li>
</ul>
<h4 id="人工智能的发展陷入停滞">人工智能的发展陷入停滞</h4>
<ul>
<li>1969年Minsky&amp;Papert出版了《Perceptrons》，证明了感知机对于异或等线性不可分问题不适用</li>
<li>当时人们希望用人工智能解决的主要是一些搜索问题，但是由于现实中的许多问题计算量太大，人工智能被认为无法解决这些问题</li>
<li>1973年，James Lighthill向英国政府提交了一份研究报告，认为人工智能的研究已经失败了</li>
</ul>
<h3 id="人工智能的发展">人工智能的发展</h3>
<h4 id="专家系统">专家系统</h4>
<h5 id="mycin系统">MYCIN系统</h5>
<p>1971年由斯坦福大学研制，是早期医疗诊断专家系统中比较成功的应用实例，用于医学诊断感染性疾病。</p>
<h5 id="cyc项目">Cyc项目</h5>
<p>1984年由Cycorp公司开发维护，致力于将各领域知识综合集成，实现知识推理。</p>
<h5 id="局限性">局限性</h5>
<ul>
<li>特殊情况下无法做出创造性的回应</li>
<li>知识库中的错误可能导致错误的决策</li>
<li>维护成本太高</li>
<li>人类专家解决方案可能不同，而且带有主观性</li>
</ul>
<h4 id="反向传播bp算法">反向传播BP算法</h4>
<p>1982年由鲁梅尔哈特和辛顿提出，这是一种可以训练的算法，具有以下优点</p>
<ul>
<li>系统性地解决了多层神经网络隐藏层连接权重的学习问题</li>
<li>数学上给出了完整的推导</li>
<li>解决了简单感知机不能解决异或的问题</li>
</ul>
<p>目前绝大多数的神经网络模型都采用了BP网络，可以说BP网络是人工智能前向神经网络的核心。</p>
<h4 id="卷积神经网络">卷积神经网络</h4>
<p>1989年，勒丘恩和本吉奥提出了卷积神经网络Convolutional Neural Network，简称CNN。</p>
<ul>
<li>卷积计算</li>
<li>深度结构</li>
<li>处理大型图像出色</li>
<li>需要确定的参数更少</li>
</ul>
<p>CNN是图像识别领域的核心算法之一，在学习数据充足时有着稳定高效的表现。</p>
<h4 id="支持向量机svm">支持向量机SVM</h4>
<p>1995年由科尔特斯和瓦普尼克提出，可以使用Kernel Trick进行非线性分类，将输入隐式映射到高维特征空间中，以统计学为基础，和神经网络有明显的差异。</p>
<p>支持向量机广泛应用于</p>
<ul>
<li>模式识别</li>
<li>分类</li>
<li>回归分析</li>
</ul>
<h4 id="长短期记忆lstm">长短期记忆LSTM</h4>
<p>1989年由科尔特斯和施密德湖贝提出，适用于处理预测时间序列中间隔和延迟长的时间，自然语言处理NLP是循环神经网络RNN的典型应用。</p>
<p>RNN适用于</p>
<ul>
<li>文本生成</li>
<li>机器翻译</li>
<li>语音识别</li>
<li>生成图像描述</li>
<li>视频标记</li>
</ul>
<h4 id="深蓝国际象棋">深蓝——国际象棋</h4>
<p>1997年，IBM深蓝计算机战胜了世界象棋冠军卡斯帕罗夫。这成为了人工智能发展史上的里程碑事件。</p>
<h3 id="人工智能的爆发">人工智能的爆发</h3>
<p>上世纪末，人工智能又因为算力不足而陷入了短暂的停滞期。21世纪以来，得益于算力和数据的大规模增长，人工智能又迎来了爆发。</p>
<h4 id="深度学习">深度学习</h4>
<p>2006年，杰弗里辛顿在《Science》上提出了深层网络训练中梯度消失的解决方案，开启了深度学习在学术界和工业界的热潮。</p>
<h4 id="华人在人工智能爆发期中的贡献">华人在人工智能爆发期中的贡献</h4>
<ul>
<li>李飞飞提出了IMAGENET</li>
<li>吴恩达创办了COURSERA，致力于推广人工智能教育</li>
</ul>
<h4 id="iphone-siri">iPhone Siri</h4>
<ul>
<li>自然语言输入</li>
<li>调用系统自带应用</li>
<li>提供对话式的应答</li>
</ul>
<h4 id="alexnet">AlexNet</h4>
<p>由辛顿提出，主要特性有</p>
<ul>
<li>ReLU激活函数</li>
<li>Dropout技术</li>
<li>GPU加速模型</li>
</ul>
<h4 id="生成对抗网络gan">生成对抗网络GAN</h4>
<p>由伊恩古德费勒提出，采用两个神经网络训练而成。</p>
<ul>
<li>生成器（生成网络）- 用于学习生成新的可用案例</li>
<li>判别器（判别网络）- 用于生成案例或实际案例的评判学习</li>
</ul>
<p>可以处理无监督学习，实现博弈对抗学习；可以为数据集生成新的案例。</p>
<h4 id="alphago---深度强化学习">AlphaGo - 深度强化学习</h4>
<p>从2016年战胜李世石开始，称霸围棋圈。</p>
<h4 id="总结">总结</h4>
<p>截至目前，人工智能领域最大的突破进展——深度学习。这主要是因为算力和数据量都得到了大幅度的提升。</p>
<h2 id="人工智能的挑战和机遇">人工智能的挑战和机遇</h2>
<h3 id="人工智能近期进展">人工智能近期进展</h3>
<p>2015年，微软研究院的图像分类错误率低于人眼识别的错误率，达到4.94%。</p>
<p>2017年，微软的语音识别系统可以与专业的速记员比肩，错误率降低至5.1%。</p>
<p>2017年，Google的Deep Mind发布了文本至语音的世界范围内最强的生成模型——WaveNet，可以根据文本生成听起来相对真实的人类声音。</p>
<p>2019年，SQuAD阅读挑战赛中，BERT模型的阅读理解能力已经超越了人类。</p>
<p>ResNet是CNN的一个重要突破，解决了深度学习中层数越多性能越差的深度网络退化问题。</p>
<p>Transformer (BERT) 尝试引入注意力机制，加全连接层，进行序列建模，适用于并行化计算，在精度和性能上都优于RNN模型。Transformer从NLP领域走进了机器视觉的领域。</p>
<p>AlphaZero是Deep Mind于2018年发布的模型，通杀围棋、国际象棋和日本将棋，训练不到2天直接秒了AlphaGo。</p>
<p>2020年Deep Mind发布了AlphaFold2，在根据基因序列预测蛋白质结构的CASP比赛中位列第一。</p>
<h3 id="人工智能的挑战">人工智能的挑战</h3>
<h4 id="挑战1-数据标注">挑战1 数据标注</h4>
<p>数据标注极其枯燥耗时，但却是人工智能的基础。“有多少智能就需要多少人工”</p>
<h4 id="挑战2-硬件配置">挑战2 硬件配置</h4>
<p>一开始，人们都是用CPU进行机器学习的，但是随着算法越来越复杂，CPU已经无法满足算法的计算需求了。人们发现原本用于图像渲染的GPU，有着完美支持矢量运算的SIMD架构，进行机器学习的效率非常高。</p>
<p>FPGA也非常适用于机器学习。</p>
<h4 id="挑战3-软件架构">挑战3 软件架构</h4>
<p>环境安装、部署、测试、迭代改进、性能调优的工作非常繁琐复杂，因为会涉及到多个工具，甚至多个平台。为了加速机器学习开发，学界和业界开发了许多基础设施，也称为机器学习框架。</p>
<h4 id="挑战4-参数调节">挑战4 参数调节</h4>
<p>参数调节的目的就是搜索超参数的最佳配置，而超参数的搜索本质上是一个受计算能力和时间约束的迭代过程。</p>
<h4 id="挑战5-未知脆弱性">挑战5 未知脆弱性</h4>
<h4 id="挑战6-强人工智能">挑战6 强人工智能</h4>
<p>缺乏完善的基础理论。仍然停留在给定大量的训练数据，学习某些特定的任务。</p>
<p>深度学习是机器学习的一部分，机器学习是人工智能的一部分。</p>
<h3 id="人工智能的机遇">人工智能的机遇</h3>
<h3 id="拥抱人工智能">拥抱人工智能</h3>
<p>美国国家科学基金会将投入2.2亿美元建立NSF国家人工智能研究所。聚焦AI七大领域</p>
<ul>
<li>人机交互与协作</li>
<li>AI驱动的高级优化方法</li>
<li>AI驱动的信息基础设施</li>
<li>计算机网络系统AI技术</li>
<li>动态系统AI技术</li>
<li>AI增强学习</li>
<li>AI驱动的农业和食品创新</li>
</ul>
<h3 id="对ai的政策">对AI的政策</h3>
<h4 id="国家层面">国家层面</h4>
<ul>
<li>鼓励</li>
<li>扶持</li>
<li>推动</li>
</ul>
<p>国务院提出，2025年要让AI成为产业升级和经济转型的主要驱动力，2030年中国要成为世界主要AI创新中心。</p>
<h4 id="上海市层面">上海市层面</h4>
<p><strong>上海的优势</strong> 数据资源丰富、应用领域广泛、产业门类齐全</p>
<p>全面实施智能上海行动</p>
<ul>
<li>应用驱动</li>
<li>科技引领</li>
<li>产业协同</li>
<li>生态培育</li>
<li>人才集聚 推动人工智能成为上海建设“四个中心”和具有全球影响力的科技创新中心的新引擎，为上海建设卓越的全球城市注入新动能。</li>
</ul>
<h4 id="同济大学层面">同济大学层面</h4>
<p>同济大学成立了上海自主智能无人系统科学中心，主要围绕</p>
<ul>
<li>自主与感知</li>
<li>智能与涌现</li>
<li>群智与协同 三大科学问题</li>
</ul>
<p>研究方向包括：</p>
<ul>
<li>超材料感知</li>
<li>多尺度融合</li>
<li>自主与交互</li>
<li>多体与协同</li>
</ul>
<p>力争在自主智能无人系统领域取得一系列科研成果，推动上海成为人工智能创新策源高地、应用示范高地、制度供给高地和人才集聚高地。</p>
<h2 id="人工智能的竞技场自动驾驶">人工智能的竞技场——自动驾驶</h2>
<h3 id="自动驾驶技术的背景">自动驾驶技术的背景</h3>
<p>每年全球约有130万人死于道路交通事故，约90%的事故由驾驶员因素导致。2014年SAE发布了驾驶自动化分级L0-L5。我国的驾驶自动化分级参照了SAE的标准，结合中国国情进行相应的调整。</p>
<p>2016年，Google的自动驾驶部门成为WAYMO。2018年底，Waymo自动驾驶服务上线，其中一部分已经取消了安全员。</p>
<p>辅助驾驶方面，特斯拉的AutoPilot辅助驾驶里程突破了20亿英里。</p>
<h4 id="国外自动驾驶的尝试">国外自动驾驶的尝试</h4>
<h5 id="早期的半自动驾驶汽车">早期的半自动驾驶汽车</h5>
<p>1977年，日本筑波大学创造了第一辆半自动驾驶汽车。这辆车利用机器视觉，跟踪道路上的白色车道线。</p>
<p>1984年，国防高级研究计划局出现了DARPA自主地面车辆Autonomous Land Vehicle项目。此时已经使用了激光雷达、机器视觉技术。</p>
<h5 id="darpa无人驾驶汽车挑战赛">DARPA无人驾驶汽车挑战赛</h5>
<p>DARPA Grand Challenge沙漠挑战赛。2004年，没有一支参赛队伍完成比赛；2005年，Stanford大学的Standley车队获得冠军，这支车队也就是Sebastian Thrun的队伍。2007年，DARPA举办了城市挑战赛Urban Challenge，卡内基梅隆大学的Boss车队获得冠军。</p>
<h4 id="国内自动驾驶">国内自动驾驶</h4>
<p>2003年，我国自主研发的无人驾驶汽车在高速路上进行了第一次测试；2009年，中国开始举办智能车未来挑战大赛。</p>
<h3 id="自动驾驶中的ai技术">自动驾驶中的AI技术</h3>
<h4 id="自动驾驶的内涵及关键技术">自动驾驶的内涵及关键技术</h4>
<p>人类驾驶员：观察道路、交通、环境、车辆状态，经过大脑定位、决策、规划路径，操作方向盘、制动踏板、油门踏板、挡位，实现对车辆的控制。</p>
<p>通过算法，来进行感知、决策、规划、控制，部分或替代人类驾驶员，就是自动驾驶。</p>
<p>对了保证自动驾驶的安全，需要经过严格的测试验证和产品准入认证。</p>
<h5 id="关键技术总结">关键技术总结</h5>
<ul>
<li>感知</li>
<li>定位</li>
<li>决策</li>
<li>规划</li>
<li>控制</li>
<li>测试验证</li>
</ul>
<h4 id="算法架构">算法架构</h4>
<h5 id="分层递进式">分层递进式</h5>
<p>将算法分为</p>
<ul>
<li>环境感知</li>
<li>融合定位</li>
<li>推理决策</li>
<li>轨迹规划</li>
<li>运动控制</li>
<li>测试评价</li>
</ul>
<h5 id="端到端式">端到端式</h5>
<p>利用一个训练好的神经网络，隐藏中间的过程，从观察环境到输出控制指令的过程全部封装，是一个黑盒模型。</p>
<p>需要数据标注、超参数调整等一系列复杂的训练过程。</p>
<h4 id="感知融合">感知融合</h4>
<ul>
<li>端到端学习的激光点云物体检测</li>
<li>立体匹配网络的多传感器感知融合</li>
<li>卷积编码-解码模型的视觉感知</li>
</ul>
<p>感知是自动驾驶的基础。深度学习在感知领域取得了巨大成功，助力自动驾驶的发展。</p>
<h4 id="定位">定位</h4>
<ul>
<li>无监督深度学习的单目视觉里程计</li>
<li>深度卷积神经网络的匹配定位</li>
</ul>
<p>基于深度学习的SLAM技术，使得智能汽车精确知道自己所在的位置。</p>
<h4 id="决策">决策</h4>
<ul>
<li>深度学习的环形路口决策</li>
<li>强化学习的安全可行换道决策方法</li>
</ul>
<p>可信、可解释、可推理的AI技术将赋能自动驾驶汽车的智能决策。</p>
<h4 id="规划控制">规划控制</h4>
<ul>
<li>无模型学习的自动驾驶控制</li>
<li>模仿学习自动驾驶车辆视觉轨迹规划</li>
</ul>
<p>学习算法、数据机理混合算法，提供解决自动驾驶规划控制问题的新思路。</p>
<h4 id="端到端学习算法">端到端学习算法</h4>
<ul>
<li>卷积神经网络端到端学习算法</li>
<li>直接感知信息学习启发的自动驾驶</li>
</ul>
<p>发挥人工智能的学习潜能，聚焦实现完全自动驾驶的技术突破。</p>
<h4 id="测试验证">测试验证</h4>
<ul>
<li>深度学习+机器学习，创建真实的交通环境感知</li>
<li>多种测试工具协同</li>
</ul>
<p>应用AI技术，可实现复杂交通场景自动重构，加速测试。</p>
<h3 id="自动驾驶对ai的挑战">自动驾驶对AI的挑战</h3>
<h4 id="驾驶复杂性">1 驾驶复杂性</h4>
<ul>
<li>驾驶环境复杂（例如没有信号灯的交通环岛）</li>
<li>驾驶任务困难（例如飘移）</li>
</ul>
<p>自动驾驶技术的发展就是要在不同场景中去探索适配这些场景，从而增强自动驾驶系统的稳定性、可靠性。</p>
<h4 id="驾驶拟人性">2 驾驶拟人性</h4>
<p>机器人无法运动自如。</p>
<h4 id="驾驶可信性">3 驾驶可信性</h4>
<p>深度学习缺乏可解释性，AI在面对道德困境时无法做出判断，在伦理道德上有难以解决的问题。</p>
<h4 id="驾驶安全性">4 驾驶安全性</h4>
<p>如何判断自动驾驶汽车遭受网络攻击时也足够安全？</p>
<h4 id="驾驶智能性">5 驾驶智能性</h4>
<p>自动驾驶汽车足够智能吗？</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>卡尔曼滤波器基础</title>
    <url>/2022/11/02/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2%E5%99%A8%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="引入">引入</h2>
<p>卡尔曼滤波器是一种利用观测数据来修正先验数据的滤波器，适用于<em>线性高斯系统</em>。</p>
<p>以直线运动的车辆为例。记<span class="math inline">\(t\)</span>时刻的车辆位置为<span class="math inline">\(p_t\)</span>，速度为<span class="math inline">\(v_t\)</span>，加速度为<span class="math inline">\(u_t\)</span>，那么在纵向应有车辆运动学模型</p>
<p><span class="math display">\[
\left \{ \begin{aligned}
&amp; p_t = p_{t-1} + \Delta t \ v_{t-1} + \frac{(\Delta t)^2}{2} u_{t-1}  \\
&amp; v_t = v_{t-1} + \Delta t \ u_{t-1}
\end{aligned}
\right.
\]</span></p>
<p>令</p>
<p><span class="math display">\[
\boldsymbol x_t = \begin{pmatrix} p_t \\ v_t \end{pmatrix}
\]</span></p>
<p>有</p>
<p><span class="math display">\[
\boldsymbol x_t = \begin{pmatrix} 1 &amp; \Delta t \\ 0 &amp; 1 \end{pmatrix}\boldsymbol x_{t-1} + \begin{pmatrix} \displaystyle \frac{(\Delta t)^2}{2} \\ \Delta t \end{pmatrix}u_{t-1} \tag{1}
\]</span></p>
<p>当然，这样的运动学模型是非常简单的。一方面，只考虑了纵向的运动，而且假设加速度的测量是noise-free的；另一方面，由于采样数据是离散的，在<span class="math inline">\(\Delta t\)</span>时间内的加速度变化我们不得而知。因此，利用这样的运动学模型对车辆的运动状态进行估计，误差必然会随着时间的推移而增大。</p>
<span id="more"></span>
<p>既然估计得到的运动状态并不是精确的，那么我们需要修正一下式(1)中的符号。用<span class="math inline">\(\hat{\boldsymbol{x}}_t^-\)</span>表示先验估计状态，用<span class="math inline">\(\hat{\boldsymbol{x}}_t\)</span>表示最优估计状态，没有^符号的视为真值。需要注意的是，在本例中我们将加速度输入视作真值。那么式(1)可以改写为</p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t^- = \begin{pmatrix} 1 &amp; \Delta t \\ 0 &amp; 1 \end{pmatrix}\hat{\boldsymbol{x}}_{t-1} + \begin{pmatrix} \displaystyle \frac{(\Delta t)^2}{2} \\ \Delta t \end{pmatrix}u_{t-1} \tag{2}
\]</span></p>
<p>假设我们为这辆测试车安装了GNSS导航系统，可以利用RTK定位数据进行车辆位置的观测。不过GNSS只能观测车辆的位置，而不能观测车辆的速度，所以我们可以将观测到的状态量记为<span class="math inline">\(\boldsymbol{z}_t = \begin{pmatrix} z_p \\ z_v \end{pmatrix}\)</span>，将观测矩阵记为<span class="math inline">\(H=\begin{pmatrix} 1 &amp; 0 \end{pmatrix}\)</span>然后写出以下观测方程</p>
<p><span class="math display">\[
\boldsymbol{z}_t = H\boldsymbol{x}_t \tag{3}
\]</span></p>
<p>很显然，无论是先验估计得到的值还是观测得到的值都与真值有一定偏离，那么如何用观测到的状态量<span class="math inline">\(z_t\)</span>修正先验估计状态呢？下面就介绍一下卡尔曼滤波器。</p>
<h2 id="卡尔曼滤波器---估计部分">卡尔曼滤波器 - 估计部分</h2>
<p>卡尔曼滤波器总体上可以分为两个部分，估计部分与更新部分。先来讲估计部分。式(2)是卡尔曼滤波器估计部分的主体，不过我们需要考虑估计中可能存在的噪声，所以将式(2)修正为</p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t^- = \begin{pmatrix} 1 &amp; \Delta t \\ 0 &amp; 1 \end{pmatrix}\hat{\boldsymbol{x}}_{t-1} + \begin{pmatrix} \displaystyle \frac{(\Delta t)^2}{2} \\ \Delta t \end{pmatrix}u_{t-1} + w_t
\]</span></p>
<p>在卡尔曼滤波器的假设中，过程噪声服从高斯分布，即<span class="math inline">\(w_t \in \mathcal N (0, Q)\)</span>，其中<span class="math inline">\(Q\)</span>为过程噪声的协方差矩阵。</p>
<p>我们将<span class="math inline">\(\begin{pmatrix} 1 &amp; \Delta t \\ 0 &amp; 1 \end{pmatrix}\)</span>记作<span class="math inline">\(F_t\)</span>，将<span class="math inline">\(\begin{pmatrix} \displaystyle \frac{(\Delta t)^2}{2} \\ \Delta t \end{pmatrix}\)</span>记作<span class="math inline">\(B_t\)</span>，将上述公式一般化为</p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t^- = F_t \hat{\boldsymbol{x}}_{t-1} + B_t u_{t-1} + w_t \tag{4}
\]</span></p>
<p>其中<span class="math inline">\(F_t\)</span>被称为状态转移矩阵，<span class="math inline">\(B_t\)</span>被称为控制矩阵，<span class="math inline">\(u_t\)</span>被称为控制输入量。</p>
<p>估计部分的另一部分是先验估计状态的协方差矩阵<span class="math inline">\(P_t^-\)</span>，先给出公式</p>
<p><span class="math display">\[
P_t^- = FP_{t-1}F^T + Q \tag{5}
\]</span></p>
<p>其中，<span class="math inline">\(P_{t-1}\)</span>是最优估计状态<span class="math inline">\(\hat{\boldsymbol{x}}_{t-1}\)</span>的协方差矩阵。那么这个先验估计状态的协方差矩阵是怎么来的呢？首先，要引入一条公式</p>
<p><span class="math display">\[
cov(Ax, Ax) = Acov(x, x)A^T
\]</span></p>
<p>很显然，只需要将式(4)代入，即可得到</p>
<p><span class="math display">\[
\begin{aligned}
cov(\hat{\boldsymbol{x}}_t^-, \hat{\boldsymbol{x}}_t^-) &amp;= cov(F_t \hat{\boldsymbol{x}}_{t-1} + B_t u_{t-1} + w_t, F_t \hat{\boldsymbol{x}}_{t-1} + B_t u_{t-1} + w_t) \\
&amp;= cov(F_t \hat{\boldsymbol{x}}_{t-1}+w_t, F_t \hat{\boldsymbol{x}}_{t-1}+w_t) \\
&amp;= cov(F_t \hat{\boldsymbol{x}}_{t-1}, F_t \hat{\boldsymbol{x}}_{t-1}) + cov(w_t, w_t) \\
&amp;= F_t cov(\hat{\boldsymbol{x}}_{t-1}) F_t^T + Q \\
&amp;= F_t P_{t-1} F_t^T + Q
\end{aligned}
\]</span></p>
<p>请注意，这里之所以能够将<span class="math inline">\(cov(F_t \hat{\boldsymbol{x}}_{t-1} + w_t, F_t \hat{\boldsymbol{x}}_{t-1} + w_t)\)</span>拆分为<span class="math inline">\(cov(F_t \hat{\boldsymbol{x}}_{t-1}, F_t \hat{\boldsymbol{x}}_{t-1}) + cov(w_t, w_t)\)</span>是因为卡尔曼滤波器作用的对象是线性高斯系统；另外，控制量视为真值，不考虑其协方差。</p>
<p>总结一下，卡尔曼滤波器的估计部分，就是</p>
<ol type="1">
<li>t时刻先验估计状态 = 状态转移矩阵 X t-1时刻最优估计状态 + 控制矩阵 X 控制输入量 + 过程噪声</li>
<li>t时刻先验估计状态的协方差矩阵 = 状态转移矩阵 X t-1时刻最优估计状态的协方差矩阵 X 状态转移矩阵的转置 + 过程噪声的协方差矩阵</li>
</ol>
<h2 id="卡尔曼滤波器---更新部分">卡尔曼滤波器 - 更新部分</h2>
<p>下面讲卡尔曼滤波器的第二部分。先看一下式(3)，发现观测值和真值之间只有一个转换矩阵，没有考虑观测时可能存在的噪声，为此我们引入观测噪声<span class="math inline">\(v_t\)</span>，修正式(3)</p>
<p><span class="math display">\[
z_t = H \boldsymbol{x}_t + v_t \tag{6}
\]</span></p>
<p>假定观测噪声<span class="math inline">\(v_t\)</span>也服从高斯分布，即<span class="math inline">\(v_t \in \mathcal N(0, R)\)</span>，其中<span class="math inline">\(R\)</span>为观测噪声的协方差矩阵。</p>
<p>说到底，先验估计值和观测值都是存在误差的，卡尔曼滤波器实质上就是对先验估计值和观测值进行加权，从而得到一个最接近真值的最优估计值。那么这个加权值怎么来的，就是卡尔曼滤波器的重点。在卡尔曼滤波器的定义中，这个加权值称为<strong>卡尔曼增益</strong>，记为<span class="math inline">\(K_t\)</span>。先不管这个加权值怎么来的，假定我们已知卡尔曼增益<span class="math inline">\(K_t\)</span>，那么应当能够写出最优估计值的表达式</p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t = \hat{\boldsymbol{x}}_t^- + K_t(z_t - H\hat{\boldsymbol{x}}_t^-) \tag{7}
\]</span></p>
<p>式(7)是容易理解的，其实就是对观测值和经过转换的先验估计值作差，然后乘上卡尔曼增益，再加到原来的先验估计值上去。观测值和经过转换的先验估计值之差，其实就是观测值和先验估计值之间的差值，经过卡尔曼增益缩放之后，体现为观测值对先验估计值的影响，本质上就是一种加权操作。卡尔曼增益越大，那么观测值所占的权重就越大，体现为我们更信任观测值；反之，观测值占的权重越小，体现为我们更信任先验估计。</p>
<p>下面推导一下卡尔曼增益的表达式。在推导之前，先要说明卡尔曼增益的目标，是在经过卡尔曼增益的加权之后，使得真值与最优估计值之间的误差最小，即求<span class="math inline">\(argmin\{\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t\}\)</span>。这里我们假定所谓的<span class="math inline">\(e_t = \boldsymbol{x}_t - \hat{\boldsymbol{x}}_t\)</span>满足<span class="math inline">\(e_t \in \mathcal N(0, P_t)\)</span>，那么为了使得误差最小，其实就是要求协方差矩阵<span class="math inline">\(P_t\)</span>的trace最小。下面进行推导。</p>
<p><span class="math display">\[
\begin{aligned}
e_t &amp; = \boldsymbol{x}_t - \hat{\boldsymbol{x}}_t \\
&amp;=\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^- - K_t(z_t - H\hat{\boldsymbol{x}}_t^-) \\
&amp;= \boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^--K_t(H\boldsymbol{x}_t +v_t - H\hat{\boldsymbol{x}}_t^-) \\
&amp;= (I - K_tH)(\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^-) - K_t v_t \\
\end{aligned}
\]</span></p>
<p>记<span class="math inline">\(\hat{e}_t=\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^-\)</span>，则可将上式简化为</p>
<p><span class="math display">\[
e_t = (I-K_tH)\hat{e}_t - K_t v_t \tag{8}
\]</span></p>
<p>这里先引入一下协方差的计算公式</p>
<p><span class="math display">\[
cov(X, Y) = E[XY] - E[X]E[Y]
\]</span></p>
<p>那么对于<span class="math inline">\(e_t\)</span>来说，<span class="math inline">\(P_t=cov(e_t, e_t) = E(e_te_t^T)-E(e_t)^2=E(e_te_t^T)\)</span>。下面对协方差矩阵<span class="math inline">\(P_t\)</span>进行推演</p>
<p><span class="math display">\[
\begin{aligned}
P_t &amp;= E\{[(I - K_tH)\hat{e}_t-K_tv_t][\hat{e}_t^T(I-H^TK_t^T)-v_t^TK_t^T]\} \\
&amp;= E\{(I-K_tH)\hat{e}_t\hat{e}_t^T(I-H^TK_t^T)-(I-K_tH)\hat{e}_tv_t^TK_t^T-K_tv_t\hat{e}_t^T(I-H^TK_t^T)+K_tv_tv_t^TK_t^T\} \\
&amp;= E\{(I-K_tH)\hat{e}_t\hat{e}_t^T(I-H^TK_t^T) + K_tv_tv_t^TK_t^T\} \\
&amp; - (I-K_tH)E\{\hat{e}_t\}E\{v_t^T\}K_t^T - K_tE\{v_t\}E\{\hat{e}^T_t\}(I-H^TK_t^T)
\end{aligned}
\]</span></p>
<p>由于<span class="math inline">\(v_t \in \mathcal N (0, R)\)</span>，所以<span class="math inline">\(E\{v_t\}=0\)</span>，那么上式可以简化为</p>
<p><span class="math display">\[
\begin{aligned}
P_t &amp;=(I-K_tH)E\{\hat{e}_t\hat{e}_t^T\}(I-H^TK_t^T)+K_tE\{v_t v_t^T\}K_t^T \\
&amp;=(I - K_tH)E\{\hat{e}_t\hat{e}_t^T\}(I-H^TK_t^T)+K_tRK_t^T
\end{aligned}
\]</span></p>
<p>记<span class="math inline">\(\hat{P}_t=E(\hat{e}_t\hat{e}_t^T)\)</span>，则有</p>
<p><span class="math display">\[
P_t = (I-K_tH)\hat{P}_t(I-H^TK_t^T)+K_tRK_t^T \tag{9}
\]</span></p>
<p>接下来，我们所要做的就是最小化<span class="math inline">\(P_t\)</span>，即取<span class="math inline">\(\displaystyle\frac{d\ tr(P_t)}{dK_t}=0\)</span>，求<span class="math inline">\(K_t\)</span>。在这之前，先引入矩阵求导的两条公式。</p>
<p><span class="math display">\[
\frac{d\ tr(AB)}{dA}=B^T \tag{10}
\]</span></p>
<p><span class="math display">\[
\frac{d\ tr(ABA^T)}{dA} = 2AB \tag{11}
\]</span></p>
<p>利用式(10)和式(11)求<span class="math inline">\(\displaystyle\frac{d\ tr(P_t)}{dK_t}\)</span>，有下式</p>
<p><span class="math display">\[
\begin{aligned}
\frac{d\ tr(P_t)}{dK_t} &amp;= \frac{d \ tr(\hat{P}_t-K_tH\hat{P}_t-\hat{P}_tH^TK_t^T+K_tH\hat{P}_tH^TK_t^T+K_tRK_t^T)}{dK_t} \\
&amp;= -\hat{P}_t^TH^T-\hat{P}_t H^T+2K_tH\hat{P}_tH^T + 2K_tR \\
&amp;= -2 \hat{P}_tH^T+2K_tH\hat{P}_tH^T + 2K_tR\\
&amp;=0
\end{aligned}
\]</span></p>
<p>移项后可得</p>
<p><span class="math display">\[
K_t = \frac{\hat{P}_tH^T}{H\hat{P}_tH^T+R}
\]</span></p>
<p>由于真值是确定值，其方差为0，因此<span class="math inline">\(\hat{P}_t=var(\boldsymbol{x}_t - \hat{\boldsymbol{x}}_t^-)=var(-\hat{\boldsymbol{x}}_t^-)=var(\hat{\boldsymbol{x}}_t^-)=Q\)</span>，所以上式可改写为</p>
<p><span class="math display">\[
K_t = \frac{QH^T}{HQH^T+R} \tag{12}
\]</span></p>
<p>卡尔曼增益的推导至此结束。</p>
<p>很显然，<span class="math inline">\(Q\)</span>表征着先验估计的不确定性，<span class="math inline">\(R\)</span>表征着测量的不确定性。<span class="math inline">\(Q\)</span>越大，<span class="math inline">\(K_t\)</span>越大，观测值所占的比重越大，因为先验估计越不确定，就越相信观测值；相反，<span class="math inline">\(R\)</span>越大，<span class="math inline">\(K_t\)</span>越小，观测值所占的比重越小，因为观测值越不确定，就越不相信观测值。</p>
<p>与估计部分相同的，我们需要给出最优估计值的协方差矩阵<span class="math inline">\(P_t\)</span>。请注意这里的<span class="math inline">\(P_t\)</span>并不是<span class="math inline">\(e_t\)</span>的协方差矩阵，而是<span class="math inline">\(\hat{\boldsymbol{x}}_t\)</span>的协方差矩阵。</p>
<p><span class="math display">\[
\begin{aligned}
P_t &amp;= var(\hat{\boldsymbol{x}}_t)\\
&amp;= var(\hat{\boldsymbol{x}}_t^- + K_t(z_t - H\hat{\boldsymbol{x}}_t^-)) \\
&amp;= var(\hat{\boldsymbol{x}}_t^-+K_t(H\boldsymbol{x}_t+v_t - H\hat{\boldsymbol{x}}_t^-))\\
&amp;= var((I-K_tH)\hat{\boldsymbol{x}}_t^- + K_tH\boldsymbol{x}_t+K_tv_t) \\
&amp;= (I-K_tH)var(\hat{\boldsymbol{x}}_t^-)+var(K_tv_t) \\
&amp;= (I-K_tH)P_t^-+K_tR
\end{aligned}
\]</span></p>
<p>这里怎么推出来多了一项<span class="math inline">\(K_tR\)</span>呢？这有点搞，需要研究一下。</p>
<h2 id="卡尔曼滤波器总结">卡尔曼滤波器总结</h2>
<h3 id="估计部分两条式子">估计部分两条式子</h3>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t^- = F_t \hat{\boldsymbol{x}}_{t-1}+B_t u_{t-1}+w_{t-1} \tag{1}
\]</span></p>
<p><span class="math display">\[
P_t^- = F_t P_{t-1} F_t^T + Q_t \tag{2}
\]</span></p>
<h3 id="更新部分三条式子">更新部分三条式子</h3>
<p><span class="math display">\[
K_t = \frac{P_t^-H^T}{HP_t^-H^T + R_t} \tag{3}
\]</span></p>
<p><span class="math display">\[
\hat{\boldsymbol{x}}_t = \hat{\boldsymbol{x}}_t^- + K_t(z_t - H\hat{\boldsymbol{x}}_t^-) \tag{4}
\]</span></p>
<p><span class="math display">\[
P_t = (I-K_tH)P_t^- \tag{5}
\]</span></p>
]]></content>
      <categories>
        <category>Control Engineering</category>
      </categories>
      <tags>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析笔记-第二章 线性方程组的直接解法</title>
    <url>/2022/11/02/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90-%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E7%9B%B4%E6%8E%A5%E8%A7%A3%E6%B3%95/</url>
    <content><![CDATA[<h2 id="本章概述">本章概述</h2>
<p>我们发现，在科学计算中有非常多的问题到最后都会转变为对大规模线性方程组求解的问题，因此对线性方程组进行高效求解，是科学计算中非常重要的一个需求。</p>
<p>在本章的学习中，我们先了解一下线性方程组最基本的求解方法，叫做<strong>直接法</strong>求解线性方程组。在不考虑浮点误差的情况下，直接法求解可以得到线性方程组的精确解（在方程组有解的前提下），而且解法也很简单普适。但缺点是计算量比较大，对于大规模线性方程组的求解，我们一般不会利用直接法进行求解，而是会选择使用<strong>迭代法</strong>，通过逐次逼近的方式得到目标线性方程组的近似解。迭代法的具体内容会在后续的章节中涉及。</p>
<span id="more"></span>
<h2 id="高斯消去法">2.1 高斯消去法</h2>
<p>线性方程组的直接法，也叫做<strong>高斯消去法</strong>。对于一个<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>，若有线性方程组<span class="math inline">\(Ax=b\)</span>，可以使用高斯消去法对方程进行直接的求解，如下</p>
<h3 id="高斯消去法求解线性方程组">2.1.1 高斯消去法求解线性方程组</h3>
<p>高斯消去法求解线性方程组分为<strong>消去过程</strong>和<strong>回代过程</strong>。消去过程其实是将<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>转换为上三角矩阵的过程，回代过程则是利用转换好的上三角矩阵来求解<span class="math inline">\(x\)</span>的过程。</p>
<h4 id="消去过程">消去过程</h4>
<p>消去的目标：将目标列对角线以下元素全部消去为0。</p>
<p>消去的方法也很简单，对于<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>，假如我们想要将第一列除<span class="math inline">\(a_{11}\)</span>以外的元素全部消去为0，那么只需要将第一行元素乘上<span class="math inline">\(\displaystyle -\frac{a_{i1}}{a_{11}}\)</span>，然后加到第<span class="math inline">\(i\)</span>行上，那么第<span class="math inline">\(i\)</span>行的行首元素<span class="math inline">\(a_{i1}\)</span>就恰好被消去了。接下来，我们再对从<span class="math inline">\(a_{22}\)</span>开始的<span class="math inline">\(n-1\)</span>阶子阵进行同样的操作，经过有限次初等变换之后，就能够将一个<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>转换为一个上三角矩阵<span class="math inline">\(A^{(n)}\)</span>。</p>
<h4 id="回代过程">回代过程</h4>
<p>得到上三角矩阵<span class="math inline">\(A^{(n)}\)</span>后，从<span class="math inline">\(a^{(n)}_{nn}\)</span>开始，可以根据<span class="math inline">\(a^{(n)}_{nn}x_n=b_n\)</span>计算得到<span class="math inline">\(x_n\)</span>，然后从下往上，利用<span class="math inline">\(x_n, b_{n-1}, b_n, a^{n-1}_{(n-1)(n-1)}\)</span>计算得到<span class="math inline">\(x_{n-1}\)</span>，以此类推，最后计算得到整个向量<span class="math inline">\(x\)</span>。</p>
<h4 id="缺陷">缺陷</h4>
<ol type="1">
<li>计算量大。整个高斯消去法的计算量达到<span class="math inline">\(O(n^3)\)</span>，对于大规模线性方程组来说这个计算量是不可接受的。</li>
<li>行首元素不能是0，否则高斯消去法会异常中止；当然，我们可以通过交换行来处理，但也有可能出现当前列可用行首元素全为0的情况。</li>
<li>在考虑浮点误差的时候，如果选中行的行首元素比较小，那么可能会出现转换系数太大的情况，导致选中行乘上转换系数之后，某些元素变得太大，然后因为浮点数的“大数吃小数”现象而引发比较大的计算误差。</li>
</ol>
<h3 id="高斯消去法的选主元策略">2.1.2 高斯消去法的选主元策略</h3>
<p>行首元素，简称为主元，是可以通过交换行来进行主元的选取的。选主元策略可以有效解决上述缺陷中的第三点问题。在进行消去之前，我们将当前列中行首元素最大的行交换上来，以这一行的行首元素作为主元，那么转换系数必然小于等于1，这样可以避免当前行乘以转换系数之后出现元素太大的现象。这种修正之后的算法称为<strong>列主元素高斯消去法</strong>。</p>
<p>当然，假如原来的矩阵中元素的大小分布本来就差距极大，那么这总会导致引入浮点误差的时候，最后计算的精度比较差，但这不是高斯消去法本身的缺陷，而是浮点计算的缺陷。选主元策略能够最大程度上减小浮点误差对结果的影响，但并不能完全规避浮点误差。</p>
<h2 id="矩阵的三角分解">2.2 矩阵的三角分解</h2>
<h3 id="上三角阵与下三角阵">2.2.1 上三角阵与下三角阵</h3>
<p>前面提到，高斯消去法的消去过程本质上就是通过矩阵的初等变换，将一个任意的<span class="math inline">\(n\)</span>阶方阵转换为一个上三角阵。线性代数中，我们也学过，对一个矩阵进行某种类型的初等变换，等价于给这个矩阵乘上一个初等矩阵。所以，将<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>转换为上三角阵的过程，可以用矩阵乘法来描述。</p>
<p>需要进一步补充的是，消去过程中出现的初等矩阵，其实都是对角阵加上第<span class="math inline">\(i\)</span>列的转换系数构成的下三角矩阵。所以，上述过程可以描述为<span class="math inline">\(A\)</span>与<span class="math inline">\(n-1\)</span>个下三角矩阵做矩阵乘法的过程 <span class="math display">\[
L_{n-1}...L_2L_1A
\]</span> 最后的结果是一个上三角矩阵，我们可以将其记作<span class="math inline">\(U\)</span>。</p>
<p>需要说明的是，初等变换矩阵总是可逆的，所以矩阵<span class="math inline">\(A\)</span>其实可以写作 <span class="math display">\[
A=L_1^{-1}L_2^{-1}...L_{n-1}^{-1}U
\]</span> 令<span class="math inline">\(L=L_1^{-1}L_2^{-1}...L_{n-1}^{-1}\)</span>，有 <span class="math display">\[
A=LU
\]</span> 需要注意的是，下三角矩阵的逆仍然是下三角矩阵，两个下三角阵的乘积同样也仍然是下三角矩阵，所以<span class="math inline">\(L\)</span>也是一个下三角矩阵。另外，下三角阵<span class="math inline">\(L\)</span>的对角线元素全为1，所以<span class="math inline">\(L\)</span>还是一个单位下三角阵。</p>
<p>前面的下三角阵<span class="math inline">\(L_1\)</span>等，可以写为 <span class="math display">\[
L_i=
\begin{pmatrix}
1 &amp; &amp; &amp; &amp; &amp; &amp; &amp;  \\
&amp; 1 &amp; &amp; &amp; &amp; &amp; &amp; \\
&amp; &amp; ... &amp; &amp; &amp; &amp; \\
&amp; &amp; &amp; 1 \\
&amp; &amp; &amp; m_{i+1,i}&amp; 1 \\
&amp; &amp; &amp; m_{i+2,i} &amp; &amp; 1 \\
&amp; &amp; &amp; ... &amp; \\
&amp; &amp; &amp; m_{n,i} &amp; &amp; ... &amp; &amp; &amp; 1
\end{pmatrix}
\]</span> 可以证明，<span class="math inline">\(L_i^{-1}\)</span>为 <span class="math display">\[
L_i^{-1}=
\begin{pmatrix}
1 &amp; &amp; &amp; &amp; &amp; &amp; &amp;  \\
&amp; 1 &amp; &amp; &amp; &amp; &amp; &amp; \\
&amp; &amp; ... &amp; &amp; &amp; &amp; \\
&amp; &amp; &amp; 1 \\
&amp; &amp; &amp; -m_{i+1,i}&amp; 1 \\
&amp; &amp; &amp; -m_{i+2,i} &amp; &amp; 1 \\
&amp; &amp; &amp; ... &amp; \\
&amp; &amp; &amp; -m_{n,i} &amp; &amp; ... &amp; &amp; &amp; 1
\end{pmatrix}
\]</span> 上述初等矩阵的逆之积<span class="math inline">\(L\)</span>可以证明是 <span class="math display">\[
L=\begin{pmatrix}
1 \\
-m_{21} &amp; 1 \\
-m_{31} &amp; -m_{32} &amp; 1 \\
&amp; &amp; &amp; ... \\
... &amp; &amp; &amp; &amp; 1 \\
-m_{n1} &amp; ... &amp; &amp; &amp; &amp; 1
\end{pmatrix}
\]</span></p>
<p>也就是说，任一<span class="math inline">\(n\)</span>阶方阵<span class="math inline">\(A\)</span>，都能够写作一个单位下三角矩阵<span class="math inline">\(L\)</span>和一个上三角阵<span class="math inline">\(U\)</span>的乘积。这个分解过程称为Doolittle分解，或直接称为<span class="math inline">\(LU\)</span>分解。</p>
<h4 id="doolittle分解">Doolittle分解</h4>
<p>Doolittle分解是<span class="math inline">\(LU\)</span>分解最常见的分解形式，注意<span class="math inline">\(L\)</span>是<strong>单位下三角阵</strong>，而<span class="math inline">\(U\)</span>是普通的上三角阵。</p>
<h4 id="crout分解">Crout分解</h4>
<p>Crout分解也是一种<span class="math inline">\(LU\)</span>分解，但和Doolittle分解刚好相反，这里<span class="math inline">\(U\)</span>是<strong>单位上三角阵</strong>，而<span class="math inline">\(L\)</span>是普通的下三角阵。</p>
<h4 id="ldu分解"><span class="math inline">\(LDU\)</span>分解</h4>
<p>可以发现，在<span class="math inline">\(LU\)</span>分解中，总归是只有一个矩阵对角线全1；实际上我们也可以将矩阵<span class="math inline">\(A\)</span>拆分成三个矩阵，使得下三角阵<span class="math inline">\(L\)</span>和上三角阵<span class="math inline">\(U\)</span>均为单位三角阵，原来那个非单位对角阵的对角线元素提取出来变为一个对角阵<span class="math inline">\(D\)</span>即可，这被称为<span class="math inline">\(LDU\)</span>分解。</p>
<h3 id="lu分解的性质">2.2.2 <span class="math inline">\(LU\)</span>分解的性质</h3>
<h4 id="前提条件">前提条件</h4>
<p>对方阵<span class="math inline">\(A\)</span>进行<span class="math inline">\(LU\)</span>分解本质上和高斯消去法并没有什么不同，所以也要求方阵<span class="math inline">\(A\)</span>的所有顺序余子式均非0。这个条件是充要的。</p>
<h4 id="唯一性">唯一性</h4>
<p>给定方阵<span class="math inline">\(A\)</span>的<span class="math inline">\(LU\)</span>分解是唯一的，证明很简单，利用三角阵和单位三角阵的性质即可，如下</p>
<p>假如方阵<span class="math inline">\(A\)</span>存在两组<span class="math inline">\(LU\)</span>分解，分别记作<span class="math inline">\(A=LU\)</span>，<span class="math inline">\(A=L_1U_1\)</span>，那么有 <span class="math display">\[
LU=L_1U_1
\]</span> 可以证明，<span class="math inline">\(L\)</span>和<span class="math inline">\(U\)</span>都是可逆阵，所以有 <span class="math display">\[
L_1^{-1}L=U_1U^{-1}
\]</span> 单位下三角阵的乘积仍然是单位下三角阵，上三角阵的乘积仍然是上三角阵，因此上式要成立，必须取等式左右两边可能情况的交集，也就是要找到一种矩阵，既是单位下三角阵，同时又是上三角阵，那么这个阵只能是单位对角阵，也就是说<span class="math inline">\(L_1^{-1}L=U_1U^{-1}=I\)</span>。那么显然，<span class="math inline">\(L_1=L\)</span>，<span class="math inline">\(U_1=U\)</span>，所以方阵<span class="math inline">\(A\)</span>的<span class="math inline">\(LU\)</span>分解唯一性得证。</p>
<h3 id="lu分解的作用">2.2.3 <span class="math inline">\(LU\)</span>分解的作用</h3>
<p><span class="math inline">\(LU\)</span>分解的作用，主要还是提供一种除了高斯消去法以外的线性方程组解法。单位下三角阵<span class="math inline">\(L\)</span>和上三角阵<span class="math inline">\(U\)</span>的构造过程，本质上就是高斯消去法的消去过程；利用这两个三角阵进行<span class="math inline">\(x\)</span>求解的过程，本质上就是高斯消去法的回代过程。</p>
<p>另外，对于一些特殊的方阵，<span class="math inline">\(LU\)</span>分解可以简化高斯消去法的计算过程。</p>
<h3 id="cholesky分解">2.2.4 Cholesky分解</h3>
<p>Cholesky分解就是一种可以简化特殊线性方程组求解过程的分解方法。</p>
<p>Cholesky分解面向的对象是对称正定矩阵。这里，补充一下对称正定矩阵的定义。对称正定矩阵，指的是这样一种对称方阵<span class="math inline">\(M\)</span>，对于任意的非0实系数向量<span class="math inline">\(z\)</span>，都满足<span class="math inline">\(z^TMz&gt;0\)</span>。</p>
<p>如果我们将对称正定矩阵<span class="math inline">\(M\)</span>进行<span class="math inline">\(LDU\)</span>分解，可以得到 <span class="math display">\[
M = LDU
\]</span> 由对称正定矩阵的对称性，可得 <span class="math display">\[
M=M^T
\]</span> 即 <span class="math display">\[
LDU=U^TDL^T
\]</span> 由<span class="math inline">\(LU\)</span>分解的唯一性，可知 <span class="math display">\[
L=U^T
\]</span> 所以，对称正定矩阵<span class="math inline">\(M\)</span>可以分解为 <span class="math display">\[
M=LDL^T
\]</span> 如果我们将对角阵<span class="math inline">\(D\)</span>进行开方处理，那么对称正定矩阵<span class="math inline">\(M\)</span>可以改写为 <span class="math display">\[
M=LD^{\frac{1}{2}}(LD^{\frac{1}{2}})^T
\]</span> 记<span class="math inline">\(G=LD^{\frac{1}{2}}\)</span>，有 <span class="math display">\[
M=GG^T
\]</span> 由于<span class="math inline">\(L\)</span>是一个单位下三角阵，<span class="math inline">\(D^{\frac{1}{2}}\)</span>是一个对角阵，所以<span class="math inline">\(G\)</span>是一个对角线非0的下三角阵。需要特别强调的是，Cholesky分解仅适用于对称正定矩阵，对非正定矩阵是不适用的。</p>
<p>Cholesky分解为对称正定矩阵的线性方程组求解节省了大量的计算量，这也是<span class="math inline">\(LU\)</span>分解的意义所在。</p>
<h3 id="三对角矩阵的lu分解">2.2.5 三对角矩阵的<span class="math inline">\(LU\)</span>分解</h3>
<p>三对角矩阵也是科学计算中一种非常常见的矩阵，其形式如 <span class="math display">\[
A=\begin{pmatrix}
b_1 &amp; c_1 \\
a_2 &amp; b_2 &amp; c_2 \\
&amp; a_3 &amp; b_3 &amp; c_3 \\
&amp; &amp; &amp; ... &amp; \\
&amp; &amp; &amp; &amp; ... &amp; \\
&amp; &amp; &amp; &amp; a_{n-1} &amp; b_{n-1} &amp; c_{n-1} \\
&amp; &amp; &amp; &amp; &amp;a_n &amp; b_n \\
\end{pmatrix}
\]</span> 假如我们需要求解<span class="math inline">\(Ax=d\)</span>，那么可以对<span class="math inline">\(A\)</span>进行Crout分解，将其转换为下三角阵<span class="math inline">\(L\)</span>和单位上三角阵<span class="math inline">\(U\)</span>，如下 <span class="math display">\[
L = \begin{pmatrix}
l_1 \\
v_2 &amp; l_2 \\
&amp; &amp; ... \\
&amp; &amp; &amp; ... \\
&amp; &amp; &amp; v_n &amp; l_n \\
\end{pmatrix}
\]</span> <span class="math display">\[
U = \begin{pmatrix}
1 &amp; u_1 \\
&amp; 1 &amp; u_2 \\
&amp; &amp; &amp; ... \\
&amp; &amp; &amp; 1 &amp; u_{n-1} \\
&amp; &amp; &amp; &amp; 1
\end{pmatrix}
\]</span> 教材中，将这种三对角阵的求解方法称为追赶法，其实就是消去和回代，我不想用这种很无厘头的说法，还是用消去和回代来说明这两个流程。</p>
<h4 id="中间变量y的由来">中间变量<span class="math inline">\(y\)</span>的由来</h4>
<p>首先，我们需要明确，<span class="math inline">\(A=LU\)</span>，所以要求的方程组为<span class="math inline">\(LUx=d\)</span>，一般来说，我们会先令<span class="math inline">\(y=Ux\)</span>，然后求<span class="math inline">\(Ly=d\)</span>，所以要声明一个中间变量<span class="math inline">\(y\)</span>，这个<span class="math inline">\(y\)</span>是一个n阶向量。</p>
<h4 id="消去过程-1">消去过程</h4>
<p>由<span class="math inline">\(A=LU\)</span>和<span class="math inline">\(Ly=d\)</span>可以整理得到 <span class="math display">\[
\begin{aligned}
&amp; a_i = v_i \\
&amp; b_i = l_i + v_i u_{i-1}\\
&amp; c_i = l_iu_i\\
&amp; d_i = v_iy_{i-1} + l_iy_i
\end{aligned}
\]</span> 其中，<span class="math inline">\(a_i, b_i, c_i, d_i\)</span>均为已知量，所以可以移项得到 <span class="math display">\[
\begin{aligned}
&amp;l_i = b_i - a_iu_{i-1}\\
&amp;u_i = \frac{c_i}{l_i} \\
&amp;y_i = \frac{d_i - a_iy_{i-1}}{l_i}
\end{aligned}
\]</span> 根据上面这些关系，可以递推得到<span class="math inline">\(L\)</span>，<span class="math inline">\(U\)</span>以及<span class="math inline">\(y\)</span>。</p>
<h4 id="回代过程-1">回代过程</h4>
<p>根据<span class="math inline">\(y=Ux\)</span>，可以得到 <span class="math display">\[
x_i+u_ix_{i+1}=y_i
\]</span> 那么，先求得<span class="math inline">\(x_n=y_n\)</span>，然后从下向上进行<span class="math inline">\(x\)</span>的求解即可 <span class="math display">\[
x_i = y_i - u_ix_{i+1}
\]</span></p>
]]></content>
      <categories>
        <category>Mathematics</category>
      </categories>
      <tags>
        <tag>Numerical Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析笔记-第三章 多项式插值</title>
    <url>/2022/11/02/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%8F%92%E5%80%BC/</url>
    <content><![CDATA[<h2 id="本章概述">本章概述</h2>
<p>在实际应用中，我们经常会遇到利用多项式拟合去拟合一组数据，从而进行数据预测的情况。这个方法在数值计算中被称为多项式插值。本章，主要介绍多项式插值的基本概念，Lagrange插值多项式，Newton插值多项式，插值多项式的误差分析以及Hermite插值多项式。</p>
<span id="more"></span>
<h2 id="插值多项式的基本概念">3.1 插值多项式的基本概念</h2>
<h3 id="插值多项式的定义">3.1.1 插值多项式的定义</h3>
<p>假如在区间<span class="math inline">\([a,b]\)</span>上，有<span class="math inline">\(n+1\)</span>个函数<span class="math inline">\(f(x)\)</span>的采样点<span class="math inline">\(x_0, x_1, ..., x_n\)</span>，以及相应的函数值<span class="math inline">\(f(x_0), f(x_1), ..., f(x_n)\)</span>，那么存在一个不超过<span class="math inline">\(n\)</span>次的多项式<span class="math inline">\(p_n(x)\)</span>，满足<span class="math inline">\(p_n(x_0) = f(x_0), p_n(x_1) = f(x_1), ..., p_n(x_n) = f(x_n)\)</span>。这个多项式<span class="math inline">\(p_n(x)\)</span>称为函数<span class="math inline">\(f(x)\)</span>在区间<span class="math inline">\([a,b]\)</span>上的<span class="math inline">\(n\)</span>次插值多项式。</p>
<p>这里有几个概念：</p>
<ul>
<li>采样点<span class="math inline">\(x_0, x_1, ..., x_n\)</span>被称为<strong>插值节点</strong></li>
<li>区间<span class="math inline">\([a,b]\)</span>被称为<strong>插值区间</strong></li>
</ul>
<h3 id="插值多项式的存在性与唯一性">3.1.2 插值多项式的存在性与唯一性</h3>
<p><span class="math inline">\(f(x)\)</span>在给定插值节点与插值区间的情况下，<span class="math inline">\(n\)</span>次插值多项式是存在且唯一的。这个性质可以通过Vandermonde法得证。</p>
<h4 id="vandermonde法">Vandermonde法</h4>
<p>如果我们将插值节点代入插值多项式，并将系数<span class="math inline">\(a\)</span>视作未知量，可以得到<span class="math inline">\(n+1\)</span>条方程形成的<span class="math inline">\(n+1\)</span>元线性方程组，例如</p>
<p><span class="math display">\[
\begin{aligned}
&amp;a_0 + a_1x_0+a_2x_0^2+...+a_nx_0^n=y_0 \\
&amp;a_0 + a_1x_1 + a_2x_1^2+ ... + a_nx_1^n = y1\\
&amp;...\\
&amp;a_0+a_1x_n+a_2x_n^2+...+a_nx_n^n=y_n
\end{aligned}
\]</span> 可以将<span class="math inline">\(x_i\)</span>看作系数矩阵，如 <span class="math display">\[
\begin{pmatrix}
1 &amp; x_0 &amp; x_0^2 &amp; ... &amp; x_0^n \\
1 &amp; x_1 &amp; x_1^2 &amp; ... &amp; x_1^n \\
... &amp; &amp; &amp; ...\\
1 &amp; x_n &amp; x_n^2 &amp; ... &amp; x_n^n
\end{pmatrix}
\]</span> 上述矩阵的行列式就是Vandermonde行列式 <span class="math display">\[
\begin{vmatrix}
1 &amp; x_0 &amp; x_0^2 &amp; ... &amp; x_0^n \\
1 &amp; x_1 &amp; x_1^2 &amp; ... &amp; x_1^n \\
... &amp; &amp; &amp; ...\\
1 &amp; x_n &amp; x_n^2 &amp; ... &amp; x_n^n
\end{vmatrix}=\prod_{i=1}^n\prod_{j=0}^{i-1}(x_i-x_j)
\]</span> 书上没太讲明白Vandermonde法具体是怎么证明插值多项式的存在性和唯一性的。存在性大概就是，对于上面这个Vandermonde矩阵，总归存在一个子阵的行列式不为0，那么这个子阵对应的不大于n阶的插值多项式就必然存在。唯一性的证明不太清楚。</p>
<h2 id="lagrange插值多项式">3.2 Lagrange插值多项式</h2>
<h3 id="插值多项式的基函数法">3.2.1 插值多项式的基函数法</h3>
<p>线性代数中可以证明，在<span class="math inline">\(n\)</span>次的线性空间中，插值多项式的基是不唯一的，也就是说同一个插值多项式可以用多组基函数的组合来表示。也就是说，我们可以定义<span class="math inline">\(n+1\)</span>个线性无关的多项式<span class="math inline">\(\varphi_0(x), \varphi_1(x), ..., \varphi_n(x)\)</span>，作为插值多项式的基函数，通过这些基函数的线性组合来表示一个插值多项式。 <span class="math display">\[
p_n(x) = a_0\varphi_0(x)+a_1\varphi_1(x)+a_2\varphi_2(x)+...+a_n\varphi_n(x)
\]</span> 最基础的基函数就是<span class="math inline">\(\varphi_i(x)=x^i\)</span>，也就是前面的插值多项式定义中的写法。接下来，我们会介绍Lagrange基函数以及用Lagrange基函数的线性组合表示的Lagrange插值多项式。</p>
<h3 id="lagrange插值多项式-1">3.2.2 Lagrange插值多项式</h3>
<h4 id="lagrange基函数">Lagrange基函数</h4>
<p>Lagrange基函数的定义出于这样的一种想法：能不能找一种基函数，使得参数恰好与某一个节点相等的时候，函数值为1，其他情况下函数值为0呢？这就相当于我们基于插值节点，找到一组正交的基函数，从而满足了线性无关条件。</p>
<p>满足这个条件的基函数其实也很好构造。参数非指定节点的时候，基函数的某一乘项恰好为0；参数为指定节点的时候，基函数的分子分母恰好相等。这样就可以满足上面的条件了。这个函数可以表示为 <span class="math display">\[
l_k(x) = \prod_{i=0\&amp;i\neq k}^{n}\frac{(x-x_i)}{(x_k-x_i)}
\]</span> 那么，<span class="math inline">\(x\neq x_k\)</span>时，分子上总有一项为0，因此结果为0；<span class="math inline">\(x=x_k\)</span>时，分子分母相同，因此结果为1。</p>
<h4 id="lagrange插值多项式-2">Lagrange插值多项式</h4>
<p>以Lagrange基函数为基，可以写出Lagrange插值多项式 <span class="math display">\[
L_n(x)=a_0l_0(x)+a_1l_1(x)+...+a_nl_n(x)
\]</span> Lagrange插值多项式的系数很容易求得，因为代入某一个插值节点的时候，其他的Lagrange基函数全为0，对应的Lagrange基函数为1，所以只剩下一个系数，也就是说 <span class="math display">\[
L_n(x_i) = a_i = y_i
\]</span> 所以Lagrange插值多项式实际上可以写成 <span class="math display">\[
L_n(x)=y_0l_0(x)+y_1l_1(x)+...+y_nl_n(x)
\]</span></p>
<p>习惯上，我们将一次的Lagrange插值多项式称为Lagrange线性插值，将二次的称为Lagrange二次插值或者抛物线插值。 <span class="math display">\[
L_1(x)=y_0\frac{x-x_1}{x_0-x_1}+y_1\frac{x-x_0}{x_1-x_0}
\]</span> <span class="math display">\[
L_2(x)=y_0\frac{(x-x_1)(x-x_2)}{(x_0-x_1)(x_0-x_2)}+y_1\frac{(x-x_0)(x-x_2)}{(x_1-x_0)(x_1-x_2)}+y_2\frac{(x-x_0)(x-x_1)}{(x_2-x_0)(x_2-x_1)}
\]</span> 可以看出，Lagrange插值多项式的对称性还是很明显的。</p>
<h4 id="lagrange插值多项式的误差估计">Lagrange插值多项式的误差估计</h4>
<p>写出了Lagrange插值多项式之后，我们希望能够估计用Lagrange插值多项式进行多项式拟合的结果误差，也就是希望能够求出插值余项<span class="math inline">\(R_n(x)\)</span>。首先，给出插值余项多项式的定义 <span class="math display">\[
R_n(x)=f(x)-L_n(x)
\]</span> 这个定义的重要之处在于，明确了<span class="math inline">\(R_n(x)\)</span>至少有<span class="math inline">\(x+1\)</span>个零点，因为在插值节点上<span class="math inline">\(f(x_i)=L_n(x_i)\)</span>。</p>
<p>因此，我们可以设<span class="math inline">\(R_n(x)=K(x)\prod_{i=0}^n(x-x_i)\)</span>，或者将其简写为<span class="math inline">\(R_n(x)=K(x)\Pi(x)\)</span>。</p>
<p>接下来，引入一个辅助函数<span class="math inline">\(\varphi(x) = R_n(x)-K(x)\Pi(x)=f(x)-L_n(x)-K(x)\Pi(x)\)</span>，如果将<span class="math inline">\(x\)</span>视作插值区间上的一个定点，则<span class="math inline">\(\varphi(t)=f(t)-L_n(t)-K(x)\Pi(t)\)</span>在插值区间上有<span class="math inline">\(n+2\)</span>个零点。根据罗尔定理，<span class="math inline">\(\varphi^{(n+1)}(t)\)</span>在插值区间上必有1个零点。我们将这个零点记为<span class="math inline">\(t=\xi\)</span>，那么可以得到 <span class="math display">\[
\varphi^{(n+1)}(\xi)=0
\]</span> 由于<span class="math inline">\(L_n(t)\)</span>是不大于<span class="math inline">\(n\)</span>阶的多项式，因此<span class="math inline">\(L_n^{(n+1)}(t)=0\)</span>；<span class="math inline">\(\Pi(t)\)</span>则是一个<span class="math inline">\(n+1\)</span>阶多项式，因此<span class="math inline">\(\Pi^{(n+1)}(t)=(n+1)!\)</span>，那么由<span class="math inline">\(\varphi^{(n+1)}(\xi)=0\)</span>可以推得 <span class="math display">\[
f^{(n+1)}(\xi)=K(x)(n+1)!
\]</span> 所以，<span class="math inline">\(K(x)=\displaystyle\frac{f^{(n+1)}(\xi)}{(n+1)!}\)</span>，那么整个Lagrange插值多项式的插值余项就可以写为 <span class="math display">\[
R_n(x)=\frac{f^{(n+1)}(\xi)}{(n+1)!}\Pi(x)
\]</span> Lagrange插值余项并不是一个精确的值，因为<span class="math inline">\(\xi\)</span>是不知道的，但我们可以根据余项的表达式进行误差上界的估计 <span class="math display">\[
R_n(x)\leq\frac{max|f^{(n+1)}(x)|}{(n+1)!}\Pi(x)
\]</span></p>
<h2 id="newton插值多项式">3.3 Newton插值多项式</h2>
<h3 id="newton基函数">3.3.1 Newton基函数</h3>
<p>Newton基函数的定义为 <span class="math display">\[
n_0(x)=1
\]</span> <span class="math display">\[
n_j(x)=\prod_{i=0}^{j-1}(x-x_i),\ j&gt;0
\]</span></p>
<h3 id="newton插值多项式-1">3.3.2 Newton插值多项式</h3>
<p>Newton插值多项式是Newton基函数的线性组合，即 <span class="math display">\[
N_n(x)=a_0+a_1(x-x_0)+a_2(x-x_0)(x-x_1)+...+a_n\prod_{i=0}^{n-1}(x-x_i)
\]</span> Newton插值多项式比较有趣的地方在于系数。 <span class="math display">\[
y_0 = a_0
\]</span> <span class="math display">\[
y_1 = y_0 + a_1(x_1-x_0)
\]</span> 那么 <span class="math display">\[
a_1 = \frac{y_1-y_0}{x_1-x_0}
\]</span> 那么 <span class="math display">\[
a_2 = \frac{\displaystyle\frac{y_2-y_0}{x_2-x_0}-\frac{y_1-y_0}{x_1-x_0}}{x_2-x_1}
\]</span> 这个系数很明显是有规律的，这个规律可以用差商来简化描述。</p>
<h4 id="差商和newton插值多项式系数的关系">差商和Newton插值多项式系数的关系</h4>
<p>我们将<span class="math inline">\(f[x_i, x_k]=\displaystyle\frac{f_i-f_k}{x_i-x_k}\)</span>记为<span class="math inline">\(f(x)\)</span>关于节点<span class="math inline">\(x_i, x_k\)</span>的一阶差商，将<span class="math inline">\(f[x_i, x_j,x_k] = \displaystyle\frac{\displaystyle\frac{f_i-f_k}{x_i-x_k}-\frac{f_i-f_j}{x_i-x_j}}{x_k-x_j}=\frac{f[x_i, x_k]-f[x_i, x_j]}{x_k-x_j}\)</span>记为<span class="math inline">\(f(x)\)</span>关于节点<span class="math inline">\(x_i, x_j, x_k\)</span>的二阶差商。</p>
<p>可以证明，Newton插值多项式的第<span class="math inline">\(n\)</span>阶系数<span class="math inline">\(a_n\)</span>就是<span class="math inline">\(f(x)\)</span>关于<span class="math inline">\(n\)</span>个节点的<span class="math inline">\(n\)</span>阶差商。</p>
<h4 id="差商的性质">差商的性质</h4>
<ol type="1">
<li>差商可以表示为函数值<span class="math inline">\(f(x_i)\)</span>的线性组合</li>
<li>差商所含节点具有对称性，交换两个节点的位置并不会影响最终的结果</li>
<li>若<span class="math inline">\(f(x)\)</span>在插值区间上<span class="math inline">\(n\)</span>阶可导，那么插值区间上存在一点<span class="math inline">\(\xi\)</span>使得<span class="math inline">\(f[x_0, x_1, ...,x_n]=\displaystyle\frac{f^{(n)}(\xi)}{n!}\)</span>成立</li>
</ol>
<p>关于第一条性质，可以用下式表示 <span class="math display">\[
f[x_0, x_1, ..., x_k] = \sum_{j=0}^{k}\frac{f(x_j)}{\prod_{i=0\&amp;i\neq j}^{k}(x_j-x_i)}
\]</span> 关于第三条性质，将在Newton插值多项式的余项计算中给出证明。</p>
<h3 id="newton插值多项式的余项">3.3.3 Newton插值多项式的余项</h3>
<p>Newton插值多项式相较于Lagrange插值多项式，有一个非常明显的好处：当插值阶数上升时，除了最高阶项以外，其他的所有项都不会发生变化。所以，Newton插值多项式提高插值阶数非常灵活。假定有一<span class="math inline">\(n\)</span>阶Newton插值多项式<span class="math inline">\(N_n(x)\)</span>，如果我们考虑上升一阶插值阶数，可以得到<span class="math inline">\(N_{n+1}(x)\)</span>，此时比较其差值 <span class="math display">\[
N_{n+1}(x)-N_n(x)=f[x_0, x_1, ..., x_n, x]\prod_{i=0}^{n}(x-x_i)
\]</span> 假定<span class="math inline">\(x\)</span>也是一个节点，将上式换元为 <span class="math display">\[
N_{n+1}(t) - N_n(t)=f[x_0, x_1, ..., x_n, x]\Pi_{i=0}^n(t-x_i)
\]</span> 由于<span class="math inline">\(x\)</span>是一个节点，所以有<span class="math inline">\(N_{n+1}(x)=f(x)\)</span>，那么上式可以写作 <span class="math display">\[
f(x)=N_n(x) + f[x_0, x_1, ..., x_n, x] \Pi_{i=0}^n(x-x_i)
\]</span> 那么余项其实就是 <span class="math display">\[
R_n(x)=f(x) - N_n(x) = f[x_0, x_1, ..., x_n, x]\Pi_{i=0}^n(x-x_i)
\]</span> 也就是说，通过Newton插值多项式能够直接得到插值余项的表达式。</p>
<p>注意，<span class="math inline">\(n\)</span>阶插值多项式具有唯一性，那么余项也具有唯一性，所以Newton插值多项式的余项应该和Lagrange插值多项式的余项相等，那么 <span class="math display">\[
f[x_0, x_1, ..., x_n,x]\Pi_{i=0}^n(x-x_i)=\frac{f^{(n+1)}(\xi)}{(n+1)!}\Pi_{i=0}^n(x-x_i)
\]</span> 注意，这里的差商是<span class="math inline">\(n+2\)</span>项。所以，我们可以证明得到差商的第三个性质，即 <span class="math display">\[
f[x_0, x_1, ..., x_n]=\frac{f^{(n)}(\xi)}{n!}
\]</span></p>
<h3 id="等距节点与差分">3.3.4 等距节点与差分</h3>
<p>在实际应用中，我们一般会按照固定的间隔取插值节点，即相邻的两个插值节点的差值是固定的，这个差值称为步长，一般用符号<span class="math inline">\(h\)</span>来表示。</p>
<p>若有 <span class="math display">\[
\Delta f_i = f(x_i + h) - f(x_i) = f_{i+1}- f_i
\]</span> 称这个<span class="math inline">\(\Delta f_i\)</span>为<span class="math inline">\(f(x)\)</span>在节点<span class="math inline">\(x_i\)</span>处步长为<span class="math inline">\(h\)</span>的一阶向前差分。</p>
<p>有一阶差分，自然也有更高阶的差分，例如 <span class="math display">\[
\Delta^2f_i = \Delta f_{i+1} - \Delta f_i
\]</span> 这个<span class="math inline">\(\Delta^2f_i\)</span>称为<span class="math inline">\(f(x)\)</span>在节点<span class="math inline">\(x_i\)</span>处步长为<span class="math inline">\(h\)</span>的二阶向前差分。</p>
<p>另外，除了向前差分，还有向后差分以及中心差分。向后差分就是<span class="math inline">\(\Delta f_i = f(x_i)-f(x_i - h)\)</span>，中心差分就是<span class="math inline">\(\Delta f_i = f(x_i+\frac{1}{2}h)- f(x_i - \frac{1}{2}h)\)</span>。</p>
<p>在插值节点等距分布的情况下，<span class="math inline">\(k+1\)</span>阶差商也可以简化为 <span class="math display">\[
f[x_0, x_1, ..., x_k] = \frac{\Delta^k f_0}{k!h^k}
\]</span></p>
<h2 id="hermite多项式">3.4 Hermite多项式</h2>
<h3 id="hermite插值问题">3.4.1 Hermite插值问题</h3>
<p>与Lagrange和Newton插值不同，Hermite插值问题不仅要考虑插值多项式在插值点上的值和函数相同，而且在全部或部分插值点上，还要满足一阶导数甚至高阶导数相同的条件。</p>
<p>若函数值、导数值的相同条件共有<span class="math inline">\(n+1\)</span>条，那么插值区间上存在一个不超过<span class="math inline">\(n\)</span>阶的Hermite多项式，满足在插值点上的函数值和导数值符合要求。</p>
<h3 id="hermite基函数">3.4.2 Hermite基函数</h3>
<p>Hermite插值多项式的求解其实是比较灵活的，下面介绍一种比较基础的、通过Hermite基函数来求解Hermite插值多项式的方法。</p>
<p>例如，在插值点<span class="math inline">\(x_0, x_1\)</span>上，要求找出一个插值多项式<span class="math inline">\(H(x)\)</span>，满足<span class="math inline">\(H(x_0)=f(x_0), H(x_1)=f(x_1), H^{(1)}(x_0)=f^{(1)}(x_0), H^{(1)}(x_1)=f^{(1)}(x_1)\)</span>，那么可以构造三次Hermite插值多项式如下 <span class="math display">\[
H(x) = f(x_0)h_0(x)+f(x_1)h_1(x)+f^{(1)}(x_0)\bar h_0(x) + f^{(1)}(x_1)\bar h_1(x)
\]</span> 其中，<span class="math inline">\(h(x)\)</span>被称为Hermite基函数。<span class="math inline">\(h_0(x)\)</span>满足<span class="math inline">\(h_0(x_0)=1, h_0(x_1)=0, h_0^{(1)}(x_0)=0, h^{(1)}(x_1)=0\)</span>的条件，<span class="math inline">\(h_1(x)\)</span>满足<span class="math inline">\(h_1(x_0)=0, h_1(x_1)=1, h_1^{(1)}(x_0)=0, h_1^{(1)}(x_1)=0\)</span>的条件，<span class="math inline">\(\bar h_0(x)\)</span>满足<span class="math inline">\(\bar h_0(x_0)=0, \bar h_0(x_1)=0, \bar h_0^{(1)}(x_0)=1, \bar h_0^{(1)}(x_1)=0\)</span>的条件，<span class="math inline">\(\bar h_1(x)\)</span>满足<span class="math inline">\(\bar h_1(x_0)=0, \bar h_1(x_1)=0, \bar h_1^{(1)}(x_0)=0, \bar h_1^{(1)}(x_1)=1\)</span>的条件。其实这种构造基函数的方式和Lagrange基函数非常相似，只不过推广到了导数条件上去。</p>
<p>为了满足上述条件，需要进行各个基函数的构造。以<span class="math inline">\(h_0(x)\)</span>为例，由于<span class="math inline">\(x=x_1\)</span>时函数值和导数值均为0，因此<span class="math inline">\(x_1\)</span>肯定是<span class="math inline">\(h_0(x)\)</span>的二重零点，所以<span class="math inline">\(h_0(x)\)</span>必有因子<span class="math inline">\((x-x_1)^2\)</span>；由于<span class="math inline">\(H(x)\)</span>是三次多项式，所以所有的基函数都可能是三次多项式，那么可以令<span class="math inline">\(h_0(x)=(a+bx)(x-x_1)^2\)</span>。事实上，为了方便计算，我们会令<span class="math inline">\(h_0(x)=(a+b\displaystyle \frac{x-x_0}{x_1-x_0})(\frac{x-x_1}{x_0-x_1})^2\)</span>。那么将<span class="math inline">\(x=x_0\)</span>时的函数值和导数值条件代入，可以得到 <span class="math display">\[
\begin{aligned}
&amp;h_0(x_0)=(a+b\frac{x_0-x_0}{x_1-x_0})(\frac{x_0-x_1}{x_0-x_1})^2=1\\
&amp;h_0^{(1)}(x_0)=\frac{b}{x_1-x_0}(\frac{x_0-x_1}{x_0-x_1})^2+(a+b\frac{x_0-x_0}{x_1-x_0})\frac{2}{x_0-x_1}\frac{x_0-x_1}{x_0-x_1}=0
\end{aligned}
\]</span> 那么 <span class="math display">\[
\begin{aligned}
&amp;a=1\\
&amp;b=2
\end{aligned}
\]</span> 即 <span class="math display">\[
h_0(x)=(1+2\frac{x-x_0}{x_1-x_0})(\frac{x-x_1}{x_0-x_1})^2
\]</span> 其他的基函数同理，都可以求出来。</p>
<p>很明显，Hermite基函数的构造也是比较繁琐的，特别是在未知数的数量增多之后，求解起来将会非常麻烦。对于导数条件比较少的情况，其实可以找一些其他的方法进行Hermite插值多项式的求解。</p>
<h3 id="hermite多项式的其他解法">3.4.3 Hermite多项式的其他解法</h3>
<p>假设我们现在需要对插值区间内的5个插值点进行Hermite插值，但是只要求在某一个插值点上导数值相同，也就是说，Hermite插值问题中的6个条件只有1个是导数条件。对于这种问题，我们完全可以先进行函数值条件的插值，得到一个不大于4次的插值多项式，然后再利用最后一个导数条件以及前面的5个零点条件求出另一个不大于5次的插值多项式，最后将上面两个插值多项式相加，就可以得到不大于5次的Hermite多项式了。</p>
<h3 id="hermite多项式的余项">3.4.4 Hermite多项式的余项</h3>
<p>假定在插值区间上有3个插值点<span class="math inline">\(x_0, x_1, x_2\)</span>，5个插值条件<span class="math inline">\(f(x_0), f(x_1), f(x_2), f^{(1)}(x_0), f^{(1)}(x_1)\)</span>，那么有余项 <span class="math display">\[
R_4(x) = \frac{f^{(5)}(\xi)}{5!}(x-x_0)^2(x-x_1)^2(x-x_0)
\]</span> 余项的组成是很有规律的。前面的<span class="math inline">\(\displaystyle \frac{f^{(n+1)}(\xi)}{(n+1)!}\)</span>的阶数永远和插值条件个数相等，后面的连乘项中，每个插值点上有几个条件，那这个<span class="math inline">\(x-x_i\)</span>就是多少次方。</p>
<h2 id="样条插值">3.5 样条插值</h2>
]]></content>
      <categories>
        <category>Mathematics</category>
      </categories>
      <tags>
        <tag>Numerical Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器最大TCP连接数问题</title>
    <url>/2022/11/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%80%E5%A4%A7TCP%E8%BF%9E%E6%8E%A5%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在不考虑硬件资源的情况下，一个服务器（对应公网的一个 ip 地址）最大能够建立多少个TCP连接？</p>
<p>需要明确的一点是，一个TCP连接有四要素：</p>
<ol type="1">
<li>服务器 ip 地址</li>
<li>服务器端口</li>
<li>客户端 ip 地址</li>
<li>客户端端口</li>
</ol>
<p>所以TCP最大连接数其实就是求一个组合问题。在 ipv4 的情况下，同一网络中最多能够存在 <span class="math inline">\(2^{32}\)</span> 个 ip 地址；服务器往往只监听一个特殊的端口，所以服务器这边的 ip 地址和端口是唯一确定的；TCP 中端口是用一个16位无符号整型数来表示的，再考虑到1000以内的端口一般是保留的，所以粗略估计一下，一个服务器最多能够建立起 <span class="math inline">\((2^{32}-1) \times (2^{16}-1000)\)</span> 个TCP连接。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer Networking</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学习方法-无监督学习概述</title>
    <url>/2022/11/02/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95-%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>本文是李航老师的《统计学习方法》无监督学习部分的学习笔记。</p>
<h2 id="概述">概述</h2>
<h3 id="特征">特征</h3>
<ul>
<li>数据集无标签 <span class="math inline">\(U = \{x_1, x_2, ..., x_n\}\)</span></li>
</ul>
<p>一般用 <span class="math inline">\(z=g_{\theta}(x)\)</span> 或 <span class="math inline">\(P_{\theta}(z|x)\)</span> 来表示模型，其中 <span class="math inline">\(z\)</span> 表示分析结果，以与监督学习区分。</p>
<h3 id="常用方法">常用方法</h3>
<ol type="1">
<li>聚类</li>
<li>降维 Dimensionality Reduction</li>
<li>概率模型估计
<ol type="1">
<li>混合模型</li>
<li>概率图模型
<ol type="1">
<li>有向图模型</li>
<li>无向图模型</li>
</ol></li>
</ol></li>
</ol>
<span id="more"></span>
<h3 id="三要素">三要素</h3>
<p>无监督学习和监督学习一样，都有三要素：模型、策略、算法。</p>
<p>策略方面</p>
<ul>
<li>聚类：样本与所属类别中心距离的最小化</li>
<li>降维：降维过程中信息损失的最小化</li>
<li>概率模型：模型生成概率的最大化</li>
</ul>
<h2 id="类-cluster">类 Cluster</h2>
<p>用 <span class="math inline">\(G\)</span> 表示一个类，用 <span class="math inline">\(x_i, x_j\)</span> 表示类中的两个元素，用 <span class="math inline">\(n_G\)</span> 表示类的大小，用 <span class="math inline">\(d_{ij}\)</span> 表示元素 <span class="math inline">\(x_i, x_j\)</span> 之间的距离，可以给出类的定义</p>
<p>若有实数值 <span class="math inline">\(T &gt; 0\)</span>，对于任意 <span class="math inline">\(x_i, x_j \in G\)</span>，满足 <span class="math inline">\(d_{ij} \leq T\)</span>，则称 <span class="math inline">\(G\)</span> 为一个类。</p>
<h3 id="类的特征">类的特征</h3>
<h4 id="类的中心-bar-x_g">类的中心 <span class="math inline">\(\bar x_G\)</span></h4>
<p>类的中心一般取类中所有元素的平均值。</p>
<p><span class="math display">\[
\bar x_G = \frac{1}{n_G} \sum^{n_G}_{i=1}x_i
\]</span></p>
<h4 id="类的直径-d_g">类的直径 <span class="math inline">\(D_G\)</span></h4>
<p>类的直径一般取类中相隔最远的两个元素之间的间距。</p>
<p><span class="math display">\[
D_G = \mathop{max}\limits_{x_i, x_j \in G}d_{ij}
\]</span></p>
<h4 id="类的样本散布矩阵-a_g-和样本协方差矩阵-s_g">类的样本散布矩阵 <span class="math inline">\(A_G\)</span> 和样本协方差矩阵 <span class="math inline">\(S_G\)</span></h4>
<ul>
<li>样本散布矩阵 Scatter Matrix</li>
<li>样本协方差矩阵 Covariance Matrix</li>
</ul>
<p><span class="math display">\[
A_G = \sum^{n_G}_{i=1}(x_i - \bar x_G)(x_i - \bar x_G)^T
\]</span></p>
<p><span class="math display">\[
S_G = \frac{1}{m-1}A_G
\]</span></p>
<p>其中，<span class="math inline">\(m\)</span> 为样本的维数。</p>
<h3 id="类与类之间的距离">类与类之间的距离</h3>
<p>类 <span class="math inline">\(G_p\)</span> 和 类 <span class="math inline">\(G_q\)</span> 之间的距离 <span class="math inline">\(D(p, q)\)</span>，也称为类之间的连接(Linkage)。</p>
<h4 id="最短距离-或-单连接-single-linkage">最短距离 或 单连接 Single Linkage</h4>
<p><span class="math display">\[
D(p, q) = min\{d_{ij}|x_i \in G_p, x_j \in G_q\}
\]</span></p>
<h3 id="最长距离-或-完全连接-complete-linkage">最长距离 或 完全连接 Complete Linkage</h3>
<p><span class="math display">\[
D(p, q) = max\{d_{ij}|x_i \in G_p, x_j \in G_q\}
\]</span></p>
<h3 id="中心距离">中心距离</h3>
<p><span class="math display">\[
D(p, q) = d_{\bar x_p, \bar x_q}
\]</span></p>
<h3 id="平均距离">平均距离</h3>
<p><span class="math display">\[
D(p, q) = \frac{1}{n_pn_q}\sum_{x_i \in G_p}\sum_{x_j \in G_q}d_{ij}
\]</span></p>
<h2 id="常用的聚类方法">常用的聚类方法</h2>
<h3 id="层次聚类">层次聚类</h3>
<p>层次聚类分成聚合和分解两种方向，但原理基本类似。从聚合的角度来看，层次聚类的过程主要是</p>
<ol type="1">
<li>第一次迭代，每一个数据都看作一个类</li>
<li>根据一定的规则，进行类的合并，直到达到收敛条件</li>
</ol>
<p>层次聚类的主要元素</p>
<ol type="1">
<li>距离定义</li>
<li>合并规则</li>
<li>收敛条件（如类个数或类直径阈值）</li>
</ol>
<h3 id="k均值聚类">k均值聚类</h3>
<h4 id="策略">策略</h4>
<p>通过损失函数的最小化来选择样本集合的最优划分</p>
<h4 id="要点">要点</h4>
<ol type="1">
<li>距离采用欧式距离定义</li>
<li>各个元素与所属类中心的距离之和定义为损失函数</li>
<li><span class="math inline">\(k\)</span> 的值需要预先定义好</li>
</ol>
<p>如果将优化目标写作 <span class="math inline">\(C^{*}\)</span>，那么有定义</p>
<p><span class="math display">\[
C^* = \mathop{argmin}\limits_{C}W(C) = \mathop{argmin}\limits_{C}\sum^k_{i=1}\sum_{C(i)=l}||x_i - \bar x_l||^2
\]</span></p>
<p>其实就是先计算每个类中所有元素到类中心点的距离之和，再把所有类的这个距离之和再求和，求解使得这个损失函数最小的元素划分方案。</p>
<h3 id="迭代过程">迭代过程</h3>
<ol type="1">
<li>在样本中随机选取 <span class="math inline">\(k\)</span> 个点，作为初始类的中心，然后对剩余的每个点进行距离计算，将点放到离自己最近的类中心点对应的那个类中去</li>
<li>重新计算类的中心，然后用新的类中心去计算每个点与类之间的距离，并调整点的归属，直到收敛</li>
</ol>
<h4 id="特征-1">特征</h4>
<ol type="1">
<li>算法复杂度 <span class="math inline">\(O(mnk)\)</span>，其中 <span class="math inline">\(m\)</span> 为数据维度，<span class="math inline">\(n\)</span> 为样本数量，<span class="math inline">\(k\)</span> 为类的数量</li>
<li>初始点的选取会对最终的聚类结果造成很大的影响</li>
<li>必须事先给定 <span class="math inline">\(k\)</span> 的取值才能进行聚类，如果事先无法确定最优的 <span class="math inline">\(k\)</span> 值，可以选择若干个 <span class="math inline">\(k\)</span> 值进行试验，选择效果最好的那个 <span class="math inline">\(k\)</span> 值</li>
<li>聚类效果可以用类的平均直径来衡量</li>
</ol>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Unsupervised Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学习方法-模型评估与选择</title>
    <url>/2022/11/02/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95-%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<h2 id="模型评估参数">模型评估参数</h2>
<h3 id="训练误差">训练误差</h3>
<p>将训练得到的模型记为 <span class="math inline">\(Y = \hat f(X)\)</span>，那么训练误差就是模型 <span class="math inline">\(\hat f\)</span> 在训练集 <span class="math inline">\(T\)</span> 中的经验风险函数。</p>
<p><span class="math display">\[
R_{emp}(\hat f) = \frac{1}{N}\sum^N_{i=1}L(y_i, \hat f(x_i)), (x_i, y_i) \in T
\]</span></p>
<h3 id="测试误差">测试误差</h3>
<p>测试误差指的是模型 <span class="math inline">\(\hat f\)</span> 在测试集中的经验风险函数。</p>
<p><span class="math display">\[
e_{test} = \frac{1}{N&#39;}\sum^{N&#39;}_{i=1}L(y_i, \hat f(x_i)), (x_i, y_i) \in T_{test}
\]</span></p>
<h3 id="模型评估方法">模型评估方法</h3>
<p>训练误差对于模型的好坏评价意义不大，主要用来判断假设空间选取是否合适；测试误差对于模型的泛化能力评估意义比较大。</p>
<h2 id="交叉验证-cross-validation">交叉验证 Cross Validation</h2>
<p>为了更好地评估训练得到模型的性能，交叉验证是必要的。利用测试集进行模型泛化能力的评估是交叉验证的结果，本小节的重点是记录交叉验证的方法，或者说如何进行训练集和测试集的划分。</p>
<h3 id="简单交叉验证">简单交叉验证</h3>
<p>随机将数据集的70%作为训练集，剩余30%作为测试集。</p>
<h3 id="s折交叉验证-s-fold">S折交叉验证 S-Fold</h3>
<p>S折交叉验证是工业中最常用的交叉验证方法，因为这种方法能最大程度上发挥数据集的作用。具体的做法是，将数据集随机分成S个子集，随后进行S次迭代，每一次迭代都将S个子集中的其中一个子集作为测试集，其他的S-1个子集作为训练集。经过S次迭代之后，选出平均测试误差最小的模型作为最优模型。</p>
<h3 id="留一交叉验证-leave-one-cut">留一交叉验证 Leave-one-cut</h3>
<p>留一交叉验证是S折交叉验证的一种特殊情况，即取S的值为样本容量。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>VMD算法笔记</title>
    <url>/2022/11/21/VMD%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="什么是mode">什么是Mode</h2>
<h3 id="引入">引入</h3>
<p>在听音乐的时候，我们能够通过耳朵快速地辨识出不同音色的声音，并且会判断这种音色是由什么乐器发出的。这种信号处理功能被称为 <strong>Source Seperation</strong>，因为扬声器在播放音乐时，播放的是已经经过混音的声波，而人耳能够通过各种神奇而复杂的滤波器，将不同特征的音色从中分离。这种将不同的信号分量从一个叠加的信号中分离出来的功能非常有意义。</p>
<span id="more"></span>
<h3 id="本征模函数-intrinsic-mode-function-imf">本征模函数 Intrinsic Mode Function (IMF)</h3>
<p>上面所提到的不同特征的音色，可以用本征模函数IMF来表示。一个IMF的表达式如下</p>
<p><span class="math display">\[
u_k(t) = A_k(t)cos(\phi_k(t))
\]</span></p>
<p>其中，<span class="math inline">\(\phi_k(t)\)</span> 表示信号的相位，<span class="math inline">\(A_k(t)\)</span> 表示IMF的非负包络。IMF的特征是，包络 <span class="math inline">\(A_k(t)\)</span> 和瞬时频率总是比相位变化得慢得多。简单理解，一个IMF就相当于是复合信号中某一频率的分量，和FFT非常类似。例如，我们生成了3个不同频率的余弦波 <span class="math inline">\(f_1, f_2, f_3\)</span>，然后我们将这几个波叠加在一起，得到 <span class="math inline">\(f\)</span>，那么<em>Mode Decomposition</em>的过程，其实就是从 <span class="math inline">\(f\)</span> 中反向解析出 <span class="math inline">\(f_1, f_2, f_3\)</span> 的过程。</p>
<h2 id="什么是vmd">什么是VMD</h2>
<p>VMD是<em>Variational Mode Decomposition</em>的首字母缩写。这是一种Mode Decomposition算法，可以实现前面所提到的，从一个复合信号中提取IMF的功能。这是一种Fourier Tranform的替代算法，因为Fourier Transform其实对时域的信号是比较敏感的，特别是高频噪声。</p>
<h2 id="mathematics-of-vmd">Mathematics of VMD</h2>
<p>VMD算法主要由以下三部分组成</p>
<ol type="1">
<li>Filtering</li>
<li>Constrained Optimization</li>
</ol>
<h3 id="filtering">Filtering</h3>
<p>VMD算法中应用了Wiener filter技术。Wiener filter是一种可以从模糊的图像中还原原始图像的算法。本质上，这是一种低窄带滤波器，所谓的窄带指的是信号在中心频率附近的抖动非常小，例如一个完美的1Hz正弦信号，在频谱上应该呈现为一个狄拉克脉冲。</p>
<h3 id="constrained-optimization">Constrained Optimization</h3>
<p>带约束的优化问题其实非常常见，例如DRT算法就是一个非负优化问题，那么这个非负就是一个约束。VMD的优化目标如下</p>
<p><span class="math display">\[
min_{m_n(t), \omega_n} \sum^n ||\frac{\partial}{\partial t} \{[(\delta(t)+\frac{j}{\pi t})*m_n(t)]e^{-j\omega_n t}\}||^2_2
\]</span></p>
<p>约束如下</p>
<p><span class="math display">\[
\sum^n m_n(t) = f(t)
\]</span></p>
<p>优化目标函数看起来有点复杂，其实本质上就是在最小化到每个IMF中心频率的带宽；约束就是所有的IMF之和恰好为输入信号。</p>
<p>优化目标函数中的</p>
<p><span class="math display">\[
(\delta(t) + \frac{j}{\pi t}) * m_n(t)
\]</span></p>
<p>就是利用一个冲激函数的Hilbert变换结果与IMF做卷积，在频域上体现为冲激函数的Hilbert变换结果与IMF相乘。</p>
<p>优化目标函数中的偏微分符号，主要是为了使得当前频率IMF的带宽足够小。这相当于在Constrained Optimization中引入了Wiener filter。<span class="math inline">\(e^{j\omega_n t}\)</span> 是频域上的偏移，因为前面的那一大堆表达式是围绕 <span class="math inline">\(omega=0\)</span> 求最小带宽的，需要通过平移将频率移到感兴趣的 <span class="math inline">\(\omega_n\)</span> 上。</p>
<p>接下来，可以将上面这个带约束的优化问题通过Lagrangian function将约束条件写入表达式，得到</p>
<p><span class="math display">\[
L(m_n, \omega_n, \lambda) = \alpha \sum^n ||\frac{\partial}{\partial t}\{[(\delta(t) + \frac{j}{\pi t})*m_n(t)]e^{-j\psi_n t}\}||^2_2 + ||f - \sum^n m_n(t)||_2^2 + &lt;x, f - \sum^n m_n&gt;
\]</span></p>
<p>上述问题可以通过Alternating Direction Method of Multipliers(ADMM)算法求解。完成上述优化问题求解以后，就可以得到IMF <span class="math inline">\(m_n(t)\)</span> 以及对应的频率 <span class="math inline">\(\omega_n\)</span>。</p>
<h2 id="vmdpy的使用">VMDPY的使用</h2>
<p><code>vmdpy</code> 是Python中的一个VMD算法实现。最简单的用法是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">u, u_hat, omega = VMD(v, alpha, tau, K, DC, init, tol)</span><br></pre></td></tr></table></figure>
<p>其中，输出的 <code>u</code> 表示IMF，数据类型为numpy array，规模为 <span class="math inline">\(k\times N\)</span>，其中 <span class="math inline">\(k\)</span> 为IMF的数量，<span class="math inline">\(N\)</span> 为原始信号的长度；<code>u_hat</code> 和 <code>omega</code> 是VMD算法的过程量，<code>omega</code> 的最后一项为最终收敛的IMF频率，长度同样为 <span class="math inline">\(k\)</span>。</p>
<p>输入的 <code>v</code> 表示待分解的原始信号；<code>alpha</code> 即上述Lagrangian function <span class="math inline">\(\alpha\)</span> 项，表示Lagrangian multiplier；<code>tau</code> 表示noise tolerance，调整这个参数可以调整对于噪声的容忍程度；<code>K</code> 表示IMF的数量；<code>DC</code> 表示原始信号中直流信号的数量；<code>init</code> 表示优化初始频率 <span class="math inline">\(\omega_n\)</span> 的选取；<code>tol</code> 即数值精度设定。</p>
<p>基本上，VMD用起来只需要给定 <code>K</code> 和 <code>DC</code> 即可，其他的参数保持默认配置就行。</p>
<h2 id="vmd算法的局限性">VMD算法的局限性</h2>
<ol type="1">
<li>VMD算法需要指明IMF的数量，但是在应用中我们往往不会预先知道一个复合信号中存在多少IMF</li>
<li>当两个IMF的频率相近的时候，VMD可能无法分辨出这两个不同的IMF</li>
<li>VMD算法是一种优化算法，因此相对来说比较耗时</li>
</ol>
]]></content>
      <categories>
        <category>Engineering</category>
      </categories>
      <tags>
        <tag>Signal Processing</tag>
      </tags>
  </entry>
  <entry>
    <title>通过USB备份与恢复微信聊天记录</title>
    <url>/2022/11/24/%E9%80%9A%E8%BF%87USB%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>在电脑上备份和恢复微信聊天记录必须通过局域网，又占局域网带宽，速度也不是很快。实际上，可以通过开启手机热点中的<strong>通过USB共享网络</strong>，通过USB数据线模拟局域网连接，进行电脑与手机之间的通信。</p>
<p>不过需要注意，通过USB连接到手机热点之后，需要关闭电脑上的WLAN连接，否则微信可能不会走USB这一路局域网。经过实测，微信备份和恢复聊天记录的速度最高可以达到30MB/s。</p>
]]></content>
      <categories>
        <category>technical issues</category>
      </categories>
      <tags>
        <tag>tricks</tag>
      </tags>
  </entry>
  <entry>
    <title>大话数据结构笔记-数据结构绪论</title>
    <url>/2022/11/25/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="什么是数据结构">什么是数据结构？</h2>
<p>让我们来考虑这样一组数据：一个班级中所有同学的姓名、性别、学号形成的一张表格。</p>
<p>这样的一组数据可以划分为以下几个层次</p>
<ul>
<li>数据集
<ul>
<li>人（同学）
<ul>
<li>姓名</li>
<li>性别</li>
<li>学号</li>
</ul></li>
</ul></li>
</ul>
<p>数据集层次是最大的一个层次，这指向一个完整的数据表，或是一个数据文件；人的层次是数据在数据集中最粗的一个分层，或者说是最大的一个单位；姓名、性别和学号等信息则是人这一层次数据的子项，隶属于某一个特定的人。</p>
<span id="more"></span>
<p>在上面这个分层中，我们会发现这组数据的结构可以这样描述：</p>
<ul>
<li>数据结构
<ul>
<li>数据对象
<ul>
<li>数据项</li>
</ul></li>
</ul></li>
</ul>
<p>数据对象可以理解成把描述一件事情或者一个物体的所有数据封装起来，这个数据对象下面就是一些相应的数据项。数据对象一般理解为一个实例，我们往往通过一个模板来实例化一个数据对象，这个数据模板可以理解为是一个数据类。</p>
<p>数据结构，则描述了数据对象之间的关系。在上面这个学生信息的例子中，学生的信息之间属于平行关系，可以抽象为一个集合。</p>
<p>借用Python的概念来解释上面的几个概念，就会变得非常简明易懂。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    gender: <span class="built_in">bool</span></span><br><span class="line">    identifier: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name: <span class="built_in">str</span>, gender: <span class="built_in">bool</span>, identifier: <span class="built_in">int</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.identifier = identifier</span><br><span class="line"></span><br><span class="line">xiao_ming = Student(<span class="string">&quot;Xiao Ming&quot;</span>, <span class="literal">True</span>, <span class="number">123456</span>)</span><br><span class="line">xiao_hong = Student(<span class="string">&quot;Xiao Hong&quot;</span>, <span class="literal">True</span>, <span class="number">234556</span>)</span><br><span class="line"></span><br><span class="line">student_list = [xiao_ming, xiao_hong]</span><br></pre></td></tr></table></figure>
<p>按理来说，其实是先有数据结构的概念，才产生编程语言的；但很多时候如果我们先对抽象的概念有一个直观的感受，那么其实更有利于理解抽象的概念。</p>
<blockquote>
<p>这里的术语与大话数据结构中的术语可能并不一致，但对数据结构的描述是一致的。</p>
</blockquote>
<h2 id="数据结构的分类">数据结构的分类</h2>
<h3 id="逻辑结构">逻辑结构</h3>
<p>当我们从数学逻辑的角度来考虑数据之间的关系的时候，这个数据结构就属于逻辑结构。常见的逻辑结构有</p>
<ul>
<li>集合结构：数据对象之间是平行的，没有对应关系</li>
<li>线性结构：数据对象之间有顺序关系</li>
<li>树：数据对象之间有继承关系，一般一个数据对象只能有一个父结点，但允许有多个子结点</li>
<li>图：数据对象之间相互连结，形成网络状关系</li>
</ul>
<p>在逻辑结构中，一个数据对象常被称为一个结点。注意不要与<em>节点</em>混淆，节点一般指一个实物，例如一个ECU。</p>
<h3 id="物理结构">物理结构</h3>
<p>上面的数据结构是比较抽象的存在，我们需要考虑这些数据如何存储到计算机中去。一般来说，我们考虑数据结构的存储时，往往指的是数据对象在内存中的存储，那么在内存中，数据结构分为以下两种</p>
<ul>
<li>顺序存储结构：在内存中开辟一片连续的空间，不同的数据对象紧挨着存入内存</li>
<li>链式存储结构：数据可以连续，但往往是不连续地存储在内存中；每个数据对象都带有一个指向与之相连结点的指针，从而实现非线性逻辑结构中结点之间的相互关联</li>
</ul>
<p>典型的顺序存储结构是数组，几乎所有编程语言都提供这一特性；典型的链式存储结构是链表，在学习C语言的时候对这种数据结构进行过简单的介绍。</p>
<h2 id="抽象数据类型adt">抽象数据类型ADT</h2>
<h3 id="什么是数据类型">什么是数据类型？</h3>
<p>数据类型指的是一个逻辑上的数据在计算机中存储的形式，例如一个整数可以以整型类型存储、一个小数可以以浮点型类型存储、一句文本可以以字符串类型。我们需要为不同的逻辑数据提供一种人与计算机之间的协议，使得逻辑数据能够以二进制的形式存储在计算机内，但在我们访问时又可以从二进制还原为原来的逻辑数据。</p>
<p>一般来说，数据类型可以分成以下两类</p>
<ul>
<li>基本类型</li>
<li>复合类型</li>
</ul>
<p>在不同的编程语言中，上面两种数据类型可能以不同的命名或术语存在，例如Rust中称基本类型为标量；但从逻辑上讲，总是能将数据类型划分成上面这两类。基本类型包括整型、浮点型、字符型等最基本的数据类型，而复合类型则提供了一些封装方式，可以将基本类型的数据按照一定的结构组装起来，例如C语言提供了数组、Python提供了列表和元组。</p>
<p>一般来说，数据类型不仅仅提供了一种逻辑数据的存储方法，还定义了这些数据之间能够进行的一些运算，例如一种编程语言至少应该对整型和浮点型数据提供四则运算的定义，否则只能存数据而不能用这些数据来运算，那么计算机也就不能称其为计算机了。</p>
<h3 id="什么是抽象数据类型adt">什么是抽象数据类型ADT？</h3>
<p>所谓的抽象数据类型，就是对某一种数据的抽象描述。或者说，数据类型其实是某一种抽象数据类型的具体实现，例如数学上的整数是一种抽象数据类型，而C语言中定义的整型则是对整数的一种具体实现。实际上不同编程语言在不同的计算机平台上，对于整型的实现可能各不相同，但是整数这个抽象概念是不变的，而且我们在逻辑上进行算法设计或者程序设计的时候，总是用抽象数据类型进行逻辑演绎，而不会纠结于某一种编程语言对于这种抽象数据类型的具体实现。</p>
<p>另外，抽象数据类型还可以是一些自定义的数据，例如编程语言往往不会原生提供形如三维点 <span class="math inline">\((x, y, z)\)</span> 这样的数据类型，但是我们在设计算法的时候，可能就需要抽象出这样的数据类型，方便我们的构思。在具体实现的时候，编程语言一般也会提供一些支持，让我们可以通过基本类型来实现形如三维点这样的自定义抽象数据类型，例如在Java中定义一个三维点类来实现。</p>
<p>同样，抽象数据类型也不仅仅定义如何存储数据，也可以定义数据之间的运算关系。注意，这里所指的运算就不局限于四则运算了，可以是各种复杂的运算，例如一些逻辑判断、信号处理上的卷积操作等等。</p>
<p>其实抽象数据类型对于熟悉面向对象编程的人来说太熟悉了，完全就是类定义嘛！类的字段用于定义对象的数据，类的方法用于定义对象的运算操作。本质上讲，类和抽象数据类型，确实就是相同的概念。</p>
]]></content>
      <tags>
        <tag>Computer Science</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析笔记-线性方程组的迭代解法</title>
    <url>/2022/11/27/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E8%BF%AD%E4%BB%A3%E8%A7%A3%E6%B3%95/</url>
    <content><![CDATA[<h2 id="范数和条件数">范数和条件数</h2>
<p>由于线性方程组的解是一个列向量，那么线性方程组的精确解和近似解之间的误差也会是一个列向量。所以，要衡量线性方程组解的精度，必须对误差向量的大小进行评判。为此，需要引入范数的概念。</p>
<span id="more"></span>
<h3 id="什么是范数">什么是范数？</h3>
<p>范数定义了如何确定一个矩阵或向量的大小，一个矩阵或向量的范数是一个非负实数。事实上，我们平时常用的对一个二维向量 <span class="math inline">\(\boldsymbol{x} = (a, b)\)</span> 求模的计算公式 <span class="math inline">\(|\boldsymbol{x}|=\sqrt{a^2 + b^2}\)</span> 结果就是 <span class="math inline">\(\boldsymbol{x}\)</span> 的二阶范数。</p>
<h3 id="向量范数">向量范数</h3>
<p>向量范数的定义如下：</p>
<ol type="1">
<li>对于任一 <span class="math inline">\(n\)</span> 维向量 <span class="math inline">\(\boldsymbol{x}\)</span>，其范数的符号表示为 <span class="math inline">\(||\boldsymbol{x}||\)</span></li>
<li><span class="math inline">\(||\boldsymbol{x}|| \geq 0\)</span>，当且仅当 <span class="math inline">\(\boldsymbol{x}\)</span> 为零向量时，<span class="math inline">\(||\boldsymbol{x}|| = 0\)</span></li>
<li>对任意实数 <span class="math inline">\(\alpha\)</span>，有 <span class="math inline">\(||\alpha \boldsymbol{x}|| = ||\alpha||\cdot ||\boldsymbol{x}||\)</span></li>
<li>对任意向量 <span class="math inline">\(\boldsymbol{x}, \boldsymbol{y}\)</span>，有 <span class="math inline">\(||\boldsymbol{x}+\boldsymbol{y}||\leq ||\boldsymbol{x}|| + ||\boldsymbol{y}||\)</span></li>
</ol>
<h4 id="阶向量范数">1阶向量范数</h4>
<p>对于 <span class="math inline">\(n\)</span> 维向量 <span class="math inline">\(\boldsymbol{x}\)</span>，有</p>
<p><span class="math display">\[
||\boldsymbol{x}||_1 = \sum_{i=1}^n |x_i|
\]</span></p>
<h4 id="阶向量范数-1">2阶向量范数</h4>
<p>对于 <span class="math inline">\(n\)</span> 维向量 <span class="math inline">\(\boldsymbol{x}\)</span>，有</p>
<p><span class="math display">\[
||\boldsymbol{x}||_2 = \sqrt{\sum_{i=1}^n x_i^2}
\]</span></p>
<h4 id="无穷向量范数">无穷向量范数</h4>
<p>对于 <span class="math inline">\(n\)</span> 维向量 <span class="math inline">\(\boldsymbol{x}\)</span>，有</p>
<p><span class="math display">\[
||\boldsymbol{x}||_{\infty} = max_{1\leq i\leq n} |x_i|
\]</span></p>
<p>以上三种范数比较常用。</p>
<h3 id="矩阵范数">矩阵范数</h3>
<p>矩阵范数和向量范数的定义基本一致，但是对两个矩阵相乘结果的范数也做了定义，应有 <span class="math inline">\(||AB|| \leq ||A|| \cdot ||B||\)</span>。下面列出几种常用的矩阵范数。</p>
<h4 id="阶矩阵范数">1阶矩阵范数</h4>
<p>对于 <span class="math inline">\(n\)</span> 阶方阵 <span class="math inline">\(A\)</span>，有</p>
<p><span class="math display">\[
||A||_1 = max_{1\leq j \leq n} \sum_{i=1}^n |a_{ij}|
\]</span></p>
<p>即方阵 <span class="math inline">\(A\)</span> 的1阶矩阵范数等于方阵 <span class="math inline">\(A\)</span> 中所有列向量1阶向量范数的最大值。</p>
<h4 id="f矩阵范数">F矩阵范数</h4>
<p>对于 <span class="math inline">\(n\)</span> 阶方阵 <span class="math inline">\(A\)</span>，有</p>
<p><span class="math display">\[
||A||_F = \sqrt{\sum_{i=1}^n \sum_{j=1}^n a_{ij}^2}
\]</span></p>
<p>很明显，F矩阵范数是2阶向量范数在矩阵上的推广。</p>
<h4 id="阶矩阵范数-1">2阶矩阵范数</h4>
<p>首先，要引入方阵的谱半径概念。对于 <span class="math inline">\(n\)</span> 阶方阵 <span class="math inline">\(A\)</span>，若记其第 <span class="math inline">\(i\)</span> 个特征值为 <span class="math inline">\(\lambda_i\)</span>，那么这个方阵的谱半径就记为 <span class="math inline">\(\rho(A) = max_{1\leq i \leq n}|\lambda_i|\)</span>。方阵 <span class="math inline">\(A\)</span> 的2阶矩阵范数，实际上就是 <span class="math inline">\(A^TA\)</span> 的谱半径开方，即</p>
<p><span class="math display">\[
||A||_2 = \sqrt{\rho(A^TA)}
\]</span></p>
<p>所以，2阶矩阵范数也称为谱范数。</p>
<h4 id="无穷矩阵范数">无穷矩阵范数</h4>
<p>无穷矩阵范数，和1阶矩阵范数有些类似。对于 <span class="math inline">\(n\)</span> 阶方阵 <span class="math inline">\(A\)</span>，有</p>
<p><span class="math display">\[
||A||_{\infty} = max_{1\leq i \leq n}\sum_{j=1}^n |a_{ij}|
\]</span></p>
<p>可以看出，无穷矩阵范数其实就是方阵 <span class="math inline">\(A\)</span> 中所有行向量1阶范数的最大值。</p>
<h3 id="矩阵范数和向量范数的相容性">矩阵范数和向量范数的相容性</h3>
<p>如果矩阵 <span class="math inline">\(A\)</span> 和向量 <span class="math inline">\(\boldsymbol{x}\)</span> 满足</p>
<p><span class="math display">\[
||A\boldsymbol{x}|| \leq ||A|| \cdot ||\boldsymbol{x}||
\]</span></p>
<p>则称矩阵 <span class="math inline">\(A\)</span> 和向量 <span class="math inline">\(\boldsymbol{x}\)</span> 满足矩阵范数和向量范数的相容性。</p>
<h2 id="扰动分析和条件数">扰动分析和条件数</h2>
<p>线性方程组 <span class="math inline">\(A\boldsymbol{x} = \boldsymbol{b}\)</span> 的解是由系数矩阵 <span class="math inline">\(A\)</span> 和常数项向量 <span class="math inline">\(\boldsymbol{b}\)</span> 决定的。在实际应用中，这两项数据可能由测量误差、计算机的舍入误差等因素，导致计算时所使用的数据与真实数据之间存在一定的误差，或称其为<strong>扰动</strong>。对于某些特殊的线性方程组，即便扰动非常微小，但是对解的影响可能非常大。</p>
<p>下面分别对系数矩阵上的扰动以及常数项向量上的扰动对解向量产生的干扰进行分析。</p>
<h3 id="常数项向量扰动分析">常数项向量扰动分析</h3>
<p>假定常数项向量上引入了一个扰动 <span class="math inline">\(\delta \boldsymbol{b}\)</span>，对线性方程组解向量造成了扰动 <span class="math inline">\(\delta \boldsymbol{x}\)</span>，那么线性方程组可以改写为</p>
<p><span class="math display">\[
A(\boldsymbol{x} + \delta \boldsymbol{x}) = \boldsymbol{b} + \delta \boldsymbol{b}
\]</span></p>
<p>经过一系列变换，可以得到以下不等式</p>
<p><span class="math display">\[
\frac{||\delta \boldsymbol{x}||}{||\boldsymbol{x}||} \leq ||A|| \cdot ||A^{-1}||\cdot \frac{||\delta \boldsymbol{b}||}{||\boldsymbol{b}||}
\]</span></p>
<h3 id="系数矩阵扰动分析">系数矩阵扰动分析</h3>
<p>假定系数矩阵上引入了一个扰动 <span class="math inline">\(\delta A\)</span>，对线性方程组的解向量造成了扰动 <span class="math inline">\(\delta \boldsymbol{x}\)</span>，那么线性方程组可以改写为</p>
<p><span class="math display">\[
(A+\delta A)(\boldsymbol{x} + \delta \boldsymbol{x}) = \boldsymbol{b}
\]</span></p>
<p>经过一系列变换，可以得到以下不等式</p>
<p><span class="math display">\[
\frac{||\delta \boldsymbol{x}||}{||x + \delta \boldsymbol{x}||} \leq ||A|| \cdot ||A^{-1}|| \cdot \frac{||\delta A||}{||A||}
\]</span></p>
<h3 id="条件数">条件数</h3>
<p>从上面的扰动分析中，可以看出，解的相对扰动与系数矩阵或常数项向量的相对扰动之间，都存在一个放大倍数 <span class="math inline">\(||A||\cdot ||A^{-1}||\)</span>。这个放大倍数称为线性方程组 <span class="math inline">\(A\boldsymbol{x}=\boldsymbol{b}\)</span> 的<strong>条件数</strong>，或矩阵 <span class="math inline">\(A\)</span> 的条件数，用 <span class="math inline">\(cond(A)\)</span> 表示。</p>
<p>可以看到，矩阵的条件数与矩阵范数是挂钩的。常用的条件数是无穷矩阵范数对应的条件数 <span class="math inline">\(cond_{\infty}(A) = ||A||_{\infty}||A^{-1}||_{\infty}\)</span> 以及2阶矩阵范数对应的条件数 <span class="math inline">\(cons_2(A) = ||A||_2 ||A^{-1}||_2\)</span>。</p>
<h4 id="条件数的性质">条件数的性质</h4>
<ol type="1">
<li>对于任意 <span class="math inline">\(n\)</span> 阶非奇异方阵 <span class="math inline">\(A\)</span>，有 <span class="math inline">\(cond(A) \geq 1\)</span></li>
<li>对于任意 <span class="math inline">\(n\)</span> 阶非奇异方阵 <span class="math inline">\(A\)</span> 和非零常数 <span class="math inline">\(c\)</span>，有 <span class="math inline">\(cond(cA) = cond(A)\)</span></li>
<li>对于任意正交矩阵 <span class="math inline">\(A\)</span>，有 <span class="math inline">\(cond_2(A) = 1\)</span></li>
<li>对于任意 <span class="math inline">\(n\)</span> 阶非奇异方阵 <span class="math inline">\(A\)</span> 和正交矩阵 <span class="math inline">\(P\)</span>，有 <span class="math inline">\(cond_2(PA) = cond_2(AP) = cond_2(A)\)</span></li>
</ol>
<h4 id="良态矩阵和病态矩阵">良态矩阵和病态矩阵</h4>
<p>对于一个确定的系数矩阵 <span class="math inline">\(A\)</span>，如果其条件数相对小，那么系数矩阵的扰动不会造成解的太大扰动；如果其条件数相对大，那么系数矩阵的扰动会导致解的大幅度扰动。条件数小的矩阵，称为<strong>良态矩阵</strong>；条件数大的矩阵，称为<strong>病态矩阵</strong>。</p>
<p>一个最常见的病态矩阵就是Hilbert矩阵，即</p>
<p><span class="math display">\[
H_n = \begin{pmatrix}
   1 &amp; \frac{1}{2} &amp; \cdots &amp; \frac{1}{n} \\
   \frac{1}{2} &amp; \frac{1}{3} &amp; \cdots&amp; \frac{1}{n+1}\\
   \vdots &amp; &amp; \ddots \\
   \frac{1}{n} &amp; \frac{1}{n+1} &amp; \cdots &amp; \frac{1}{2n-1}
\end{pmatrix}
\]</span></p>
<p>其条件数为 <span class="math inline">\(cond_2(H_n) \approx e^{3.5n}\)</span>，随着矩阵规模的增大，条件数迅速上升。因此，Hilbert矩阵的阶数越高，其条件数越大，也就越病态。</p>
<h2 id="基本迭代法">基本迭代法</h2>
<p>下面介绍如何使用迭代法进行线性方程组的求解。首先，对于线性方程组</p>
<p><span class="math display">\[
A\boldsymbol{x} = \boldsymbol{b}
\]</span></p>
<p>如果能够将系数矩阵拆解为两个矩阵的差，如 <span class="math inline">\(A = M - N\)</span>，那么上述线性方程组可以转换为</p>
<p><span class="math display">\[
M\boldsymbol{x} = N\boldsymbol{x} + \boldsymbol{b}
\]</span></p>
<p>假如矩阵 <span class="math inline">\(M\)</span> 可逆，那么</p>
<p><span class="math display">\[
\boldsymbol{x} = M^{-1}N\boldsymbol{x} + M^{-1}\boldsymbol{b}
\]</span></p>
<p>令 <span class="math inline">\(B = M^{-1}N, \ \boldsymbol{g} = M^{-1} \boldsymbol{b}\)</span>，那么可以建立线性方程组解的迭代公式</p>
<p><span class="math display">\[
\boldsymbol{x}^{(k+1)} = B\boldsymbol{x}^{(k)}+\boldsymbol{g}
\]</span></p>
<p>对于解向量，实际上在迭代的过程中，会形成一个解向量序列 <span class="math inline">\(\{\boldsymbol{x}^{(k)}\}\)</span>，并且最后会收敛至一个解 <span class="math inline">\(\boldsymbol{x}^*\)</span>，满足</p>
<p><span class="math display">\[
M\boldsymbol{x}^* = N\boldsymbol{x}^* + \boldsymbol{g}
\]</span></p>
<p>即</p>
<p><span class="math display">\[
A\boldsymbol{x}^* = \boldsymbol{b}
\]</span></p>
<p>如果按 <span class="math inline">\(\boldsymbol{x}^{(k+1)} = B\boldsymbol{x}^{(k)} + \boldsymbol{g}\)</span> 的方式，每次迭代都需要求出 <span class="math inline">\(M^{-1}\)</span>，计算量非常大；所以，实际上的迭代过程都是使用 <span class="math inline">\(M\boldsymbol{x}^{(k+1)} = N\boldsymbol{x}^{(k)}+\boldsymbol{b}\)</span>。每次迭代过程中，等式右侧的部分都是可计算的，那么每次迭代过程就相当于要求解一个以矩阵 <span class="math inline">\(M\)</span> 为系数矩阵，以 <span class="math inline">\(N \boldsymbol{x}^{(k)}+\boldsymbol{g}\)</span> 为常数项向量的非齐次线性方程组。</p>
<p>为了减少计算量，我们总是希望这个矩阵 <span class="math inline">\(M\)</span> 具有一些易于计算的特征的，例如是对角矩阵或者上三角矩阵等。</p>
<h2 id="定常迭代法">定常迭代法</h2>
<p>下面记录三种基本的定常迭代解法：</p>
<ol type="1">
<li>Jacobi迭代解法</li>
<li>Gauss-Seidel迭代解法</li>
<li>SOR迭代解法</li>
</ol>
<h3 id="jacobi迭代解法">Jacobi迭代解法</h3>
<p>对于线性方程组的迭代求解表达式 <span class="math inline">\(M\boldsymbol{x} = N\boldsymbol{x} + \boldsymbol{b}\)</span>，令</p>
<p><span class="math display">\[
M = D,\ N = L + U
\]</span></p>
<p>则可以得到Jacobi迭代解法，即</p>
<p><span class="math display">\[
D\boldsymbol{x}^{(k+1)} = (L+U)\boldsymbol{x}^{(k)}+\boldsymbol{b}
\]</span></p>
<p>迭代收敛条件一般以</p>
<p><span class="math display">\[
\frac{||\boldsymbol{b} - A\boldsymbol{x^*}||}{||\boldsymbol{b}||}
\]</span></p>
<p>为指标，若该相对误差小于某一阈值则认为迭代收敛。</p>
<h3 id="gauss-seidel迭代解法">Gauss-Seidel迭代解法</h3>
<p>Guass-Seidel迭代解法与Jacobi迭代解法非常相似，如下</p>
<p><span class="math display">\[
D\boldsymbol{x}^{(k+1)} = L\boldsymbol{x}^{(k+1)}+U\boldsymbol{x}^{(k)}+\boldsymbol{b}
\]</span></p>
<p>或者也可以简化为</p>
<p><span class="math display">\[
(D-L)\boldsymbol{x}^{(k+1)}=U\boldsymbol{x}^{(k)}+\boldsymbol{b}
\]</span></p>
<p>虽然形式上很相似，但是GS迭代解法与Jacobi迭代解法有本质上的区别。Jacobi迭代解法中，一次迭代过程中 <span class="math inline">\(\boldsymbol{x}^{(k+1)}\)</span> 完全由 <span class="math inline">\(\boldsymbol{x}^{(k)}\)</span> 求出；而GS迭代解法中，解 <span class="math inline">\(\boldsymbol{x}^{(k+1)}\)</span> 的第 <span class="math inline">\(i\)</span> 个分量的求解会使用解 <span class="math inline">\(\boldsymbol{x}^{(k+1)}\)</span> 的前 <span class="math inline">\(i-1\)</span> 个分量以及 <span class="math inline">\(\boldsymbol{x}^{(k)}\)</span> 的后 <span class="math inline">\(n-i-1\)</span> 个分量作为已知参数。相当于GS迭代解法中，解的更新是分量级别的，而Jacobi迭代解法中，解的更新是解向量级别的，那么相当于GS迭代解法的迭代颗粒度在行级别，而Jacobi迭代解法的迭代颗粒度是矩阵级别。</p>
<p>第一种写法强调了GS迭代解法中解分量迭代的特性。第二种写法将 <span class="math inline">\(L\boldsymbol{x}^{(k+1)}\)</span> 项移到等式左侧，是因为在计算上这两种写法是等价的，但是容易引起误解，令人认为GS迭代解法和Jacobi迭代解法没有什么区别。</p>
<blockquote>
<p>请勿混淆线性方程组迭代解法中对于系数矩阵 <span class="math inline">\(A\)</span> 的分解与 <span class="math inline">\(LDU\)</span> 分解，迭代解法中的系数矩阵分解是线性分解 <span class="math inline">\(A = D - L - U\)</span>，而 <span class="math inline">\(LDU\)</span> 分解指的是矩阵乘法分解 <span class="math inline">\(A = LDU\)</span>。</p>
</blockquote>
<h3 id="sor迭代解法">SOR迭代解法</h3>
<p>SOR迭代解法即Successive Over Relaxation迭代解法，是GS迭代解法的一种衍生版本。对于GS迭代解法，可以将其原始表达式改写为</p>
<p><span class="math display">\[
\boldsymbol{x}^{(k+1)}=D^{-1}(L\boldsymbol{x}^{(k+1)}+U\boldsymbol{x}^{(k)}+\boldsymbol{b})
\]</span></p>
<p>从修正解的角度考虑，可以将上述进一步改写为</p>
<p><span class="math display">\[
\boldsymbol{x}^{(k+1)} = \boldsymbol{x}^{(k)} + D^{-1}(D\boldsymbol{x}^{(k+1)}+U\boldsymbol{x}^{(k)}-D\boldsymbol{x}^{(k)}+\boldsymbol{b})
\]</span></p>
<p>也就是说 <span class="math inline">\(D^{-1}(D\boldsymbol{x}^{(k+1)}+U\boldsymbol{x}^{(k)}-D\boldsymbol{x^{k}}+\boldsymbol{b})\)</span> 可以看作是对当前解的修正值。SOR迭代解法，就是在GS迭代解法的基础上，用一个松弛因子 <span class="math inline">\(\omega\)</span> 来调整这个修正值的大小，从而加速迭代。SOR迭代解法的表达式如下</p>
<p><span class="math display">\[
\boldsymbol{x}^{(k+1)} = \boldsymbol{x}^{(k)} + \omega D^{-1}(D\boldsymbol{x}^{(k+1)}+U\boldsymbol{x}^{(k)}-D\boldsymbol{x}^{(k)}+\boldsymbol{b})
\]</span></p>
<p>可以对这条式子进行合并同类项等操作，最后得到</p>
<p><span class="math display">\[
\boldsymbol{x}^{(k+1)} = (D-\omega L)^{-1}[(1-\omega)D+\omega U]\boldsymbol{x}^{(k)}+\omega(D-\omega L)^{-1} \boldsymbol{b}
\]</span></p>
<p>和GS迭代解法的两种表达形式一样，上述写法只是在计算上等价，对于编程来说更加方便，但是迭代求解本质还是第一条表达式反映得更好。另外，从上面的推导中可以看出，SOR迭代解法在 <span class="math inline">\(\omega=1\)</span> 时就是GS迭代解法。</p>
<h3 id="上述三种定常迭代法的收敛性分析和误差估计">上述三种定常迭代法的收敛性分析和误差估计</h3>
<p>教材中的一个小例子说明了GS迭代的收敛速度一般优于Jacobi迭代，而SOR的迭代收敛速度与松弛因子是有关系的，如果松弛因子取得好，SOR迭代的收敛速度一般由于GS迭代。但是，这三种定常迭代法不能保证迭代收敛。下面分析一下这三种迭代方法的收敛性以及计算误差。在此之前，先引入几个相关概念。</p>
<h4 id="置换矩阵">置换矩阵</h4>
<p>置换矩阵可以认为是单位矩阵经过有限次第一类初等变换所形成的矩阵，其特征是矩阵的每一行中有且仅有一个元素1，每一列中也是有且仅有一个元素1，例如</p>
<p><span class="math display">\[
\begin{pmatrix}
    0 &amp; 0 &amp; 1 &amp; 0\\
    1 &amp; 0 &amp; 0 &amp; 0\\
    0 &amp; 1 &amp; 0 &amp; 0\\
    0 &amp; 0 &amp; 0 &amp; 1
\end{pmatrix}
\]</span></p>
<p>就是一个置换矩阵。</p>
<h4 id="可约矩阵">可约矩阵</h4>
<p>对于 <span class="math inline">\(n (n\geq 2)\)</span> 阶方阵 <span class="math inline">\(A\)</span>，若存在 <span class="math inline">\(n\)</span> 阶置换矩阵 <span class="math inline">\(P\)</span>，使得</p>
<p><span class="math display">\[
P^TAP=\begin{pmatrix}
    A_{11} &amp; A_{12} \\
    0 &amp; A_{22}
\end{pmatrix}
\]</span></p>
<p>其中 <span class="math inline">\(A_{11}, A_{22}\)</span> 分别为 <span class="math inline">\(r, n-r\)</span> 阶方阵。若满足上述条件的置换矩阵存在，则称方阵 <span class="math inline">\(A\)</span> 为<strong>可约矩阵</strong>，否则称为<strong>不可约矩阵</strong>。</p>
<p>可约矩阵的意义在于，可以通过分块矩阵将原来的线性方程组拆分为次数较低的两个线性方程组，从而提升求解速度。在实际计算中，这样的加速效果非常显著。</p>
<h4 id="对角占优">对角占优</h4>
<p>对于 <span class="math inline">\(n\)</span> 阶方阵 <span class="math inline">\(A\)</span>，若满足</p>
<p><span class="math display">\[
|a_{ii}| \geq \sum_{j=1, j\neq i}^n |a_{ij}|, i \in \mathcal Z[1, n]
\]</span></p>
<p>称矩阵 <span class="math inline">\(A\)</span> <strong>对角占优</strong>。若存在至少一个 <span class="math inline">\(i \in \mathcal Z[1, n]\)</span>$ 使上述不等式取等号，称矩阵 <span class="math inline">\(A\)</span> 为<strong>弱对角占优</strong>；反之，则称矩阵 <span class="math inline">\(A\)</span> 为<strong>严格对角占优</strong>。</p>
<p>对角占优有一个性质：<em>严格对角占优和不可约弱对角占优矩阵必为非奇异矩阵</em>。</p>
<h4 id="谱半径相关定理">谱半径相关定理</h4>
<p>在迭代解法的收敛性分析和误差分析中，矩阵的谱半径是一个重要的概念。下面记录两条相关定理，为后续的收敛性分析和误差分析铺垫。</p>
<ol type="1">
<li>对于 <span class="math inline">\(n\)</span> 阶矩阵 <span class="math inline">\(A\)</span>，<span class="math inline">\(A^k \rightarrow 0\)</span> 的充要条件是 <span class="math inline">\(\rho(A) &lt; 1\)</span></li>
<li>对于 <span class="math inline">\(n\)</span> 阶矩阵 <span class="math inline">\(A\)</span>，<span class="math inline">\(\rho(A) \leq ||A||\)</span>，其中 <span class="math inline">\(||A||\)</span> 表示 <span class="math inline">\(A\)</span> 的任意范数</li>
</ol>
<h4 id="基本迭代法收敛性条件">基本迭代法收敛性条件</h4>
<p>对于线性方程组的基本迭代方程</p>
<p><span class="math display">\[
\boldsymbol{x} = B \boldsymbol{x} + \boldsymbol{g}
\]</span></p>
<p>若迭代矩阵 <span class="math inline">\(B\)</span> 满足 <span class="math inline">\(\rho(B)&lt;1\)</span>，则从上述基本迭代方程衍生的迭代方法均收敛。另外，若 <span class="math inline">\(||B||&lt;1\)</span>（根据谱半径与范数的关系，基本迭代方法必然收敛），有误差估计</p>
<p><span class="math display">\[
||\boldsymbol{x}^{(k)} - \boldsymbol{x}^*|| \leq \frac{||B||^k}{1-||B||}(\boldsymbol{x}^{(1)} - \boldsymbol{x}^{(0)})
\]</span></p>
<p>或者</p>
<p><span class="math display">\[
||\boldsymbol{x}^{(k)}-\boldsymbol{x}^*|| \leq \frac{||B||}{1-||B||}(\boldsymbol{x}^{(k)} - \boldsymbol{x}^{(k-1)})
\]</span></p>
<h4 id="jacobi迭代与gs迭代的收敛条件">Jacobi迭代与GS迭代的收敛条件</h4>
<p>对于Jacobi迭代解法和GS迭代解法，有以下收敛条件</p>
<ol type="1">
<li>若系数矩阵 <span class="math inline">\(A\)</span> 为严格对角占优矩阵或不可约弱对角占优矩阵，那么Jacobi和GS迭代均收敛</li>
<li>若矩阵 <span class="math inline">\(A\)</span> 正定，则Jacobi收敛的充要条件为 <span class="math inline">\(2D-A\)</span> 也正定</li>
</ol>
<h4 id="sor迭代的收敛条件">SOR迭代的收敛条件</h4>
<p>对于SOR迭代解法，有以下收敛条件</p>
<ol type="1">
<li>松弛系数 <span class="math inline">\(\omega\)</span> 满足 <span class="math inline">\(0&lt; \omega &lt; 2\)</span> 是收敛的必要条件</li>
<li>若系数矩阵 <span class="math inline">\(A\)</span> 正定，那么上述条件加强为收敛的充要条件</li>
</ol>
]]></content>
      <categories>
        <category>University</category>
      </categories>
      <tags>
        <tag>Numerical Analysis</tag>
        <tag>Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析作业-第六章</title>
    <url>/2022/11/28/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%BD%9C%E4%B8%9A-%E7%AC%AC%E5%85%AD%E7%AB%A0/</url>
    <content><![CDATA[<p>姓名：周晓</p>
<p>学号：2231573</p>
<p>本作业的代码运算平台为Intel Core i7-9750H CPU。</p>
<span id="more"></span>
<h2 id="第一题">第一题</h2>
<h3 id="jacobi迭代求解">Jacobi迭代求解</h3>
<p>由</p>
<p><span class="math display">\[
D \boldsymbol{x}^{(k+1)} = (L+U)\boldsymbol{x}^{k} + \boldsymbol{b}
\]</span></p>
<p>有MATLAB代码如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[x, iter]</span> = <span class="title">jacobi</span><span class="params">(A, b, x0, tol)</span></span></span><br><span class="line">    D = <span class="built_in">diag</span>(<span class="built_in">diag</span>(A));</span><br><span class="line">    L = D - <span class="built_in">tril</span>(A);</span><br><span class="line">    U = D - <span class="built_in">triu</span>(A);</span><br><span class="line"></span><br><span class="line">    iter = <span class="number">0</span>;</span><br><span class="line">    x = x0;</span><br><span class="line">    <span class="keyword">while</span> iter &lt; <span class="number">5000</span></span><br><span class="line">        iter = iter + <span class="number">1</span>;</span><br><span class="line">        x = D \ ((L + U) * x + b);</span><br><span class="line">        <span class="keyword">if</span> norm(b - A*x) / norm(b) &lt; tol</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在命令行中输入</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">25</span> <span class="number">2</span> <span class="number">13</span>; <span class="number">4</span> <span class="number">28</span> <span class="number">8</span>; <span class="number">2</span> <span class="number">-13</span> <span class="number">25</span>];</span><br><span class="line">b = [<span class="number">40</span>; <span class="number">40</span>; <span class="number">14</span>];</span><br><span class="line">x0 = [<span class="number">0</span>; <span class="number">0</span>; <span class="number">0</span>];</span><br><span class="line">tol = <span class="number">1e-5</span>;</span><br><span class="line"></span><br><span class="line">[x, iter] = jacobi(A, b, x0, tol)</span><br></pre></td></tr></table></figure>
<p>运行得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x =</span><br><span class="line"></span><br><span class="line">    1.0000</span><br><span class="line">    1.0000</span><br><span class="line">    1.0000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iter =</span><br><span class="line"></span><br><span class="line">    13</span><br></pre></td></tr></table></figure>
<h3 id="gs迭代求解">GS迭代求解</h3>
<p>由</p>
<p><span class="math display">\[
(D-L)\boldsymbol{x}^{(k+1)} = U\boldsymbol{x}^{(k)} + \boldsymbol{b}
\]</span></p>
<p>可以编写MATLAB代码如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[x, iter]</span> = <span class="title">gauss_seidel</span><span class="params">(A, b, x0, tol)</span></span></span><br><span class="line">    D = <span class="built_in">diag</span>(<span class="built_in">diag</span>(A));</span><br><span class="line">    L = D - <span class="built_in">tril</span>(A);</span><br><span class="line">    U = D - <span class="built_in">triu</span>(A);</span><br><span class="line"></span><br><span class="line">    iter = <span class="number">0</span>;</span><br><span class="line">    x = x0;</span><br><span class="line">    <span class="keyword">while</span> iter &lt; <span class="number">5000</span></span><br><span class="line">        iter = iter + <span class="number">1</span>;</span><br><span class="line">        x = (D - L) \ (U * x + b);</span><br><span class="line">        <span class="keyword">if</span> norm(b - A*x) / norm(b) &lt; tol</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>随后，在命令行输入</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">25</span> <span class="number">2</span> <span class="number">13</span>; <span class="number">4</span> <span class="number">28</span> <span class="number">8</span>; <span class="number">2</span> <span class="number">-13</span> <span class="number">25</span>];</span><br><span class="line">b = [<span class="number">40</span>; <span class="number">40</span>; <span class="number">14</span>];</span><br><span class="line">x0 = [<span class="number">0</span>; <span class="number">0</span>; <span class="number">0</span>];</span><br><span class="line">tol = <span class="number">1e-5</span>;</span><br><span class="line"></span><br><span class="line">[x, iter] = gauss_seidel(A, b, x0, tol)</span><br></pre></td></tr></table></figure>
<p>运行得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x =</span><br><span class="line"></span><br><span class="line">    1.0000</span><br><span class="line">    1.0000</span><br><span class="line">    1.0000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iter =</span><br><span class="line"></span><br><span class="line">     4</span><br></pre></td></tr></table></figure>
<h2 id="第二题">第二题</h2>
<p>Jacobi迭代的迭代矩阵 <span class="math inline">\(B_J\)</span> 表达式如下</p>
<p><span class="math display">\[
B_J = D^{-1}(L+U) = D^{-1}(D-A) = I - D^{-1}A
\]</span></p>
<p>GS迭代的迭代矩阵 <span class="math inline">\(B_{GS}\)</span> 表达式如下</p>
<p><span class="math display">\[
B_{GS} = (D-L)^{-1}U = (D-L)^{-1}(D-L-A) = I - (D-L)^{-1}A
\]</span></p>
<p>考虑使用随机搜索的方式找到满足题设条件的三阶系数矩阵，利用Jacobi迭代矩阵和GS迭代矩阵的谱半径作为判断条件。</p>
<ol type="1">
<li>Jacobi和GS迭代均不收敛 - Jacobi迭代矩阵和GS迭代矩阵的谱半径均大于1</li>
<li>仅Jacobi迭代收敛 - Jacobi迭代矩阵谱半径小于1，GS迭代矩阵谱半径大于1</li>
<li>仅GS迭代收敛 - Jacobi迭代矩阵谱半径大于1，GS迭代矩阵谱半径小于1</li>
<li>Jacobi迭代比GS迭代收敛更快 - Jacobi迭代矩阵和GS迭代矩阵的谱半径均小于1，但是Jacobi迭代矩阵的谱半径小于GS迭代矩阵的谱半径</li>
</ol>
<p>编写MATLAB脚本如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[rho_B_J, rho_B_GS]</span> = <span class="title">compute_rho</span><span class="params">(A)</span></span></span><br><span class="line">    D = <span class="built_in">diag</span>(<span class="built_in">diag</span>(A));</span><br><span class="line">    B_J = <span class="built_in">eye</span>(<span class="number">3</span>) - D \ A;</span><br><span class="line">    B_GS = <span class="built_in">eye</span>(<span class="number">3</span>) - <span class="built_in">tril</span>(A) \ A;</span><br><span class="line"></span><br><span class="line">    rho_B_J = <span class="built_in">max</span>(<span class="built_in">abs</span>(eig(B_J)));</span><br><span class="line">    rho_B_GS = <span class="built_in">max</span>(<span class="built_in">abs</span>(eig(B_GS)));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[mat, rho_B_J, rho_B_GS]</span> = <span class="title">matrix_gen_1</span><span class="params">()</span></span></span><br><span class="line">    maximum_iter = <span class="number">50000</span>;</span><br><span class="line">    iter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> iter &lt; maximum_iter</span><br><span class="line">        iter = iter + <span class="number">1</span>;</span><br><span class="line">        mat = <span class="number">-10</span> + randi(<span class="number">20</span>, <span class="number">3</span>);</span><br><span class="line">        [rho_B_J, rho_B_GS] = compute_rho(mat);</span><br><span class="line">        <span class="keyword">if</span> rho_B_J &gt; <span class="number">1</span> &amp;&amp; rho_B_GS &gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[mat, rho_B_J, rho_B_GS]</span> = <span class="title">matrix_gen_2</span><span class="params">()</span></span></span><br><span class="line">    maximum_iter = <span class="number">50000</span>;</span><br><span class="line">    iter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> iter &lt; maximum_iter</span><br><span class="line">        iter = iter + <span class="number">1</span>;</span><br><span class="line">        mat = <span class="number">-10</span> + randi(<span class="number">20</span>, <span class="number">3</span>);</span><br><span class="line">        [rho_B_J, rho_B_GS] = compute_rho(mat);</span><br><span class="line">        <span class="keyword">if</span> rho_B_J &lt; <span class="number">1</span> &amp;&amp; rho_B_GS &gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[mat, rho_B_J, rho_B_GS]</span> = <span class="title">matrix_gen_3</span><span class="params">()</span></span></span><br><span class="line">    maximum_iter = <span class="number">50000</span>;</span><br><span class="line">    iter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> iter &lt; maximum_iter</span><br><span class="line">        iter = iter + <span class="number">1</span>;</span><br><span class="line">        mat = <span class="number">-10</span> + randi(<span class="number">20</span>, <span class="number">3</span>);</span><br><span class="line">        [rho_B_J, rho_B_GS] = compute_rho(mat);</span><br><span class="line">        <span class="keyword">if</span> rho_B_J &gt; <span class="number">1</span> &amp;&amp; rho_B_GS &lt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[mat, rho_B_J, rho_B_GS]</span> = <span class="title">matrix_gen_4</span><span class="params">()</span></span></span><br><span class="line">    maximum_iter = <span class="number">50000</span>;</span><br><span class="line">    iter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> iter &lt; maximum_iter</span><br><span class="line">        iter = iter + <span class="number">1</span>;</span><br><span class="line">        mat = <span class="number">-10</span> + randi(<span class="number">20</span>, <span class="number">3</span>);</span><br><span class="line">        [rho_B_J, rho_B_GS] = compute_rho(mat);</span><br><span class="line">        <span class="keyword">if</span> rho_B_J &lt; <span class="number">1</span> &amp;&amp; rho_B_GS &lt; <span class="number">1</span> &amp;&amp; rho_B_J &lt; rho_B_GS</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上述4个不同的 <code>matrix_gen</code> 脚本分别对应本题四小问的条件。分别运行脚本，可以得到以下结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mat, rho_B_J, rho_B_GS] = matrix_gen_1()</span><br><span class="line">mat =</span><br><span class="line">     7    -3     3</span><br><span class="line">    -5    -6     0</span><br><span class="line">     9    -4    -2</span><br><span class="line">rho_B_J = 1.5415</span><br><span class="line">rho_B_GS = 3</span><br><span class="line"></span><br><span class="line">[mat, rho_B_J, rho_B_GS] = matrix_gen_2()</span><br><span class="line">mat =</span><br><span class="line">     5     9     5</span><br><span class="line">     7    -7     5</span><br><span class="line">    -6     5    -7</span><br><span class="line">rho_B_J = 0.8494</span><br><span class="line">rho_B_GS = 1.7697</span><br><span class="line"></span><br><span class="line">[mat, rho_B_J, rho_B_GS] = matrix_gen_3()</span><br><span class="line">mat =</span><br><span class="line">    -7    -5    -1</span><br><span class="line">    -2     3    -5</span><br><span class="line">    -4     1     8</span><br><span class="line">rho_B_J = 1.0292</span><br><span class="line">rho_B_GS = 0.7715</span><br><span class="line"></span><br><span class="line">[mat, rho_B_J, rho_B_GS] = matrix_gen_4()</span><br><span class="line">mat =</span><br><span class="line">    -6    -5     9</span><br><span class="line">    -9     8    10</span><br><span class="line">    -1     1     2</span><br><span class="line">rho_B_J = 0.8938</span><br><span class="line">rho_B_GS = 0.9529</span><br></pre></td></tr></table></figure>
<p>下面利用第一题中编写的MATLAB脚本进行简单的验证。下面均取常系数向量为</p>
<p><span class="math display">\[
\boldsymbol{b} = \begin{pmatrix}
    1 \\ 2 \\ 3
\end{pmatrix}
\]</span></p>
<p>先验证第一小问，在命令行中输入</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">7</span> <span class="number">-3</span> <span class="number">3</span>; <span class="number">-5</span> <span class="number">-6</span> <span class="number">0</span>; <span class="number">9</span> <span class="number">-4</span> <span class="number">-2</span>];</span><br><span class="line">b = [<span class="number">1</span>; <span class="number">2</span>; <span class="number">3</span>];</span><br><span class="line">x0 = [<span class="number">0</span>; <span class="number">0</span>; <span class="number">0</span>];</span><br><span class="line">tol = <span class="number">1e-5</span>;</span><br><span class="line">[x, iter] = jacobi(A, b, x0, tol)</span><br><span class="line">[x, iter] = gauss_seidel(A, b, x0, tol)</span><br></pre></td></tr></table></figure>
<p>发现迭代上限设定为5000次时，Jacobi迭代和GS迭代在迭代次数达到上限以后，得到的解为 <code>[NaN; NaN; NaN]</code>，可以认为对于这个线性方程组，Jacobi迭代和GS迭代均不收敛。</p>
<p>然后验证第二小问，在命令行中输入</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">5</span> <span class="number">9</span> <span class="number">5</span>; <span class="number">7</span> <span class="number">-7</span> <span class="number">5</span>; <span class="number">-6</span> <span class="number">5</span> <span class="number">-7</span>];</span><br><span class="line">[x, iter] = jacobi(A, b, x0, tol)</span><br><span class="line">[x, iter] = gauss_seidel(A, b, x0, tol)</span><br></pre></td></tr></table></figure>
<p>发现迭代上限设定为5000次时，Jacobi迭代解法经过74次迭代后收敛，GS迭代在迭代次数达到上限以后，得到的解为 <code>[NaN; NaN; NaN]</code>，那么说明对于这个线性方程组，Jacobi迭代收敛，GS迭代不收敛。</p>
<p>验证第三小问，在命令行中输入</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">-7</span> <span class="number">-5</span> <span class="number">-1</span>; <span class="number">-2</span> <span class="number">3</span> <span class="number">-5</span>; <span class="number">-4</span> <span class="number">1</span> <span class="number">8</span>];</span><br><span class="line">[x, iter] = jacobi(A, b, x0, tol)</span><br><span class="line">[x, iter] = gauss_seidel(A, b, x0, tol)</span><br></pre></td></tr></table></figure>
<p>发现迭代上限设定为5000次时，Jacobi迭代解法在迭代次数达到上限以后，得到的解在 <span class="math inline">\(10^{62}\)</span> 数量级，明显已经发散；GS迭代解法经过43次迭代后收敛，那么说明对于这个线性方程组，Jacobi迭代不收敛，GS迭代收敛。</p>
<p>验证第四小问，在命令行中输入</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A = [<span class="number">-6</span> <span class="number">-5</span> <span class="number">9</span>; <span class="number">-9</span> <span class="number">8</span> <span class="number">10</span>; <span class="number">-1</span> <span class="number">1</span> <span class="number">2</span>];</span><br><span class="line">[x, iter] = jacobi(A, b, x0, tol)</span><br><span class="line">[x, iter] = gauss_seidel(A, b, x0, tol)</span><br></pre></td></tr></table></figure>
<p>发现Jacobi迭代解法经过117次迭代收敛，GS迭代解法经过225次迭代收敛，那么说明对于这个线性方程组，Jacobi迭代比GS迭代收敛更快。</p>
<p>整理一下，可以得到对应于各小问要求的线性方程组，如下。</p>
<h3 id="第一小问">第一小问</h3>
<p><span class="math display">\[
\begin{pmatrix}
    7  &amp;  -3  &amp;   3\\
    -5   &amp; -6   &amp;  0\\
     9   &amp; -4  &amp;  -2\\
\end{pmatrix}
\boldsymbol{x} = \begin{pmatrix}
    1\\2\\3
\end{pmatrix}
\]</span></p>
<h3 id="第二小问">第二小问</h3>
<p><span class="math display">\[
\begin{pmatrix}
    5    &amp; 9   &amp;  5\\
     7   &amp; -7  &amp;   5\\
    -6   &amp;  5  &amp;  -7\\
\end{pmatrix}\boldsymbol{x} = \begin{pmatrix}
    1\\2\\3
\end{pmatrix}
\]</span></p>
<h3 id="第三小问">第三小问</h3>
<p><span class="math display">\[
\begin{pmatrix}
    -7  &amp;  -5  &amp;  -1\\
    -2   &amp;  3  &amp;  -5\\
    -4  &amp;  1    &amp; 8\\
\end{pmatrix}\boldsymbol{x} = \begin{pmatrix}
    1\\2\\3
\end{pmatrix}
\]</span></p>
<h3 id="第四小问">第四小问</h3>
<p><span class="math display">\[
\begin{pmatrix}
    -6  &amp;  -5  &amp;   9\\
    -9  &amp;   8  &amp;  10\\
    -1   &amp;  1    &amp; 2
\end{pmatrix}\boldsymbol{x} = \begin{pmatrix}
    1\\2\\3
\end{pmatrix}
\]</span></p>
<h2 id="第三题">第三题</h2>
<p>SOR的计算方程如下</p>
<p><span class="math display">\[
\boldsymbol{x}^{(k+1)} = (D-\omega L)^{-1}[(1-\omega)D+\omega U]\boldsymbol{x}^{(k)}+\omega(D-\omega L)^{-1} \boldsymbol{b}
\]</span></p>
<p>根据上述方程，可以编写MATLAB脚本如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[x, iter]</span> = <span class="title">sor</span><span class="params">(A, b, x0, tol, omega)</span></span></span><br><span class="line">    D = <span class="built_in">diag</span>(<span class="built_in">diag</span>(A));</span><br><span class="line">    L = D - <span class="built_in">tril</span>(A);</span><br><span class="line">    U = D - <span class="built_in">triu</span>(A);</span><br><span class="line"></span><br><span class="line">    iter = <span class="number">0</span>;</span><br><span class="line">    xk = x0;</span><br><span class="line">    error = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> error &gt; tol</span><br><span class="line">        iter = iter + <span class="number">1</span>;</span><br><span class="line">        coeff_mat_1 = D - omega * L;</span><br><span class="line">        coeff_mat_2 = (<span class="number">1</span> - omega) * D + omega * U;</span><br><span class="line">        xkk = coeff_mat_1 \ (coeff_mat_2 * xk) + omega * (coeff_mat_1 \ b);</span><br><span class="line">        error = norm(xkk - xk);</span><br><span class="line">        xk = xkk;</span><br><span class="line">        <span class="keyword">if</span> iter &gt; <span class="number">10000</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    x = xkk;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prob3</span><span class="params">()</span></span></span><br><span class="line">    A = [<span class="number">-55</span> <span class="number">-5</span> <span class="number">12</span>; <span class="number">21</span> <span class="number">36</span> <span class="number">-13</span>; <span class="number">24</span> <span class="number">7</span> <span class="number">47</span>];</span><br><span class="line">    b = [<span class="number">41</span>; <span class="number">52</span>; <span class="number">12</span>];</span><br><span class="line">    x0 = [<span class="number">0</span>; <span class="number">0</span>; <span class="number">0</span>];</span><br><span class="line">    tol = <span class="number">1e-4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;                                              The iteration times of &quot;SOR&quot;&#x27;</span>);</span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&quot;          0        10        20        30        40        50        60        70        80        90        100&quot;</span>);</span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&quot;OMEGA     ---------#---------#---------#---------#---------#---------#---------#---------#---------#---------#&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> t = <span class="number">1</span>: <span class="number">1</span>: <span class="number">19</span></span><br><span class="line">        omega = <span class="number">0.1</span> * t;</span><br><span class="line">        fprintf(<span class="string">&quot;%.2f      &quot;</span>, omega);</span><br><span class="line">        [x, iter] = sor(A, b, x0, tol, omega);</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">numel</span>(x(<span class="built_in">isnan</span>(x))) &gt; <span class="number">0</span></span><br><span class="line">            fprintf(<span class="string">&quot;发散&quot;</span>);</span><br><span class="line">        <span class="keyword">elseif</span> iter &gt; <span class="number">100</span></span><br><span class="line">            fprintf(<span class="string">&quot;%d&quot;</span>, iter);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> cnt &lt; iter</span><br><span class="line">                cnt = cnt + <span class="number">1</span>;</span><br><span class="line">                fprintf(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        fprintf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>运行 <code>prob3()</code>，可以得到如下结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                                              The iteration times of &quot;SOR&quot;</span><br><span class="line">          0        10        20        30        40        50        60        70        80        90        100</span><br><span class="line">OMEGA     ---------#---------#---------#---------#---------#---------#---------#---------#---------#---------#</span><br><span class="line">0.10      *********************************************************************************************</span><br><span class="line">0.20      *************************************************</span><br><span class="line">0.30      *********************************</span><br><span class="line">0.40      ************************</span><br><span class="line">0.50      *******************</span><br><span class="line">0.60      ***************</span><br><span class="line">0.70      ************</span><br><span class="line">0.80      **********</span><br><span class="line">0.90      ********</span><br><span class="line">1.00      ******</span><br><span class="line">1.10      ******</span><br><span class="line">1.20      ***********</span><br><span class="line">1.30      ********************</span><br><span class="line">1.40      ********************************************</span><br><span class="line">1.50      556</span><br><span class="line">1.60      发散</span><br><span class="line">1.70      发散</span><br><span class="line">1.80      发散</span><br><span class="line">1.90      发散</span><br></pre></td></tr></table></figure>
<p>从上述结果可以看出，<span class="math inline">\(\omega=1\)</span> 和 <span class="math inline">\(\omega=1.1\)</span> 时收敛最快，仅经过6次迭代就达到了目标精度。当 <span class="math inline">\(\omega = 1.5\)</span> 时，SOR迭代解法几乎要发散了，但是经过数百次迭代还是勉强收敛；当 <span class="math inline">\(\omega \geq 1.6\)</span> 时，SOR迭代解法发散。</p>
<h2 id="第四题">第四题</h2>
<p>系数矩阵为</p>
<p><span class="math display">\[
A = \begin{pmatrix}
    \alpha &amp; -4 &amp; 4\\
    4 &amp; \alpha &amp; 3\\
    -4 &amp; 3 &amp; \alpha
\end{pmatrix}
\]</span></p>
<p>那么相应的Jacobi迭代矩阵为</p>
<p><span class="math display">\[
B_J = D^{-1}(D-A)=\alpha^{-1}\begin{pmatrix}
    0 &amp; 4 &amp; -4 \\
    -4 &amp; 0 &amp; -3\\
    4 &amp; -3 &amp; 0
\end{pmatrix}
\]</span></p>
<p>由于矩阵的数乘不影响特征值，所以记</p>
<p><span class="math display">\[
C = \begin{pmatrix}
    0 &amp; 4 &amp; -4 \\
    -4 &amp; 0 &amp; -3\\
    4 &amp; -3 &amp; 0
\end{pmatrix}
\]</span></p>
<p>那么 <span class="math inline">\(\lambda I - C\)</span> 的行列式为</p>
<p><span class="math display">\[
|\lambda I - C| = \lambda^3 + 23\lambda +96 = (\lambda + 3)(\lambda^2 - 3\lambda +32)
\]</span></p>
<p>解得，矩阵 <span class="math inline">\(C\)</span> 的特征值为</p>
<p><span class="math display">\[
\begin{cases}
    \lambda_1 = -3\\
    \lambda_2 = \frac{1}{2}(3+i\sqrt{119})\\
    \lambda_3 = \frac{1}{2}(3-i\sqrt{119})
\end{cases}
\]</span></p>
<p>那么 <span class="math inline">\(\rho(B_J) = |\alpha^{-1}|max_{1\leq i \leq 3}|\lambda_i|=4\sqrt{2} \ |\alpha^{-1}|\)</span>。要使Jacobi迭代收敛，那么 <span class="math inline">\(\rho(B_J)&lt;1\)</span>，所以</p>
<p><span class="math display">\[
|\alpha| &gt; 4\sqrt{2}
\]</span></p>
<p>是该线性方程组用Jacobi迭代收敛的充要条件。</p>
<h2 id="第五题">第五题</h2>
<p>对于 <span class="math inline">\(n\)</span> 阶矩阵的求逆问题，事实上可以将其分解为 <span class="math inline">\(n\)</span> 个线性方程组求解的问题。对于 <span class="math inline">\(n\)</span> 阶非奇异方阵 <span class="math inline">\(A\)</span>，有</p>
<p><span class="math display">\[
AA^{-1} = E
\]</span></p>
<p>若令 <span class="math inline">\(\boldsymbol{x}\)</span> 表示 <span class="math inline">\(A^{-1}\)</span> 的第一列列向量，则有</p>
<p><span class="math display">\[
A\boldsymbol{x} = \boldsymbol{e}_1^T = \begin{pmatrix}
    1 &amp; 0 &amp; \cdots &amp; 0
\end{pmatrix}
\]</span></p>
<p>对于题设所要求的逆矩阵首行首列元素，其实就是上述线性方程组解向量 <span class="math inline">\(\boldsymbol{x}\)</span> 的列首元素。</p>
<p>根据题设，系数矩阵 <span class="math inline">\(A\)</span> 的对角元素恰为素数序列；另外注意到系数矩阵是一个对称矩阵，因此考虑将系数矩阵 <span class="math inline">\(A\)</span> 分解为</p>
<p><span class="math display">\[
A = D - L - U
\]</span></p>
<p>考虑采用GS迭代解法，对上述线性方程组进行求解。可以写出迭代方程</p>
<p><span class="math display">\[
D\boldsymbol{x}^{(k+1)} = L\boldsymbol{x}^{(k+1)}+U\boldsymbol{x}^{(k)}+\boldsymbol{e}_1
\]</span></p>
<p>方便起见，将素数序列表示为 <span class="math inline">\(\boldsymbol{p}\)</span>，用 <span class="math inline">\(\boldsymbol{p}_i\)</span> 表示素数序列中的第 <span class="math inline">\(i\)</span> 个元素，用 <span class="math inline">\(\boldsymbol{x}_i\)</span> 表示解向量的第 <span class="math inline">\(i\)</span> 个分量。由题设，可以发现矩阵 <span class="math inline">\(A\)</span> 第 <span class="math inline">\(i\)</span> 行的元素服从以下规律：</p>
<ol type="1">
<li>若该元素为对角元素，则该元素为 <span class="math inline">\(\boldsymbol{p}_i\)</span></li>
<li>若该元素非对角元素，
<ol type="1">
<li>若 <span class="math inline">\(|i-j|\)</span> 为2的幂次，则该元素取1</li>
<li>若 <span class="math inline">\(|i-j|\)</span> 不为2的幂次，则该元素取0</li>
</ol></li>
</ol>
<p>那么，系数矩阵 <span class="math inline">\(A\)</span> 的第 <span class="math inline">\(i\)</span> 行实际上可以分解为以对角元素为起点，左右延展的两个序列。在这个序列中，元素索引为2的幂次时，元素取1，否则取0。</p>
<p>观察到左右序列实际上均为二值序列，为了节省内存，不如将其改为值为1的索引序列。由于一行有 <span class="math inline">\(n\)</span> 个元素，第 <span class="math inline">\(i\)</span> 个元素左侧有 <span class="math inline">\(i-1\)</span> 个元素，右侧有 <span class="math inline">\(n-i\)</span> 个元素。假定 <span class="math inline">\(log_2(i-1)\)</span> 向下取整为 <span class="math inline">\(m\)</span>，<span class="math inline">\(log_2(n-i)\)</span> 向下取整为 <span class="math inline">\(n\)</span>，将左序列用符号 <span class="math inline">\(s_l\)</span> 表示，将右序列用 <span class="math inline">\(s_r\)</span> 表示，分别可以表示为</p>
<p><span class="math display">\[
\begin{cases}
    s_l = \begin{bmatrix}
        i- 2^{m} &amp; i- 2^{m-1} &amp; \cdots &amp; i-2^{0}
    \end{bmatrix} \\
    s_r = \begin{bmatrix}
        i+2^0 &amp; i+2^1 &amp; \cdots &amp; i+ 2^n
    \end{bmatrix}
\end{cases}
\]</span></p>
<p>根据上面这一段对矩阵 <span class="math inline">\(A\)</span> 性质的剖析，可以对上述迭代方程按行展开。由于常数项向量的第一行元素为1，其余行元素为0，因此可以将按行展开分为三种情况。对于首行，有</p>
<p><span class="math display">\[
\boldsymbol{p}_1\boldsymbol{x}_1^{(k+1)} = \sum_{j \in s_r}\boldsymbol{x}^{(k)}_j + 1
\]</span></p>
<p>从第 <span class="math inline">\(2\)</span> 行开始，至 <span class="math inline">\(n-1\)</span> 行，有</p>
<p><span class="math display">\[
\boldsymbol{p}_i \boldsymbol{x}_i^{(k+1)} = \sum_{j \in s_l} \boldsymbol{x}^{(k+1)}_j + \sum_{j\in s_r} \boldsymbol{x}^{(k)}_j
\]</span></p>
<p>对于末行，有</p>
<p><span class="math display">\[
\boldsymbol{p}_n \boldsymbol{x}_n^{(k+1)} = \sum_{j \in s_l} \boldsymbol{x}^{(k+1)}_j
\]</span></p>
<p>根据题设，收敛条件为 <span class="math inline">\(||\boldsymbol{x}_1^{(k+1)}-\boldsymbol{x}_1^{(k)}||\leq 10^{-10}\)</span>。根据上面的分析，进行MATLAB编程，如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ent</span> = <span class="title">prob5</span><span class="params">(N)</span></span></span><br><span class="line">    tic;</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 生成素数序列</span></span><br><span class="line">    p = <span class="built_in">primes</span>(nthprime(N));</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 初始化解向量</span></span><br><span class="line">    x = <span class="built_in">zeros</span>(N, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 初始化误差变量与收敛条件</span></span><br><span class="line">    <span class="built_in">eps</span> = <span class="number">1e-10</span>;</span><br><span class="line">    error = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">% GS迭代法</span></span><br><span class="line">    <span class="keyword">while</span> error &gt; <span class="built_in">eps</span></span><br><span class="line">        xk1 = x(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">% i = 1 的情况</span></span><br><span class="line">        n = <span class="built_in">floor</span>(<span class="built_in">log2</span>(N - <span class="number">1</span>));</span><br><span class="line">        local_sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> idx = <span class="number">0</span>: n</span><br><span class="line">            local_sum = local_sum - x(<span class="number">1</span> + <span class="number">2</span>^idx);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        x(<span class="number">1</span>) = local_sum / p(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">% i in [2, N-1] 的情况</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">2</span>: N - <span class="number">1</span></span><br><span class="line">            m = <span class="built_in">floor</span>(<span class="built_in">log2</span>(<span class="built_in">i</span> - <span class="number">1</span>));</span><br><span class="line">            n = <span class="built_in">floor</span>(<span class="built_in">log2</span>(N - <span class="built_in">i</span>));</span><br><span class="line">            local_sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> idx = <span class="number">0</span>: m</span><br><span class="line">                local_sum = local_sum - x(<span class="built_in">i</span> - <span class="number">2</span>^idx);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">for</span> idx = <span class="number">0</span>: n</span><br><span class="line">                local_sum = local_sum - x(<span class="built_in">i</span> + <span class="number">2</span>^idx);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            x(<span class="built_in">i</span>) = local_sum / p(<span class="built_in">i</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">% i = N 的情况</span></span><br><span class="line">        m = <span class="built_in">floor</span>(<span class="built_in">log2</span>(N - <span class="number">1</span>));</span><br><span class="line">        local_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> idx = <span class="number">0</span>: m</span><br><span class="line">            local_sum = local_sum - x(N - <span class="number">2</span>^idx);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        x(N) = local_sum / p(N);</span><br><span class="line">        error = norm(x(<span class="number">1</span>) - xk1);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    ent = x(<span class="number">1</span>);</span><br><span class="line">    toc;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>下面令 <span class="math inline">\(N=20000\)</span>，计算矩阵的逆的首行首列元素，在命令行中输入</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">fprintf(<span class="string">&quot;%.10f\n&quot;</span>, prob5(<span class="number">20000</span>));</span><br></pre></td></tr></table></figure>
<p>得到结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Elapsed time is 1.154008 seconds.</span><br><span class="line">0.7250783463</span><br></pre></td></tr></table></figure>
<p>令 <span class="math inline">\(N=200000\)</span>，在命令行中输入</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">fprintf(<span class="string">&quot;%.10f\n&quot;</span>, prob5(<span class="number">200000</span>));</span><br></pre></td></tr></table></figure>
<p>得到结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Elapsed time is 15.417185 seconds.</span><br><span class="line">0.7250809785</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>University</category>
      </categories>
      <tags>
        <tag>Numerical Analysis</tag>
        <tag>Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust新建Cargo项目</title>
    <url>/2022/11/03/Rust%E6%96%B0%E5%BB%BACargo%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="新建项目">新建项目</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo new world_hello</span><br></pre></td></tr></table></figure>
<p>通过 <code>cargo new</code> 命令可以新建一个 <code>bin</code> 类型的项目。Rust中分 <code>bin</code> 和 <code>lib</code> 类型项目，<code>bin</code> 指最后生成的是可执行文件，<code>lib</code> 表示这属于一个库。<code>cargo new</code> 默认新建 <code>bin</code> 类型项目。</p>
<span id="more"></span>
<h2 id="运行项目">运行项目</h2>
<h3 id="run-运行">run 运行</h3>
<p>通过 <code>cargo run</code> 可以直接编译并运行生成的二进制文件。不过需要注意，<code>cargo run</code> 默认使用 <code>debug</code> 模式进行项目的编译与运行。</p>
<h3 id="先编译然后手动执行">先编译，然后手动执行</h3>
<p>通过 <code>cargo build</code> 可以进行项目的编译。完成编译之后，通过 <code>./target/debug/world_hello</code> 可以运行生成的二进制文件。</p>
<h3 id="两种编译方式">两种编译方式</h3>
<p>默认状态下，使用 <code>debug</code> 方式进行项目的编译。这种方式的编译速度比较快，编译器没有进行优化，所以用于 <code>debug</code> 时的快速编译，但是运行性能会有损失。</p>
<p>另一种方式是 <code>release</code> 方式，用这种方式进行编译，需要更长时间用于编译器的优化工作，但是运行性能将有很大的提升。指定 <code>release</code> 编译的方式是 <code>cargo run --release</code> 或 <code>cargo build --release</code>。</p>
<p>当然，如果用 <code>release</code> 方式进行编译，那么可执行文件将在 <code>./target/release</code> 下。</p>
<h3 id="cargo-check">cargo check</h3>
<p>在项目规模上升之后，每次进行一些代码的变更可能都要花很长时间去编译，这会影响开发效率。<code>cargo</code> 最酷炫的工具便是 <code>cargo check</code>，可以快速检查代码是否能够通过编译，而不需要完整地走一次 <code>cargo build</code> 流程浪费时间。（在开发的过程中，大部分情况下编译是为了检查代码是否编写正确，能够正确地编译为二进制文件）</p>
<h2 id="项目结构">项目结构</h2>
<p>通过 <code>tree</code> 命令，可以发现一个干净的Rust项目中仅有 <code>Cargo.toml</code> 以及 <code>/src/main.rs</code> 这两个文件。经过编译之后，项目中会生成 <code>/target</code> 文件夹以及 <code>Cargo.lock</code> 文件。</p>
<h3 id="cargo.toml-和-cargo.lock">Cargo.toml 和 Cargo.lock</h3>
<p><code>Cargo.toml</code> 和 <code>Cargo.lock</code> 是cargo的两个核心文件。其中 <code>Cargo.toml</code> 就类似于 <code>CMakeLists.txt</code> 相较于cmake的作用，用于对项目的构建信息等进行描述。而 <code>Cargo.lock</code> 是根据 <code>Cargo.toml</code> 生成的依赖清单。一般来说，我们需要合理地编写 <code>Cargo.toml</code> 文件，而不太需要管自动生成的 <code>Cargo.lock</code> 文件。</p>
<p>如果项目类型为 <code>bin</code>，那么最好将 <code>Cargo.lock</code> 一起上传至git仓库；如果项目类型为 <code>lib</code>，那么一般不需要考虑 <code>Cargo.lock</code>，将其加入 <code>.gitignore</code> 文件。</p>
<h3 id="cargo.toml-的结构">Cargo.toml 的结构</h3>
<h4 id="package">[package]</h4>
<p>打开 <code>Cargo.toml</code> 文件，可以看到 <code>[package]</code> 字段。其中，有 <code>name, version, edition</code> 等metadata。<code>name</code> 定义了项目的名称，<code>version</code> 定义了当前的项目版本，<code>edition</code> 定义了Rust大版本。</p>
<h4 id="dependency">[dependency]</h4>
<p><code>Cargo.toml</code> 文件中的 <code>[dependency]</code> 字段定义了项目的依赖。Rust支持以下三种类型的依赖引入</p>
<ul>
<li>从官方 <code>crates.io</code> 仓库引入，通过版本说明来描述</li>
<li>从项目源代码的git仓库或URL来描述</li>
<li>本地项目的绝对或相对路径，通过类Unix的方式来描述</li>
</ul>
<h3 id="main.rs">main.rs</h3>
<p><code>/src/main.rs</code> 是项目的入口文件，其中的 <code>main()</code> 函数则是项目的入口函数。我们简单地修改一下项目默认生成的 <code>main.rs</code>，如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">greeting</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">chinese</span> = <span class="string">&quot;世界，你好&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">english</span> = <span class="string">&quot;World, hello&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">regions</span> = [chinese, english];</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">region</span> <span class="keyword">in</span> regions.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, &amp;region);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">greeting</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面这个代码段可以看出，Rust中对于函数的定义以 <code>fn</code> 开头，对变量的声明利用 <code>let</code> 命令符开头，语句以 <code>;</code> 结尾。</p>
<p>组成数组的方式和 <code>Python</code> 类似，直接 <code>let regions = [chinese, english];</code> 即可。另外，Rust中利用迭代器进行数组的遍历，所以使用 <code>for region in regions.iter()</code> 语句进行 <code>regions</code> 数组中的元素遍历。<strong>Rust圣经的作者称数组为集合。</strong></p>
<p><code>println!</code> 函数后面有一个 <code>!</code> 感叹号，这个感叹号的作用相当于声明当前这个调用的函数是一个宏，暂时先不用太深究。<code>println!</code> 函数提供了类似于 <code>Python</code> 的字符串格式化功能，能够自动判断变量类型，无需手动格式化，比较方便。</p>
<p>注意，Rust中的字符串原生支持 <code>UTF-8</code> 编码，所以可以在字符串中引入各种语言。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>win10关闭terminal的提示音[SOLVED]</title>
    <url>/2022/11/03/win10%E5%85%B3%E9%97%ADterminal%E7%9A%84%E6%8F%90%E7%A4%BA%E9%9F%B3/</url>
    <content><![CDATA[<p>Win10的Terminal挺好用，但是按下tab的时候经常出现很烦人的提示音。下面记录一下如何删除这个提示音。</p>
<ol type="1">
<li>点击Settings</li>
<li>点击Profiles-Defaults</li>
<li>点击Advanced</li>
<li>将Bell notification style中的复选框全不选</li>
</ol>
<span id="more"></span>
<figure>
<img src="/2022/11/03/win10%E5%85%B3%E9%97%ADterminal%E7%9A%84%E6%8F%90%E7%A4%BA%E9%9F%B3//win10取消terminal的提示音.png" alt><figcaption>默认情况下第一项是选中的，取消第一项的选中</figcaption>
</figure>
]]></content>
      <categories>
        <category>Technical Issues</category>
      </categories>
      <tags>
        <tag>win10</tag>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入门-猜数字游戏</title>
    <url>/2022/11/04/Rust%E5%85%A5%E9%97%A8-%E7%8C%9C%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h2 id="引入">引入</h2>
<p>Rust是一门很有意思的语言。《Rust程序设计语言》中，在Rust入门章节介绍了一个猜数字小游戏的编程，对于Rust的入门非常有帮助，因此简单记录一下。</p>
<span id="more"></span>
<h2 id="猜数字小游戏总览">猜数字小游戏总览</h2>
<p>我们希望随机生成一个 <span class="math inline">\([0, 100]\)</span> 区间内的整数，让用户来猜这个数字。如果猜错了，要提示猜大了还是猜小了，然后让用户继续猜；如果猜对了，则提示用户猜对了，并结束游戏；如果用户不想玩了，可以输入 <code>quit</code> 退出游戏。</p>
<h3 id="生成一个新项目">生成一个新项目</h3>
<p><code>cargo</code> 是Rust的项目管理工具，可以实现非常便捷的依赖管理。我们使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cargo new guessing_game</span><br></pre></td></tr></table></figure>
<p>命令，进行 <code>guessing_game</code> 项目工程的新建。</p>
<h3 id="获取用户的输入">获取用户的输入</h3>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;来玩一个猜数字游戏，我们会随机生成0-100之间的一个整数，你来猜&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;请输入你的猜测&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">        .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;你输入的数字是：&#123;&#125;&quot;</span>, guess);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面简单分析一下上面这段代码中所蕴含的Rust概念：</p>
<ul>
<li><code>println!()</code> 是Rust中最常用的输出方式，注意 <code>!</code> 表示这是一个宏，而不是一个函数。Rust中提供了两个输出内容到命令行的方式，<code>println!()</code> 为其一，另一个宏是 <code>print!()</code>，这两者的相同之处在于它们都会将内容格式化为字符串，打印到命令行上；不同之处在于，<code>println!()</code> 会在格式化之后的字符串末尾自动加上 <code>\n</code> 换行符，而 <code>print!()</code> 是不会加换行符的。</li>
<li><code>let</code> 是Rust中新建变量的关键字；<code>mut</code> 是Rust中可变变量的意思。Rust中默认新建的变量是不可变的 <code>immutables</code>，如果要新建可变变量必须声明 <code>mut</code> 类型。也就是说，Rust强迫程序员在声明可变变量的时候付出更多的成本，这也是出于保障内存安全的考虑而设计的机制。</li>
<li><code>String::new()</code> 表示新建一个 <code>String</code> 类型的实例。</li>
<li><code>std::io</code> 是Rust标准库中的io库，这是为了获取用户的输入。
<ul>
<li>本程序的第一行代码 <code>use std::io;</code> 表示这个文件中可以使用 <code>std::io</code> 库中的功能，所以代码中可以直接使用 <code>io::stdin()</code> 来使用库中的 <code>stdin()</code> 函数；如果不声明 <code>use std::io;</code>，也可以使用 <code>std::io::stdin()</code> 来使用。</li>
<li>本例中的 <code>io::stdin()</code> 函数将会在调用后返回一个 <code>std::io::Stdin</code> 实例。我们需要调用该实例的 <code>read_line()</code> 方法，读取命令行输入的数据；</li>
<li><code>read_line(&amp;mut guess)</code> 表示，将命令行读取到的数据存入之前创建的可变变量 <code>mut guess</code> 中去，这里有一个 <code>&amp;</code> 符号，表示引用，实际上在机器层面，是将 <code>read_line()</code> 读取到的数据存入 <code>mut guess</code> 这个可变变量对应的内存地址中去；</li>
<li><code>read_line()</code> 其实会返回一个 <code>Result</code> 实例，这是一个枚举类型，包括 <code>Ok</code> 以及 <code>Err</code> 两个成员，如果 <code>read_line()</code> 成功，<code>Result</code> 将是 <code>Ok</code>，反之 <code>Result</code> 将为 <code>Err</code>；其实这隐含了异常处理机制，我们可以使用 <code>Result</code> 实例的 <code>expect()</code> 方法进行异常的处理。
<ul>
<li>如果 <code>Result</code> 实例是 <code>Err</code>，那么调用 <code>expect()</code> 会导致程序崩溃；我们可以在 <code>expect()</code> 中输入错误信息，例如程序中所示的 <code>expect("Failed to read line")</code>，将会使得程序崩溃之后给出错误信息提示，有点类似于其他语言中抛出异常时给一个异常的信息</li>
<li>如果 <code>Result</code> 实例是 <code>Ok</code>，那么调用 <code>expect()</code> 不会出现任何问题，而是会返回 <code>Ok</code> 中的值；<code>read_line()</code> 方法的返回值是读到的字符串的字节长度，我们这里不需要这个值，所以并没有将这个值和某个变量进行绑定。</li>
</ul></li>
</ul></li>
<li>最后，我们再次调用了 <code>println!()</code> 把 <code>guess</code> 变量的值输出到命令行；注意，我们这里使用了 <code>println!()</code> 函数的格式化功能，和Python的 <code>print(f'')</code> 函数很类似，只需要用 <code>&#123;&#125;</code> 在需要格式化输出的地方进行标记，然后在字符串后面跟上对应的变量，Rust会自动将对应变量的值转为字符串，插入到标记的位置，连前缀 <code>f</code> 都不需要写，非常方便。</li>
</ul>
<h3 id="生成随机数">生成随机数</h3>
<h4 id="项目依赖的介绍">项目依赖的介绍</h4>
<p>Rust的标准库中没有随机数生成的相关功能，因此必须从外部引入库。前面我们用 <code>cargo new</code> 命令生成了整个项目，可以在 <code>Cargo.toml</code> 文件中的 <code>[dependencies]</code> 项中，声明项目的外部库依赖。这里顺带提一下，Rust中的外部库称为 <code>crate</code>，因为在英语中一个 <code>crate</code> 就代指一箱货物，和 <code>cargo</code> 这个集装箱的概念就对应上了。<code>crate</code> 分为 <code>binary crate</code> 和 <code>library crate</code>，主要的区别在于 <code>binary crate</code> 的产物是一个可执行文件，所以这样的 <code>crate</code> 中一定会存在一个 <code>main.rs</code> 作为入口文件；<code>library crate</code> 主要提供一些函数，用来给别人调用，因此不要求存在 <code>main.rs</code>。</p>
<p>打开 <code>Cargo.toml</code> 文件，在 <code>[dependencies]</code> 下面添加 <code>rand["0.9.3"]</code> 项。然后，我们运行一次 <code>cargo build</code>，<code>cargo</code> 会自动帮我们从 <code>crate.io</code> 拉取对应的代码，随后完成一次构建。注意到我们在添加依赖项的时候，必须按照 <code>a.b.c</code> 的格式进行版本号声明。事实上，<code>a.b.c</code> 是 <code>^a.b.c</code> 的简化版本，这暗示了 <code>cargo</code> 会自动帮我们从 <code>crate.io</code> 中找到 <code>a.b.x</code> 版本的依赖，这个 <code>x</code> 是大于等于 <code>c</code> 的。也就是说，<code>cargo</code> 会自动帮助我们在构建他人的项目时，下载依赖的最新小版本代码。</p>
<p>这很方便，但也存在问题，例如依赖的小版本更新恰好影响了项目的功能。为了解决这个问题，在 <code>Cargo.lock</code> 文件中会保存初次构建时使用的依赖版本，这个机制主要是为了使得所有人都能够复现成功的构建，而不会由于依赖的版本变更导致无法进行构建。</p>
<p><code>cargo update</code> 可以将当前的依赖版本更新到最新的小版本，这点和我们去构建别人的项目行为一致。如果要在 <code>b</code> 上进行版本变更，必须手动修改 <code>Cargo.toml</code> 文件。例如原来是 <code>"0.8.4"</code> 的依赖，想要更新到 <code>"0.9.0"</code>，那么必须要手动修改；如果是 <code>"0.8.4"</code> 更新到 <code>"0.8.5"</code>，是可以用 <code>cargo update</code> 更新的。</p>
<h4 id="使用-rand-库">使用 <code>rand</code> 库</h4>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 前面的代码不再重复出现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">0</span>..<span class="number">101</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最上方的 <code>use rand::Rng</code> 是一个 <code>trait</code>，定义了随机数生成器应当实现的方法。<code>trait</code> 的定义在后面会详细介绍，这里只需要知道我们想要使用随机数生成器，就必须引入这个 <code>trait</code>。随后，利用 <code>rand</code> 库中的 <code>thread_rng()</code> 函数，获取一个随机数生成器，这个生成器位于当前线程的环境中，从操作系统获取 <code>seed</code>。最后，我们调用随机数生成器的 <code>gen_range()</code> 方法，进行 <span class="math inline">\([0, 100]\)</span> 区间内随机整数的生成，这个方法是 <code>rand::Rng</code> 这个 <code>trait</code> 定义的。注意 <code>0..101</code> 表示 <span class="math inline">\([0, 101)\)</span>，也就是左闭右开区间。</p>
<h3 id="比较随机数和用户输入的数字">比较随机数和用户输入的数字</h3>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 前面的代码不再重复出现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;请输入一个数字！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number) &#123;</span><br><span class="line">        Ordering::Equal =&gt; <span class="built_in">println!</span>(<span class="string">&quot;你猜对了！&quot;</span>),</span><br><span class="line">        Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;你猜大了！&quot;</span>),</span><br><span class="line">        Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;你猜小了！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码中，首先要将 <code>guess</code> 变量从字符串类型转换为整型，否则无法进行比较。</p>
<ul>
<li><code>let guess: u32 = ...</code> 表示创建一个 <code>u32</code> 类型的不可变变量，其中 <code>u32</code> 表示32位无符号整型</li>
<li><code>guess.trim()</code> 是在 <code>guess</code> 作为一个 <code>String</code> 实例时，调用了其 <code>trim()</code> 方法，这个方法可以将字符串头尾的换行符、制表符以及空白符号去除掉；注意我们之前的 <code>std::io::Stdin.read_line()</code> 方法在读取命令行输入时，会把用户的回车也读取进来，这导致字符串总是以 <code>"\n"</code> 结尾，所以必须使用 <code>trim()</code> 方法进行换行符的去除</li>
<li><code>guess.trim().parse()</code> 是对 <code>guess.trim()</code> 返回的字符串进行类型转换。前面我们已经定义了 <code>guess</code> 为 <code>u32</code> 类型，所以这里不需要重复指明转换后的类型，Rust编译器会自动判断；当然，如果我们没有事先定义好 <code>u32</code> 数据类型的话，必须要指明转换类型；这个 <code>parse()</code> 函数和前面的 <code>std::io::Stdin.read_line()</code> 函数一样，会返回一个 <code>Result</code> 实例；如果 <code>Result</code> 为 <code>Ok</code>，那么可以从 <code>Result</code> 中获得 <code>parse()</code> 成功转换之后的值，例如从 <code>"1"</code> 转换为 <code>1</code>；如果 <code>Result</code> 为 <code>Err</code>，那么说明 <code>parse()</code> 的过程中发生了错误，例如 <code>guess</code> 变量中存在非数字字符，例如 <code>"hero"</code> 是无法进行到整型的类型转换的。为了避免这种错误，我们应该在这里也使用 <code>expect()</code> 函数进行错误处理，否则Rust编译器会报警。这不会影响编译，但是最好养成良好的编程习惯，利用 <code>expect()</code> 捕获 <code>Err</code> 并退出程序。</li>
<li><code>guess.cmp()</code> 方法用于比较两个变量值的关系，并给出一个 <code>std::cmp::Ordering</code> 类型枚举量。
<ul>
<li>利用 <code>match</code> 语句，我们可以写出一个类似于C语言中 <code>switch</code> 的语言结构，即 <code>guess.cmp()</code> 比较出来的结果是 <code>A</code> 的时候执行什么语句；<code>match</code> 的分支称为 <code>arm</code>，一个 <code>arm</code> 对应一个 <code>pattern</code>；<code>match</code> 应当遍历目标变量的所有 <code>pattern</code>。</li>
<li>可以观察到 <code>match</code> 语句的内部，存在三种条件判断
<ul>
<li><code>if guess.cmp(&amp;secret_number) == Ordering::Equal</code> 则 <code>println!("你猜对了！")</code></li>
<li><code>if guess.cmp(&amp;secret_number) == Ordering::Greater</code> 则 <code>println!("你猜大了！")</code></li>
<li><code>if guess.cmp(&amp;secret_number) == Ordering::Less</code> 则 <code>println!("你猜小了！")</code></li>
</ul></li>
</ul></li>
</ul>
<h3 id="引入循环">引入循环</h3>
<p>其实代码写到这里，这个游戏就可以进行一次完成的流程了。但是，我们希望用户能够多猜几次数字，毕竟一次要猜中非常困难。为此，我们需要在程序中引入循环。如果用户猜中了，本轮游戏结束；如果用户猜错了，则让用户继续猜数字；如果用户不想玩了，则输入 <code>quit</code> 退出游戏。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;我们来玩一个猜数字游戏，我会在0-100之间随机生成一个整数，然后你来猜！&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">secret_number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">0</span>..<span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;请输入你的猜测！&quot;</span>);</span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>()</span><br><span class="line">            .<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">            .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> guess.<span class="title function_ invoke__">trim</span>() == <span class="string">&quot;quit&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;请输入一个数字！&quot;</span>);</span><br><span class="line">        <span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;secret_number) &#123;</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;你猜对了！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;你猜大了！&quot;</span>),</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;你猜小了!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;再见！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们引入了 <code>loop</code> 语句，这和C语言中的 <code>while(1)</code> 是类似的，就是一个无限的循环，可以通过 <code>break</code> 跳出。我们在用户输入之后，先判断是否为 <code>"quit"</code>，如果是就跳出循环，从而退出程序；如果不是，则判断能不能正常转为整型，然后再与 <code>secret_number</code> 进行比较，如果猜对了就跳出循环，从而退出程序，如果猜错就重新开始循环。</p>
<h2 id="总结">总结</h2>
<p>这个小程序非常简单，但是涉及到了Rust中非常多的概念和流程语句，因此作为一个Rust入门程序非常好。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入门-通用编程概念</title>
    <url>/2022/11/07/Rust%E5%85%A5%E9%97%A8-%E9%80%9A%E7%94%A8%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="变量与可变性">变量与可变性</h2>
<h3 id="可变变量与不可变变量">可变变量与不可变变量</h3>
<p>Rust与其他的编程语言有一个很大的不同——Rust的变量分为可变变量 <code>mutable variable</code> 和不可变变量 <code>immutable variable</code> 两种。</p>
<p>可变变量就是普通的变量，例如在Python中，我们可以通过 <code>x = 1</code> 定义一个 <code>int</code> 类型的变量 <code>x</code>，然后再通过 <code>x = 2</code> 令变量 <code>x</code> 的值改为 <code>2</code>；在Rust中也是相同的，我们可以通过 <code>let mut x: u32 = 1;</code> 定义一个 <code>u32</code> 整型可变变量 <code>x</code>，然后通过 <code>x = 2u32;</code> 令可变变量 <code>x</code> 的值变为 <code>2</code>。</p>
<p>Rust最神奇的设计就是不可变变量，而且变量默认就是不可变的。例如 <code>let x = 1;</code> 会定义一个 <code>i32</code> 整型不可变变量 <code>x</code>，如果我们想把上面这个 <code>x</code> 的值改成 <code>2</code> 将会导致编译不通过。这种机制对于内存安全要求高的代码来说很棒，因为Rust从语言机制上确保了不可变变量的内存安全，特别是在多线程异步开发中，某些逻辑上应该保持不变的量可能因为错误的程序设计导致在运行时发生了变化，而这些错误是非常难追溯的。因此，Rust在注重内存安全的领域受到了广泛应用，例如区块链领域。</p>
<p>定义变量的关键字是 <code>let</code>；若要定义可变变量，还需要加上修饰词 <code>mut</code>。</p>
<span id="more"></span>
<h3 id="变量的遮蔽">变量的遮蔽</h3>
<p>Rust允许变量遮蔽。所谓的变量遮蔽指的是，如果在同一个作用域中出现了两个同名变量，那么在访问这个名字的变量时将会访问最后定义的那个同名变量，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>, x);</span><br></pre></td></tr></table></figure>
<p>上面这段函数将会输出 <code>x = 2</code>。</p>
<p>上面提到了作用域这个概念，所谓的作用域简单理解就是 <code>&#123;&#125;</code> 围成的区域，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 这是main函数作用域</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">2</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 这是内部作用域</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>, x);</span><br><span class="line">        <span class="comment">// 离开内部作用域后，let x = 3; 语句定义的变量x失效</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码运行后，将会输出 <code>x = 3</code> 和 <code>x = 2</code> 结果。</p>
<h3 id="变量的命名风格">变量的命名风格</h3>
<p>在Rust中，变量的命名遵循 <code>snake_case</code>，这和Python是一样的命名风格。</p>
<h3 id="不可变变量与常量">不可变变量与常量</h3>
<p>不可变变量听上去很像是一个常量，毕竟这两个概念都要求对应内存地址的值不可被改变。但是不可变变量和常量是存在区别的，是两个完全不同的概念。</p>
<p>首先，不可变变量虽然不可变，但仍然是一个变量，定义关键字为 <code>let</code>；常量不是变量，定义关键字也不一样，是 <code>const</code>。</p>
<p>其次，不可变变量在定义时，可以不给出变量类型，例如 <code>let x = 1;</code> 语句，默认定义一个 <code>i32</code> 类型的整型变量；常量在定义时，必须指明数据类型，例如 <code>const x = 1;</code> 是不允许的，必须明确告诉编译器 <code>const x: u32 = 1;</code>，这是因为常量定义表达式是在编译时进行计算的</p>
<p>另外，不可变变量可以绑定到一个表达式(expression)的返回值上，例如 <code>let x = some_func();</code>，表达式和绑定的概念在后面会给出；常量在定义时，只能绑定到一个数值上，而不能绑定到一个表达式的返回值上。</p>
<p>最后，Rust不允许常量的遮蔽，如果出现了两个同名常量定义，那么Rust编译器将会报错。</p>
<p>总之，常量和不可变变量是相当不同的两个概念。常量的命名规范是常量名全大写，语义之间用 <code>_</code> 下划线分隔开。</p>
<h2 id="数据类型">数据类型</h2>
<p>Rust中的数据类型可以分为以下两类</p>
<ul>
<li>标量类型</li>
<li>复合类型</li>
</ul>
<h3 id="标量类型数据-scalar">标量类型数据 Scalar</h3>
<p>Rust中的标量类型数据包括</p>
<ul>
<li>整型</li>
<li>浮点数</li>
<li>布尔量</li>
<li>字符</li>
</ul>
<h4 id="整型">整型</h4>
<p>Rust中的整型可以根据是否有符号分为有符号整型和无符号整型</p>
<ul>
<li>有符号整型
<ul>
<li><code>i8</code> 8位有符号整型</li>
<li><code>i16</code> 16位有符号整型</li>
<li><code>i32</code> 32位有符号整型</li>
<li><code>i64</code> 64位有符号整型</li>
<li><code>i128</code> 128位有符号整型</li>
<li><code>isize</code> 位数与CPU位数相同的有符号整型</li>
</ul></li>
<li>无符号整型
<ul>
<li><code>u8</code> 8位无符号整型</li>
<li><code>u16</code> 16位无符号整型</li>
<li><code>u32</code> 32位无符号整型</li>
<li><code>u64</code> 64位无符号整型</li>
<li><code>u128</code> 128位无符号整型</li>
<li><code>usize</code> 位数与CPU位数相同的无符号整型</li>
</ul></li>
</ul>
<p>Rust默认整型类型为 <code>i32</code>。</p>
<p>这里想强调一下Rust中的溢出保护机制。使用 <code>debug</code> 模式编译时，Rust编译器会检查可能发生的溢出，如果检查到代码某处可能会溢出，Rust编译器会报Panic；使用 <code>release</code> 模式编译时，Rust编译器不会检查溢出，但是如果程序真的在运行时发生溢出，Rust默认会对溢出的变量进行 <code>wrapping</code> 保护，例如 <code>let x: i8 = 128;</code> 会导致溢出，<code>release</code> 模式下编译后，当程序运行到这一行代码时，Rust会自动将变量 <code>wrapping</code> 为 <code>-128</code>。所谓的 <code>wrapping</code> 其实就是将溢出的那一位直接丢弃，然后以补码的形式解析剩余位。在实际开发中，不能依赖 <code>wrapping</code> 机制解决溢出问题，因为会产生溢出的代码是错误的代码，程序员应该自行修复代码的错误。</p>
<p>Rust提供了一些处理溢出的函数，例如</p>
<ul>
<li><code>wrapping_*</code> 可以利用 <code>wrapping</code> 机制进行溢出处理，例如 <code>wrapping_add</code> 可以在加法溢出时进行结果的 <code>wrapping</code></li>
<li><code>checked_*</code> 可以在运算发生溢出时返回 <code>None</code>，而不是返回错误的数据</li>
<li><code>overflowing_*</code> 可以在运算发生溢出时返回溢出的错误值以及一个溢出标志位</li>
<li><code>saturating_*</code> 方法可以限制运算结果的范围，若上溢则返回数据类型能够支持的最大值，若下溢则返回数据类型能够支持的最小值</li>
</ul>
<h4 id="浮点数">浮点数</h4>
<p>Rust提供 <code>f32</code> 和 <code>f64</code> 两种类型的浮点数，默认类型为 <code>f64</code>，因为现代CPU大多是64位的，进行 <code>f64</code> 浮点计算和 <code>f32</code> 浮点计算的运算性能是相近的，但精度却高了非常多，建议非必要不用 <code>f32</code>。</p>
<h4 id="布尔量">布尔量</h4>
<p>Rust中的布尔量有两个可能的值：<code>true</code> 和 <code>false</code>。布尔量的大小为1个字节，用 <code>bool</code> 声明。</p>
<p>布尔量在Rust中没有什么特别的，不过值得一提的是，Rust中的 <code>if</code> 控制语句不像C或Python，不支持自动将整型、浮点数或字符自动转为布尔量，<code>if</code> 后面必须跟的是纯粹的布尔量，形如 <code>if 1.8</code> 的语句是不会自动转义为 <code>if true</code> 的。</p>
<h4 id="字符">字符</h4>
<p>Rust的字符和其他语言有很大的不同。像C语言中的字符，一般是一个字节的ASCII码，但是Rust中的字符是4字节的Unicode码，代码中甚至可以出现emoji表情，例如 <code>let cat = '🐱';</code>。</p>
<p>Rust中的字符用单引号 <code>''</code> 标注，以与字符串区分。</p>
<h3 id="复合类型">复合类型</h3>
<p>Rust中的复合类型主要包括以下两类</p>
<ul>
<li>元组tuple</li>
<li>数组array</li>
</ul>
<h4 id="元组">元组</h4>
<p>Rust中的元组和Python中的元组几乎一致，同样</p>
<ul>
<li>由 <code>()</code> 标注</li>
<li>元组内部各元素的数据类型不要求一致</li>
<li>可以通过索引从元组中读取元素</li>
</ul>
<p>不过Rust作为一种静态类型(statically typed)语言，在元组定义时仍然提出了各元素类型定义的要求。典型的Rust元组定义语句如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>, <span class="type">u32</span>, <span class="type">bool</span>) = (<span class="number">10</span>, <span class="number">20</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>Rust从元组中读取元素数据的方法与Python略有不同。Rust支持通过模式匹配(pattern matching)的方式从元组中解构(destructuring)数据，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>, <span class="type">u32</span>, <span class="type">bool</span>) = (<span class="number">10</span>, <span class="number">20</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> (x, y, z) = tup;</span><br></pre></td></tr></table></figure>
<p>经过解构，可以得到变量类型为 <code>i32</code>，值为 <code>10</code> 的变量 <code>x</code>；变量类型为 <code>u32</code>，值为 <code>20</code> 的变量 <code>y</code>；变量类型为 <code>bool</code>，值为 <code>true</code> 的变量 <code>z</code>。</p>
<p>Rust还支持通过下标进行元组元素的访问，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>, <span class="type">u32</span>, <span class="type">bool</span>) = (<span class="number">10</span>, <span class="number">20</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = tup.<span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = tup.<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">z</span> = tup.<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>上面这种访问方式和通过模式匹配方式从元组中解构数据的效果是一样的。通过下标访问更加自然灵活，通过解构访问代码简单紧凑，各有各的好处。</p>
<p>如果一个元组中没有任何值，就是一个孤零零的 <code>()</code>，那么这种元组的类型被称为单元类型(unit type)，其值为单元值(unit value)；不返回任何值的表达式实际上会隐式地返回一个 <code>()</code>。</p>
<h4 id="数组">数组</h4>
<p>Rust中的数组和C中的数组非常相似，同样</p>
<ul>
<li>数组中的元素数据类型必须一致</li>
<li>数组长度在定义时确定，不可变</li>
</ul>
<p>数组因为上述特性，可以被分配在内存的栈上，而且其顺序结构使得元素的访问速度非常快。不过数组因为长度固定，所以不太灵活，对于一些数据长度不确定的场合，使用Rust中可以动态改变长度的 <code>vector</code> 会更合适，不过在这里不细说。</p>
<p>数组在定义时，必须声明元素数据类型和数组长度，如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">u32</span>; <span class="number">6</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br></pre></td></tr></table></figure>
<p>可以看出，上述数组的数据类型定义为 <code>[u32; 6]</code>，其中分号前的内容指明了数组元素的数据类型，分号后的内容指明了数组长度。数组还可以以以下方式定义</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">0</span>; <span class="number">5</span>];</span><br></pre></td></tr></table></figure>
<p>这样定义的数组等效于 <code>let arr = [0, 0, 0, 0, 0];</code>。</p>
<p>虽然数组在定义时，必须声明元素数据类型和数组长度，但是形如 <code>[u32; 6]</code> 这样的数据类型定义却不是必须的，这是因为Rust整型和浮点数都有默认数据类型，编译器也可以通过定义式中数组的元素数量来判断数组长度，所以在实际coding时，只需要保证编译器能够推断出数组的元素数据类型和数组长度即可。</p>
<p>Rust访问数组元素的方式和C一致，也是通过下标进行元素访问，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = arr[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>, x);</span><br></pre></td></tr></table></figure>
<p>上述代码将会输出 <code>x = 1</code>。</p>
<p>注意，如果Rust访问数组时出现索引越界，程序会因为panic而异常退出，以保证不存在通过索引越界访问相邻内存的漏洞。</p>
<h2 id="函数">函数</h2>
<h3 id="rust函数">Rust函数</h3>
<p>Rust中的函数以 <code>fn</code> 标识，一个典型的Rust函数定义如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>(x: <span class="type">u32</span>, y: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">    x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，Rust中的函数签名和Python是非常相似的，同样是用 <code>:</code> 进行形参数据类型的标注，用 <code>-&gt;</code> 进行返回值数据类型的标注；不同之处在于Python使用 <code>:</code> 标注函数作用域，而Rust使用 <code>&#123;&#125;</code> 标注函数作用域。</p>
<p>函数签名中的参数称为形参(parameter)，在调用函数时传入的实值称为实参(argument)，不过在日常交流中一般不区分parameter和argument这两个概念的区别。</p>
<h3 id="语句和表达式">语句和表达式</h3>
<p>Rust是一门基于表达式(expression)的语言。所谓的表达式，指的是有返回值的一个语句，例如 <code>x &gt; 1</code> 这个表达式会返回一个布尔量，例如上面我们定义的 <code>add()</code> 函数会返回一个 <code>u32</code> 整型。语句(statement)则不会产生返回值，例如 <code>let x = 1;</code>，就是一个语句。由于语句不产生返回值，因此形如 <code>let x = (let y = 1);</code> 这样的代码是错误的。这和C等语言有一定的区别，这些语言允许形如 <code>x = y = 1;</code> 这样的赋值语句，因为在这些语言中赋值也会返回一个值。</p>
<p>在Rust函数中，我们可以不通过 <code>return</code> 来返回一个值，而是可以通过不写分号，利用表达式来作为函数的返回值。例如上面的 <code>add()</code> 函数，函数体内只有一句 <code>x + y</code>，注意这行代码是没有分号的，所以这是一个表达式，相当于 <code>return x + y;</code>。当然，这是因为表达式出现在函数的尾部，所以Rust会自动将这句表达式作为函数的返回值。</p>
<p>Rust函数定义是一个语句，但函数调用是一个表达式，所以 <code>let z = add(x, y);</code> 这样的代码是合法的；另外，定义作用域的大括号 <code>&#123;&#125;</code> 也形成一个表达式，因此 <code>let a = &#123;let x = 1; x + 1&#125;;</code> 也是合法的。和函数一样，作用域的末行代码必须是一条表达式，否则这个作用域将会是没有返回值的表达式，返回值将是一个 <code>()</code>。</p>
<h2 id="注释">注释</h2>
<p>Rust的注释风格与C语言类似，单行注释以 <code>//</code> 开头。Rust不建议出现以下风格的注释</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>; <span class="comment">// define a variable</span></span><br></pre></td></tr></table></figure>
<p>Rust建议的注释风格如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// define a variable</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>即同一行代码中尽量不要既存在普通代码，又存在注释。</p>
<p>Rust还支持文档注释，这一点将在后面的包管理章节进行介绍。</p>
<h2 id="控制流">控制流</h2>
<p>在猜数字游戏中提到了 <code>match</code> 控制流，这是一个类似于C语言中 <code>switch</code> 的控制流。由于 <code>match</code> 属于Rust独有的控制流，因此本章节暂不做介绍。下面介绍Rust中的 <code>if-else</code> 控制流、<code>loop</code> 控制流、<code>for</code> 控制流和 <code>while</code> 控制流。</p>
<h3 id="if-else-控制流"><code>if-else</code> 控制流</h3>
<p>Rust中的 <code>if-else</code> 控制几乎与C语言完全相同，但是前面在介绍布尔量时也提到了，不像C语言，Rust严格要求 <code>if</code> 或 <code>else</code> 后面的条件表达式返回值类型为 <code>bool</code>，如果返回值类型为整型、浮点型或其他别的类型，Rust编译器将会报错。</p>
<p><code>if</code> 控制流还可以用在 <code>let</code> 语句中，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="keyword">if</span> a &gt; <span class="number">1</span> &#123;<span class="number">1</span>&#125; <span class="keyword">else</span> &#123;<span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="loop-控制流"><code>loop</code> 控制流</h3>
<h4 id="循环标签">循环标签</h4>
<p><code>loop</code> 控制流是Rust中一个比较有趣的循环控制流。<code>loop &#123;&#125;</code> 本身和 <code>while true &#123;&#125;</code> 是一样的，都是无限循环，但是 <code>loop</code> 控制流支持对 <code>loop</code> 打标签(loop label)，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&#x27;outer_loop</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="symbol">&#x27;inner_loop</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，这个 <code>loop label</code> 是一个形如 <code>'loop_name: loop</code> 的标签。</p>
<p><code>loop</code> 循环可以用 <code>break</code> 关键字跳出，不过 <code>loop label</code> 的存在使得我们可以指定 <code>break</code> 跳出哪一个 <code>loop</code>，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&#x27;outer_loop</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="symbol">&#x27;inner_loop</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> x &gt; <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> <span class="symbol">&#x27;outer_loop</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Rust的这个 <code>loop label</code> 机制在循环嵌套的时候非常有用，因为我们可能会在应用中碰到内层循环中判定某个条件，然后直接跳出整个嵌套循环的场景，但普通的 <code>break</code> 只能跳出当前的循环。在Rust中，通过标识最外层 <code>loop</code>，我们就可以直接通过 <code>break</code> 最外层的 <code>loop</code> 跳出整个大循环。</p>
<h4 id="从循环返回值">从循环返回值</h4>
<p><code>loop</code> 循环在 <code>break</code> 时可以提供一个返回值，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">cnt</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="keyword">loop</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> cnt &lt; <span class="number">10</span> &#123;</span><br><span class="line">        cnt = cnt + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码将会在结束循环后返回 <code>cnt</code> 的值，这种设计在一些重连机制中非常实用。</p>
<h3 id="while-控制流"><code>while</code> 控制流</h3>
<p><code>while</code> 控制流和C语言基本上是一致的，没有什么特别之处。</p>
<h3 id="for-控制流"><code>for</code> 控制流</h3>
<p>Rust中的 <code>for</code> 控制流和Python中的 <code>for</code> 比较类似，可以遍历集合中的元素。对于一些需要用到索引的地方，可以这样使用 <code>for</code> 循环，如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">cnt</span> <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Current counter = &#123;&#125;&quot;</span>, cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的循环就会在数组 <code>[1, 2, 3]</code> 中完成元素的遍历。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析笔记-最小二乘法</title>
    <url>/2022/11/07/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/</url>
    <content><![CDATA[<h2 id="由函数表估计函数关系的常见方法">由函数表估计函数关系的常见方法</h2>
<ol type="1">
<li>多项式插值</li>
<li>样条曲线拟合</li>
</ol>
<p>多项式插值是一种很简单的函数拟合方法，对于关系比较简单的函数表来说效果还可以，但是如果函数表中的点复杂一些，就会有很大的误差，而且很容易出现Runge现象；样条曲线拟合是一种很好的函数拟合方式，每两个函数点之间都进行一次三次样条插值，且在插值点上能够实现一阶或两阶导数相等，但是计算量非常大。</p>
<p>上面提到的两种方法都有各自的优势和弊端。下面介绍另外一种函数拟合的方式——最小二乘法。最小二乘法可以克服数值振荡的问题，同时计算量也能够得到控制。</p>
<span id="more"></span>
<h2 id="什么是最小二乘法">什么是最小二乘法？</h2>
<p>最小二乘法是这样一系列操作：在函数空间 <span class="math inline">\(\Phi\)</span> 中，求一个最优的函数 <span class="math inline">\(s^*(x)\)</span>，使得</p>
<p><span class="math display">\[
\sum_{i=0}^m\omega_i [s^*(x_i) - f(x_i)]^2=min_{s(x)\in \Phi} \sum_{i=0}^m \omega_i [s(x_i) - f(x_i)]^2
\]</span></p>
<p>其中 <span class="math inline">\(\omega_i\)</span> 表示 <span class="math inline">\(x=x_i\)</span> 处的权。最小二乘法本质上是函数逼近。</p>
<h2 id="最小二乘法的具体做法">最小二乘法的具体做法</h2>
<p>求上面所述的 <span class="math inline">\(s^*(x)\)</span> 可以等价为求一系列 <span class="math inline">\(\{a_n\}\)</span> 使得</p>
<p><span class="math display">\[
\sum_{i=0}^m [a_i\varphi_i(x_i)-f(x_i)]^2
\]</span></p>
<p>取得极小值。为此可以写出在第 <span class="math inline">\(k\)</span> 个基函数 <span class="math inline">\(\varphi_k(x)\)</span> 上的法方程</p>
<p><span class="math display">\[
\sum_{j=0}^m (\varphi_j, \varphi_k)a_j = (f, \varphi_k), k = 0, 1, 2, ..., n
\]</span></p>
<p>其中，<span class="math inline">\((f, g)\)</span> 表示函数 <span class="math inline">\(f\)</span> 和 <span class="math inline">\(g\)</span> 在所有插值点上的函数值之积求和。法方程可以总结为被逼近函数 <span class="math inline">\(f(x)\)</span> 与基函数 <span class="math inline">\(\varphi_k(x)\)</span> 在插值点上的积之总和等于基函数 <span class="math inline">\(\varphi_k(x)\)</span> 与其他所有线性无关基函数 <span class="math inline">\(\varphi_j(x)\)</span> 在插值点上的积之总和的加权和，其中加权系数为 <span class="math inline">\(a_j\)</span>。</p>
<p>法方程展开可以得到以下等式</p>
<p><span class="math display">\[
\sum_{j=0}^m a_j\sum_{i=0}^n \omega_i(x_i) \varphi_j(x_i) \varphi_k(x_i) = \sum_{i=0}^n \omega_i(x_i) \varphi_k(x_i) f(x_i), k=0, 1, 2, ..., n
\]</span></p>
<p><em>由法方程可以推导出 <span class="math inline">\(s^*(x)\)</span> 的唯一性</em> 由于 <span class="math inline">\({\varphi(x)}\)</span> 是一组线性无关的基函数，因此上述方程组是非奇异的，那么必然能够解出唯一的一组 <span class="math inline">\(\{a_j\}\)</span>，所以 <span class="math inline">\(s^*(x)\)</span> 存在且唯一。</p>
<h2 id="最小二乘逼近的技巧">最小二乘逼近的技巧</h2>
<p>提高最小二乘法拟合精度的技巧主要在于选择合适的函数空间 <span class="math inline">\(\Phi\)</span>。所谓选择合适的函数空间，其实就是选择合适的拟合模型，这一点对于做ECM拟合的人来说应该是非常熟悉的事情了。一种常用的模型是多项式模型 <span class="math inline">\(\{x^n\}\)</span>，但用这个模型进行最小二乘法拟合的效果比多项式插值可能还要差，因为多项式的次数太高了，很容易出现病态问题——即函数表的数据稍有变化，拟合函数的参数 <span class="math inline">\(a_j\)</span> 就出现剧烈的变化。所以多项式模型做最小二乘逼近是很少使用的。</p>
<p>一种比较好的方法是，采用<strong>正交多项式族</strong>作为基函数。所谓的正交多项式族，是指一些形如 <span class="math inline">\(ax^3 + bx^2 + cx\)</span> 以及 <span class="math inline">\(ax^2 + bx + c\)</span> 的函数组成的一组基函数，这些多项式函数两两正交。</p>
<h3 id="正交多项式族">正交多项式族</h3>
<p>正交多项式族可以用以下公式求得</p>
<p><span class="math display">\[
\begin{aligned}
&amp;p_0(x) = 1\\
&amp;p_{k+1}(x) = (x -\alpha_k)p_k(x) - \beta_{k-1} p_{k-1}(x)\\
\end{aligned}
\]</span></p>
<p>其中 <span class="math display">\[
\begin{aligned}
&amp; \alpha_k = \frac{(xp_k, p_k)}{(p_k, p_k)}\\
&amp; \beta_{k-1} = \frac{(p_k, p_k)}{(p_{k-1}, p_{k-1})}\\
\end{aligned}
\]</span></p>
<p>同样，<span class="math inline">\((p_k, p_k)\)</span> 表示函数 <span class="math inline">\(p_k(x)\)</span> 和自己在所有插值点上的函数值之积求和。</p>
<p>由于正交多项式族是通过给定的插值点构造出来的，因此最易于计算的一组正交多项式族应当满足在插值点上正交，即在插值点上与其他所有基函数的函数值之积求和恰好为0，那么法方程就可以简化为</p>
<p><span class="math display">\[
a_k(\varphi_k, \varphi_k) = (f, \varphi_k), k= 0, 1, 2, ..., n
\]</span></p>
<p>所以，加权系数 <span class="math inline">\({a_k}\)</span> 的表达式就变得非常简单</p>
<p><span class="math display">\[
a_k = \frac{(f, \varphi_k)}{(\varphi_k, \varphi_k)}
\]</span></p>
<h3 id="利用正交多项式族进行最小二乘逼近">利用正交多项式族进行最小二乘逼近</h3>
<ol type="1">
<li>写出第 <span class="math inline">\(k\)</span> 项正交多项式 <span class="math inline">\(p_k(x) = (x - \alpha_{k-1})p_{k-1}(x) - \beta_{k-2}p_{k-2}(x)\)</span></li>
<li>由 <span class="math inline">\(p_k(x)\)</span> 可以计算得到 <span class="math inline">\(a_k=\displaystyle\frac{(f, \varphi_k)}{(\varphi_k, \varphi_k)}\)</span></li>
<li>第 <span class="math inline">\(k\)</span> 项正交多项式基函数 <span class="math inline">\(g_k(x)=a_kp_k(x)+g_{k-1}(x)\)</span></li>
<li>为了求出第 <span class="math inline">\(k+1\)</span> 项正交多项式 <span class="math inline">\(p_{k+1}(x)\)</span>，必须求出 <span class="math inline">\(\alpha_k\)</span> 和 <span class="math inline">\(\beta_{k-1}\)</span>，<span class="math inline">\(\alpha_k=\displaystyle\frac{(xp_k, p_k)}{(p_k, p_k)}\)</span>, <span class="math inline">\(\beta_{k-1} = \displaystyle\frac{(p_k, p_k)}{(p_{k-1}, p_{k-1})}\)</span></li>
<li>写出第 <span class="math inline">\(k+1\)</span> 项正交多项式 <span class="math inline">\(p_{k+1}(x)\)</span></li>
</ol>
<h2 id="周期函数逼近">周期函数逼近</h2>
<p>如果被逼近函数是一个周期函数，那么可以在函数空间 <span class="math inline">\(\Phi = \{1, sinx, cosx, sin2x, cos2x, ..., sinnx, cosnx\}\)</span> 上求最佳平方逼近函数 <span class="math inline">\(s_n(x) = \displaystyle\frac{a_0}{2} + \sum_{j=1}^n(a_jcosjx + b_jsinjx)\)</span>，其中</p>
<p><span class="math display">\[
\begin{aligned}
&amp;a_j = \frac{1}{\pi} \int^{2\pi}_0 f(x) cosjxdx, \ j = 0, 1, ...,n\\
&amp;b_j = \frac{1}{\pi} \int^{2\pi}_0 f(x) sinjxdx, \ j = 1, 2, ..., n
\end{aligned}
\]</span></p>
<p>其实实际应用中不可能进行连续积分，一般只能给出离散的采样点 <span class="math inline">\((x_i, y_i)\)</span>，那么可以将上面的连续积分离散化，得到</p>
<p><span class="math display">\[
\begin{aligned}
&amp;a_j = \frac{2}{N}\sum_{i=0}^{N-1}y_icoskx_i, \  k=0, 1, ..., n\\
&amp;b_j = \frac{2}{N}\sum_{i=0}^{N-1}y_isinkx_i, \ k = 1, 2, ..., n
\end{aligned}
\]</span></p>
<p>不过需要注意，上面的 <span class="math inline">\(x\)</span> 应线性变换至 <span class="math inline">\((0, 2\pi)\)</span>。</p>
]]></content>
      <categories>
        <category>University</category>
      </categories>
      <tags>
        <tag>Numerical Analysis</tag>
        <tag>Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析笔记-数值积分</title>
    <url>/2022/11/14/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86/</url>
    <content><![CDATA[<h2 id="数值积分引入">数值积分引入</h2>
<p>对于连续函数 <span class="math inline">\(f(x)\)</span> 来说，如果这个函数的表达式比较简单，我们一般可以使用Newton-Leibniz公式进行积分</p>
<p><span class="math display">\[
\int_a^b f(x)dx = F(b) - F(a)
\]</span></p>
<p>其中，<span class="math inline">\(F&#39;(x)=f(x)\)</span>，即 <span class="math inline">\(F(x)\)</span> 是 <span class="math inline">\(f(x)\)</span> 的原函数。</p>
<p>使用Newton-Leibniz公式进行积分其实是非常理想的情况。假如函数 <span class="math inline">\(f(x)\)</span> 的表达式非常复杂，或是根本就不可积，或是根本没有表达式，仅仅是给出了某些节点上的函数值，那么我们就只能通过数值积分的方式进行近似的积分求解了。</p>
<span id="more"></span>
<h2 id="数值积分误差估计">数值积分误差估计</h2>
<p>对于函数 <span class="math inline">\(f(x)\in C[a, b]\)</span>，假如存在一个 <span class="math inline">\(n\)</span> 阶多项式 <span class="math inline">\(P_n(x)\)</span>，可以近似有 <span class="math inline">\(f(x) \approx P_n(x)\)</span>，那么应能近似得到</p>
<p><span class="math display">\[
\int_a^bf(x)dx \approx \int_a^bP_n(x)dx
\]</span></p>
<p>对于上述数值积分，其误差是可以估计的。</p>
<p><span class="math display">\[
\int_a^bf(x)dx - \int_a^bP_n(x)dx = \int_a^b[f(x)-P_n(x)]dx=\int_a^bR_n(x)dx
\]</span></p>
<p>如果有 <span class="math inline">\(max_{a\leq x \leq b}R_n(x)\leq \varepsilon\)</span>，那么显然，上述数值积分的误差限为</p>
<p><span class="math display">\[
\int_a^bR_n(x)dx \leq (b-a)\varepsilon
\]</span></p>
<p>如果 <span class="math inline">\(\varepsilon\)</span> 很小的话，数值积分的误差限也很小，那么使用数值积分来近似真实的积分值，完全是可行的。</p>
<h2 id="求积公式">求积公式</h2>
<h3 id="中点公式">中点公式</h3>
<h4 id="中点公式的计算">中点公式的计算</h4>
<p>近似求积分的一种非常自然的想法，是使用一个矩形围成的面积来近似函数曲线在区间上与x轴所围成的面积。这种做数值积分的方式可以概括为中点公式。若 <span class="math inline">\(f(x) \in C[a,b]\)</span>，那么</p>
<p><span class="math display">\[
\int_a^bf(x)dx \approx (b-a)f(\frac{a+b}{2})
\]</span></p>
<p>利用区间中点对应的函数值乘以区间长度，得到的矩形面积，近似函数积分。</p>
<h4 id="中点公式的误差分析">中点公式的误差分析</h4>
<p>对于上述近似，可以进行近似误差的估计。假设函数 <span class="math inline">\(f(x)\)</span> 在区间 <span class="math inline">\([a, b]\)</span> 上二阶可导，那么根据泰勒公式</p>
<p><span class="math display">\[
f(x) = f(\frac{a+b}{2}) + f&#39;(\frac{a+b}{2})(x-\frac{a+b}{2}) + \frac{f&#39;&#39;(\xi)}{2}(x-\frac{a+b}{2})^2
\]</span></p>
<p>对上述等式两边做积分，可以得到</p>
<p><span class="math display">\[
\int_a^bf(x)dx-(b-a)f(\frac{a+b}{2}) = \frac{1}{24}(b-a)^3f&#39;&#39;(\xi)
\]</span></p>
<p>也就是说，中点公式的误差差不多就是在 <span class="math inline">\((b-a)^3\)</span> 量级。</p>
<h3 id="梯形公式">梯形公式</h3>
<h4 id="梯形公式的计算">梯形公式的计算</h4>
<p>梯形公式是另一种非常自然的近似积分想法。从图形上来看，就是将 <span class="math inline">\(f(a)\)</span> 与 <span class="math inline">\(f(b)\)</span> 相连，形成一条直线，然后计算这条线段在 <span class="math inline">\([a, b]\)</span> 上的积分。</p>
<p><span class="math display">\[
\int_a^bf(x)dx = \frac{1}{2}(b-a)[f(a)+f(b)]
\]</span></p>
<h4 id="梯形公式的误差分析">梯形公式的误差分析</h4>
<p>梯形公式涉及到一条一次拟合多项式，因此可以用一次多项式拟合的误差来计算梯形公式的误差，如下</p>
<p><span class="math display">\[
R_1(x) = f(x) - L_1(x) = \frac{1}{2}f&#39;&#39;(\xi)(x-a)(x-b)
\]</span></p>
<p>那么</p>
<p><span class="math display">\[
\int_a^bf(x)dx - \int_a^bL_1(x)dx = \int_a^bR_1(x) = -\frac{1}{12}(b-a)^3f&#39;&#39;(\xi)
\]</span></p>
<p>分析到这里，可能出现了比较反直觉的一点性质，即梯形公式的误差似乎要比中点公式的误差还要大，后者的系数是 <span class="math inline">\(\frac{1}{24}\)</span>。</p>
<h3 id="simpson公式">Simpson公式</h3>
<h4 id="simpson公式的计算">Simpson公式的计算</h4>
<p>Simpson公式，也叫抛物型公式。这种数值积分方式实际上就是在区间上用一条抛物线来近似积分，即</p>
<p><span class="math display">\[
\int_a^bf(x)dx \approx \int_a^bL_2(x)dx=\frac{1}{6}(b-a)[f(a) + 4f(\frac{a+b}{2}) + f(b)]
\]</span></p>
<h4 id="simpson公式的误差估计">Simpson公式的误差估计</h4>
<p>和梯形公式类似的，Simpson公式的近似误差也可以通过二次多项式的误差估计得到。由于二次多项式的误差分析展开比较复杂，也不是什么重点，这边的笔记就略去了，最后可以得到</p>
<p><span class="math display">\[
\int_a^bf(x)dx - \int_a^bL_2(x)dx = -\frac{(b-a)^5}{2880}f^{(4)}(\xi)
\]</span></p>
<p>可以观察到，Simpson公式的近似误差量级是 <span class="math inline">\((b-a)^5\)</span>，比梯形公式和中点公式的近似误差要小两个量级。事实上，Simpson近似积分的精度确实要比前面两种高很多。</p>
<h3 id="求积公式一般化">求积公式一般化</h3>
<p>观察中点公式、梯形公式和Simpson公式，可以发现一个共同点：这些公式都可以写成 <span class="math inline">\(\sum_{i=0}^{n-1}\omega_if(x_i)\)</span> 的形式。因此，上面的这些公式都可以称为求积公式。</p>
<p>求积公式有一个叫做<strong>代数精度</strong>的指标。所谓代数精度，指的是这个求积公式最高能够对多少次的多项式精确求积分。若某个求积公式对于 <span class="math inline">\(m\)</span> 阶多项式 <span class="math inline">\(x^m\)</span> 都可以满足精确求解的要求，但是对于 <span class="math inline">\(m+1\)</span> 阶多项式就不满足精确求积分的要求，那么这个求积公式的代数精度就为 <span class="math inline">\(m\)</span> 次。</p>
<h2 id="复合求积">复合求积</h2>
<p>前面提到，数值积分的误差与区间长度有关，像中间公式的积分误差与区间长度的3次方呈正相关关系，Simpson公式的积分误差与区间长度的5次方呈正相关关系。那么，为了减小数值积分的误差，就必须减小区间长度。事实上，对于 <span class="math inline">\(f(x) \in C[a, b]\)</span>，我们往往会将区间 <span class="math inline">\([a, b]\)</span> 等分为 <span class="math inline">\(n\)</span> 份，在一个小区间 <span class="math inline">\([x_i, x_{i+1}]\)</span> 上进行求积，即</p>
<p><span class="math display">\[
\int_a^bf(x)dx = \sum_{i=0}^{n-1}\int_{x_i}^{x_{i+1}}f(x)dx
\]</span></p>
<p>一般来说，我们会将小区间的长度称为<strong>积分步长</strong>，用符号 <span class="math inline">\(h\)</span> 表示。</p>
<p><span class="math display">\[
h = \frac{b-a}{n}
\]</span></p>
<h3 id="中点复合求积">中点复合求积</h3>
<p>对一个小区间内的积分进行数值近似，可以得到</p>
<p><span class="math display">\[
\int_{x_i}^{x_{i+1}}f(x)dx=(x_{i+1}-x_i)f(x_{i+\frac{1}{2}})=hf(x_{i+\frac{1}{2}})
\]</span></p>
<p>那么，整个区间的积分即</p>
<p><span class="math display">\[
\int_a^bf(x)dx = \sum_{i=0}^{n-1}hf(x_{i+\frac{1}{2}}) \triangleq M_n
\]</span></p>
<h3 id="梯形复合求积">梯形复合求积</h3>
<p>同上，很容易得到</p>
<p><span class="math display">\[
\int_a^bf(x)dx = \sum_{i=0}^{n-1}\frac{h}{2}[f(x_i)+f(x_{i+1})] = \frac{h}{2}[f(a)+f(b)+2\sum_{i=1}^{n-1}f(x_i)] \triangleq T_n
\]</span></p>
<h3 id="simpson复合求积">Simpson复合求积</h3>
<p><span class="math display">\[
\int_a^bf(x)dx = \sum_{i=0}^{n-1}\frac{h}{6}[f(x_i) + f(x_{i+1}) + 4f(x_{i+\frac{1}{2}})]=\frac{h}{6}[f(a) + f(b) + 4\sum_{i=1}^{n-1}f(x_{i+\frac{1}{2}})+2\sum_{i=1}^{n-1}f(x_i)] \triangleq S_n
\]</span></p>
<h3 id="上述复合求积公式的误差分析">上述复合求积公式的误差分析</h3>
<p>为了进行上述复合求积公式的误差限分析，首先引入一个定理：对于 <span class="math inline">\(f(x) \in C[a, b]\)</span>，存在一点 <span class="math inline">\(\eta \in (a, b)\)</span>，满足 <span class="math inline">\(\sum_{i=0}^{n-1}\omega_if(x_i)=f(\eta)\sum_{i=0}^{n-1}\omega_i\)</span>。</p>
<p>这个定理的求证其实非常简单。对于 <span class="math inline">\(f(x) \in C[a, b]\)</span>，必然存在一个 <span class="math inline">\(f_{min}\)</span> 和一个 <span class="math inline">\(f_{max}\)</span>，很自然有</p>
<p><span class="math display">\[
f_{min}\sum_{i=0}^{n-1}\omega_i \leq \sum_{i=0}^{n-1}\omega_i f(x_i) \leq f_{max}\sum_{i=0}^{n-1}\omega_i
\]</span></p>
<p>由于 <span class="math inline">\(f(x)\)</span> 在区间 <span class="math inline">\([a, b]\)</span> 上连续，那么必然存在某一个 <span class="math inline">\(f\)</span>，恰好满足</p>
<p><span class="math display">\[
f\sum_{i=0}^{n-1}\omega_i=\sum_{i=0}^{n-1}\omega_i f(x_i)
\]</span></p>
<h4 id="中点复合求积误差">中点复合求积误差</h4>
<p>有了上面这个定理，求复合求积误差就很容易了。对于</p>
<p><span class="math display">\[
\sum_{i=0}^{n-1}\int_{x_i}^{x_{i+1}}f(x)dx = h\sum_{i=0}^{n-1}f(x_{i+\frac{1}{2}})
\]</span></p>
<p>作差，得到</p>
<p><span class="math display">\[
\sum_{i=0}^{n-1}[\int_{x_i}^{x_{i+1}}f(x)dx-hf(x_{i+\frac{1}{2}})]
\]</span></p>
<p>注意到求和公式内部是一个中点求积误差的表达式，代入可得</p>
<p><span class="math display">\[
\sum_{i=0}^{n-1}[\int_{x_i}^{x_{i+1}}f(x)dx - hf(x_{i+\frac{1}{2}})]=\sum_{i=0}^{n-1}\frac{1}{24}h^3f&#39;&#39;(\xi)
\]</span></p>
<p>注意到，求和项与 <span class="math inline">\(i\)</span> 无关，因此可以得到中点复合求积误差为</p>
<p><span class="math display">\[
\frac{b-a}{24}h^2f&#39;&#39;(\xi)
\]</span></p>
<h4 id="梯形复合求积误差">梯形复合求积误差</h4>
<p><span class="math display">\[
-\frac{b-a}{12}h^2f&#39;&#39;(\xi)
\]</span></p>
<h4 id="simpson复合求积误差">Simpson复合求积误差</h4>
<p><span class="math display">\[
-\frac{b-a}{2880}h^4f&#39;&#39;(\xi)
\]</span></p>
<p>可以观察到，复合求积误差本质上就是将原来的 <span class="math inline">\((b-a)\)</span> 替换为 <span class="math inline">\(h\)</span>，但其中一次因为 <span class="math inline">\(n\)</span> 项求和退化为 <span class="math inline">\((b-a)\)</span>，因此原来是 <span class="math inline">\((b-a)^m\)</span> 量级的误差都变为 <span class="math inline">\(h^{m-1}\)</span> 量级。</p>
<p>中点复合求积以及梯形复合求积的误差都是 <span class="math inline">\(O(h^2)\)</span> 量级的，而Simpson复合求积的误差是 <span class="math inline">\(O(h^4)\)</span> 量级的，因此如果对于近似精度要求较高，应尽量选择使用Simpson复合求积。</p>
<h2 id="变步长方法以及外推加速技术">变步长方法以及外推加速技术</h2>
<p>前面所介绍的求积方法都是定步长的方法。定步长数值积分编程很容易，但是确定步长是一件比较麻烦的事情。如果步长定得太大，精度就会比较差；如果步长定得太小，计算效率可能就低很多。因此，变步长方法被引入到数值积分中。下面通过一个简单的变步长方法，初步了解一下变步长数值积分的基本原理。</p>
<h3 id="区间折半法">区间折半法</h3>
<p>变步长积分的主要思想是，对于给定的积分精度，一开始可以在整个区间上进行数值积分，若精度达不到要求，则将积分步长减半；不断地将积分步长减半，直到积分精度满足给定要求为止。</p>
<p>以梯形求积为例，若记 <span class="math inline">\(I = \int_a^bf(x)dx\)</span>，那么</p>
<p><span class="math display">\[
|I-T_n| = \frac{1}{12}(b-a)h^2f&#39;&#39;(\xi)
\]</span></p>
<p>如果进行了一次区间折半，得到 <span class="math inline">\(T_{2n}\)</span>，那么应有</p>
<p><span class="math display">\[
|I-T_{2n}| = \frac{1}{12}(b-a)(\frac{h}{2})^2f&#39;&#39;(\xi)
\]</span></p>
<p>如果忽略两个误差项中的 <span class="math inline">\(f&#39;&#39;(\xi)\)</span> 上的细微误差，基本上可以认为</p>
<p><span class="math display">\[
|I-T_{2n}| = \frac{1}{4}|I-T_n|
\]</span></p>
<p>也就是说，一次区间折半大约可以提升四倍精度。另外，可以通过 <span class="math inline">\(|T_n-T_{2n}|\)</span> 来估算 <span class="math inline">\(I-T_{2n}\)</span> 的水平。因为 <span class="math inline">\(|I-T_{2n}|\approx\frac{1}{4}|I-T_n|\)</span>，因此，基本上可以认为</p>
<p><span class="math display">\[
|I - T_{2n}| = \frac{1}{3}|T_n-T_{2n}|
\]</span></p>
<p>所以，区间折半法进行数值积分时，可以以 <span class="math inline">\(|T_n-T_{2n}|\)</span> 的水平来判断变步长数值积分的精度是否已经符合要求。</p>
<h3 id="romberg求积">Romberg求积</h3>
<p>虽然区间折半法原理很简单，编程也很容易实现，但是精度收敛还是太慢了，这会导致要想实现高精度的数值积分，不得不将 <span class="math inline">\(h\)</span> 缩放到一个很小的水平，那么 <span class="math inline">\(n\)</span> 就会变得很大，导致计算量快速上升。Richardson搞出了一种外推加速的方法，利用这种方法进行数值计算的方式称为Romberg求积。</p>
<p>Romberg求积需要用到Euler-MacLaurin公式，但是我并不想在这里引入这个复杂的公式，其实对于说明Romberg求积而言不是很有必要。</p>
<p>简单来说，引入Euler-MacLaurin公式的目的是为了说明</p>
<p><span class="math display">\[
T_n - I = a_1 h^2 + a_2 h^4 + ...
\]</span></p>
<p>对于上面这条等式，如果进行一次区间折半，可以得到</p>
<p><span class="math display">\[
T_{2n} - I = a_1(\frac{h}{2})^2 + a_2 (\frac{h}{2})^4 + ...
\]</span></p>
<p>为了构造出一个性质更好的求积项，将 <span class="math inline">\(T_n - I\)</span> 乘以 <span class="math inline">\(\frac{1}{4}\)</span>，然后用上式做减法，可以得到</p>
<p><span class="math display">\[
T_{2n} - \frac{3}{4}I - \frac{1}{4}T_n = \bar a_2 h^4 + ...
\]</span></p>
<p>上式可以通过等号两边同时乘以 <span class="math inline">\(\frac{4}{3}\)</span>，改写为</p>
<p><span class="math display">\[
T_n^{(2)} - I = \tilde a_2 h^4 + ...
\]</span></p>
<p>改写为这种形式的意义在于，我们构造出了 <span class="math inline">\(T_n^{(2)}\)</span> 这一项精度更高的近似积分项，这一项实际上等于</p>
<p><span class="math display">\[
T_n^{(2)} = \frac{T_{2n} - 2^{-2}T_n}{1-2^{-2}}
\]</span></p>
<p>也就是说，通过一次区间折半，我们能够将精度提高 <span class="math inline">\(\displaystyle\frac{1}{h^2}\)</span> 倍！这效果无疑远优于区间折半法，因为普通的区间折半一次只能提升大约4倍的精度，而通过Romberg求积，一次区间折半能将精度提升 <span class="math inline">\(\displaystyle\frac{1}{h^2}\)</span> 倍，这意味着Romberg求积的收敛速度是越来越快的，因为随着区间的折半 <span class="math inline">\(h\)</span> 也在不断减小。</p>
<p>事实上，Romberg求积项可以一般化为</p>
<p><span class="math display">\[
T_n^{(m)} = \frac{T_{2n}^{(m-1)}-2^{-2m}T_n^{(m-1)}}{1-2^{-2m}}
\]</span></p>
<p>注意上标并不是求导的意思，这表示的是Romberg求积区间折半的次数。</p>
<h2 id="newton-cotes公式">Newton-Cotes公式</h2>
<p>前面的中点公式、梯形公式以及Simpson公式分别可以看作使用常数、一次函数、二次函数在区间上进行插值，利用插值函数的积分作为原函数的积分替代。对这种方法进行进一步的推广，将 <span class="math inline">\(f(x)\)</span> 用 <span class="math inline">\(n+1\)</span> 个<strong>等距节点</strong>上的 <span class="math inline">\(n\)</span> 次拉格朗日插值多项式替代，然后进行积分，就可以得到 <strong>Newton-Cotes公式</strong>。</p>
<p>具体的推导过程如下：若区间 <span class="math inline">\([a, b]\)</span> 上存在 <span class="math inline">\(n+1\)</span> 个等距节点 <span class="math inline">\(x_i\)</span>，记 <span class="math inline">\(x = a+th, t \in [0, n]\)</span>，可以将 <span class="math inline">\(n\)</span> 次拉格朗日插值多项式 <span class="math inline">\(L_n(x)\)</span> 表示为</p>
<p><span class="math display">\[
L_n(x) = \sum_{i=0}^n (\prod_{j=0, j\neq i}^n \frac{x-x_j}{x_i-x_j})f(x_i)
\]</span></p>
<p>将 <span class="math inline">\(x=a+th\)</span> 代入，可以得到</p>
<p><span class="math display">\[
L_n(x) = \sum_{i=0}^n [\prod_{j=0, j\neq i}^n \frac{(a+th)-(a+jh)}{(a+ih) - (a+jh)}]f(x_i)= \sum_{i=0}^n (\prod_{j=0, j\neq i}^n\frac{t-j}{i-j})f(x_i)
\]</span></p>
<p>观察 <span class="math inline">\(\prod_{j=0, j\neq i}^n \frac{1}{i-j}\)</span> 项，发现可以写成阶乘的形式 <span class="math inline">\(\frac{(-1)^{n-i}}{i!(n-i)!}\)</span>，那么</p>
<p><span class="math display">\[
L_n(x) = \sum_{i=0}^n \frac{(-1)^{n-i}}{i!(n-i)!}(\prod_{j=0, j\neq i}^n(t-j))f(x_i)
\]</span></p>
<p>由于 <span class="math inline">\(f(x) \approx L_n(x)\)</span>，那么</p>
<p><span class="math display">\[
\int_a^bf(x)dx \approx \int_a^b L_n(x)dx
\]</span></p>
<p>观察到 <span class="math inline">\(L_n(x)\)</span> 实际上已经写作了 <span class="math inline">\(L_n(t)\)</span> 的形式，所以对积分式可以进行一次换元</p>
<p><span class="math display">\[
dx = hdt
\]</span></p>
<p>代入积分式，可以得到</p>
<p><span class="math display">\[
\int_a^bL_n(x)dx = (b-a)\sum_{i=0}^n\frac{(-1)^{n-i}}{ni!(n-i)!}(\int_0^n\prod_{j=0, j\neq i}^n(t-j)dt)f(x_i)
\]</span></p>
<p>这条式子计算起来还是比较复杂的，但可以观察到，这条式子中 <span class="math inline">\(f(x_i)\)</span> 之前的部分只与区间长度以及等距节点的数量有关，那么其实可以把前面这一部分系数直接用求积系数 <span class="math inline">\(\omega_i\)</span> 来表示，所以最后仍然可以表示为下面这样的形式</p>
<p><span class="math display">\[
\int_a^bf(x)dx \approx \sum_{i=0}^n \omega_i f(x_i)
\]</span></p>
<p>Newton-Cotes公式的简化写法其实指明了数值积分的精髓，即<em>对求积节点对应的函数值与求积系数的积求和</em>。</p>
<h3 id="cotes系数">Cotes系数</h3>
<p>观察到，求积系数 <span class="math inline">\(\omega_i\)</span> 实际上也可以写成两个部分，即</p>
<p><span class="math display">\[
\omega_i = (b-a) \sum_{i=0}^n\frac{(-1)^{n-i}}{ni!(n-i)!} \int_0^n\prod_{j=0, j\neq i}^n(t-j)dt = (b-a) C_i^{(n)}
\]</span></p>
<p><span class="math inline">\(C_i^{(n)}\)</span> 这一项被称为 <strong>Cotes系数</strong>。由于积分时进行了一次换元，所以Cotes系数的积分区间线性变换至 <span class="math inline">\([0, n]\)</span> 上，成为了只与节点数量有关的项。那么只需事先计算好不同节点数量下的Cotes系数，就可以很方便地使用Newton-Cotes公式进行数值积分了。</p>
<p>实际上中点公式、梯形公式或Simpson公式对应的求积系数就是 <span class="math inline">\(n\)</span> 分别为0,1,2时的Cotes系数。下面给出 <span class="math inline">\(n\leq 8\)</span> 时的Cotes系数表。</p>
<figure>
<img src="/2022/11/14/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86//Snipaste_2022-11-16_11-47-11.png" alt><figcaption>Cotes系数表</figcaption>
</figure>
<p>Cotes系数具有以下性质</p>
<ol type="1">
<li>Cotes系数随着 <span class="math inline">\(i\)</span> 的增大体现出对称性</li>
<li><span class="math inline">\(\sum_{i=0}^nC_i^{(n)}=1\)</span></li>
<li>Cotes系数在 <span class="math inline">\(n\geq 8\)</span> 时有正有负，这会导致数值积分的不稳定，所以一般在实际使用Newton-Cotes公式进行数值积分时 <span class="math inline">\(n\leq 7\)</span></li>
<li>Newton-Cotes公式在 <span class="math inline">\(n\)</span> 为奇数时代数精度至少为 <span class="math inline">\(n\)</span> 次，<span class="math inline">\(n\)</span> 为偶数时代数精度至少为 <span class="math inline">\(n+1\)</span> 次</li>
</ol>
<h3 id="newton-cotes公式的误差">Newton-Cotes公式的误差</h3>
<p>考虑到 <span class="math inline">\(f(x_i)\)</span> 有时可能只是测量值，与真值之间也存在误差。假如 <span class="math inline">\(f(x_i)\)</span> 与真值之间的最大误差为 <span class="math inline">\(\varepsilon\)</span>，那么Newton-Cotes公式进行数值积分的最大误差为 <span class="math inline">\((b-a)\varepsilon\)</span>。</p>
<h2 id="高斯公式">高斯公式</h2>
<p>前面考虑的数值积分都是在等距节点上进行求积，下面介绍一种精度更高的非等距节点求积方法——<strong>高斯积分</strong>。</p>
<h3 id="高斯公式的定义">高斯公式的定义</h3>
<p>高斯公式的定义中引入了权函数，是在区间上进行带权积分</p>
<p><span class="math display">\[
\int_a^b\rho(x)f(x)dx \approx \sum_{i=0}^n \omega_if(x_i)
\]</span></p>
<p>另外，高斯积分对于积分节点是有要求的，满足相应要求的积分节点称为 <strong>高斯点</strong>；积分节点与对应的积分系数之间存在确定关系，这个对应的积分系数称为 <strong>高斯系数</strong>。高斯积分的特征在于，在 <span class="math inline">\(n+1\)</span> 个非等距节点上，能够实现代数精度高达 <span class="math inline">\(2n+1\)</span> 次的数值积分。</p>
<p>要推导任意节点数量的高斯公式非常复杂，但是如果能够先找到高斯点，然后求出对应的高斯系数，就可以直接确定一条高斯积分公式。其中，找高斯点是最困难的一件事。</p>
<h3 id="寻找高斯点">寻找高斯点</h3>
<p>对于高斯点，存在以下定理：</p>
<p>区间 <span class="math inline">\([a, b]\)</span> 上的 <span class="math inline">\(n+1\)</span> 个点均为高斯点的充要条件是，这些点所形成的多项式 <span class="math inline">\(\Pi(x) = \prod_{i=0}^n(x-x_i)\)</span> 在区间上与任意次数不超过 <span class="math inline">\(n\)</span> 次的多项式 <span class="math inline">\(q(x)\)</span> 带权正交，即</p>
<p><span class="math display">\[
\int_a^b \rho(x) \Pi(x) q(x)dx = 0
\]</span></p>
<p>这条定理的证明稍微有点麻烦，对应用来说也不太重要，见教材。这条定理的意义在于说明了高斯点其实就是区间 <span class="math inline">\([a, b]\)</span> 上的 <span class="math inline">\(n+1\)</span> 次带权正交多项式的零点。在多项式章节中介绍了四种不同的正交多项式</p>
<ul>
<li>Legendre正交多项式</li>
<li>Chebyshev正交多项式</li>
<li>Laguerre正交多项式</li>
<li>Hermite正交多项式</li>
</ul>
<p>这四种正交多项式可以与高斯积分定义式结合，形成四种不同的高斯积分公式。在介绍这四种积分公式之前，还要补充3点高斯积分的性质：</p>
<ol type="1">
<li>高斯积分是所有利用 <span class="math inline">\(n+1\)</span> 个积分节点进行积分的方式中，代数精度最高的积分算法</li>
<li>高斯积分的所有积分系数均大于0，因此积分结果一定是稳定的</li>
<li>高斯积分在 <span class="math inline">\(n\rightarrow \infty\)</span> 时，积分结果一定是收敛的</li>
</ol>
<p>前面两点性质基于以下定理：利用 <span class="math inline">\(n+1\)</span> 个积分节点进行数值积分的最高代数精度是 <span class="math inline">\(2n+1\)</span> 次，而且当积分精度达到 <span class="math inline">\(2n+1\)</span> 次时，积分系数 <span class="math inline">\(\omega_i &gt;0\)</span>。</p>
<p>这些性质的证明都不是特别复杂，但是对于数值分析这门课而言不是特别重要，因此不花费过多的精力在讨论性质的证明上。</p>
<h3 id="四种常用的高斯积分公式">四种常用的高斯积分公式</h3>
<h4 id="gauss-legendre公式">Gauss-Legendre公式</h4>
<p>Legendre正交多项式是区间 <span class="math inline">\([-1, 1]\)</span> 上权函数为 <span class="math inline">\(\rho(x) \equiv 1\)</span> 的正交多项式。</p>
<p><span class="math inline">\(n=0\)</span> 时，Gauss-Legendre公式为</p>
<p><span class="math display">\[
\int_{-1}^1f(x)dx \approx 2f(0)
\]</span></p>
<p><span class="math inline">\(n=1\)</span> 时，Gauss-Legendre公式为</p>
<p><span class="math display">\[
\int_{-1}^1f(x)dx \approx f(-\frac{1}{\sqrt{3}}) + f(\frac{1}{\sqrt{3}})
\]</span></p>
<p><span class="math inline">\(n=2\)</span> 时，Gauss-Legendre公式为</p>
<p><span class="math display">\[
\int_{-1}^1f(x)dx \approx \frac{5}{9}f(-\sqrt{\frac{3}{5}}) + \frac{8}{9}f(0) + \frac{5}{9}f(\sqrt{\frac{3}{5}})
\]</span></p>
<figure>
<img src="/2022/11/14/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86//Gauss-Legendre.png" alt><figcaption>Gauss-Legendre公式常用的高斯点及其高斯系数</figcaption>
</figure>
<p>对于计算来说，这一部分内容也不太需要进行定理的推导和证明，只需要记住一些常用的高斯点和高斯系数，然后知道这些点和系数与各公式之间的对应关系，会算简单数值积分即可。</p>
<h4 id="gauss-chebyshev公式">Gauss-Chebyshev公式</h4>
<p>Chebyshev正交多项式是区间 <span class="math inline">\([-1, 1]\)</span> 上权函数为 <span class="math inline">\(\rho(x)=\frac{1}{\sqrt{1-x^2}}\)</span> 的正交多项式。Chebyshev的零点表达式如下</p>
<p><span class="math display">\[
x_i = cos\frac{2i+1}{2(n+1)}\pi, i = 0, 1, ..., n
\]</span></p>
<p>相应的高斯系数为</p>
<p><span class="math display">\[
\omega_i = \frac{\pi}{n+1}
\]</span></p>
<p>Gauss-Chebyshev公式中的所有高斯系数都是相同的！而且高斯点的表达式也很好记忆，因此很容易使用Gauss-Chebyshev公式进行 <span class="math inline">\(n\)</span> 很大时的高斯积分！不过需要注意，Gauss-Chebyshev公式的权函数并不为1，因此应用时应看清楚场合，不然算出来的结果是错的。</p>
<p>Gauss-Chebyshev公式整理如下</p>
<p><span class="math display">\[
\int_{-1}^1\frac{1}{\sqrt{1-x^2}}f(x)dx = \frac{\pi}{n+1}\sum_{i=0}^n f(cos\frac{2i+1}{2(n+1)}\pi)
\]</span></p>
<h4 id="gauss-laguerre公式">Gauss-Laguerre公式</h4>
<p>Laguerre正交多项式是区间 <span class="math inline">\([0, \infty)\)</span> 上权函数为 <span class="math inline">\(\rho(x)=e^{-x}\)</span> 的正交多项式。</p>
<p><span class="math inline">\(n=0\)</span> 时，Gauss-Laguerre公式为</p>
<p><span class="math display">\[
\int_0^{\infty}e^{-x}f(x)dx \approx f(1)
\]</span></p>
<p><span class="math inline">\(n=1\)</span> 时，Gauss-Laguerre公式为</p>
<p><span class="math display">\[
\int_0^{\infty}e^{-x}f(x)dx \approx \frac{2+\sqrt{2}}{4}f(2-\sqrt{2})+\frac{2+\sqrt{2}}{4}f(2+\sqrt{2})
\]</span></p>
<figure>
<img src="/2022/11/14/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86//Gauss-Laguerre.png" alt><figcaption>Gauss-Laguerre公式常用的高斯点及其高斯系数</figcaption>
</figure>
<h4 id="gauss-hermite公式">Gauss-Hermite公式</h4>
<p>Hermite正交多项式是区间 <span class="math inline">\([-\infty, \infty]\)</span> 上权函数为 <span class="math inline">\(\rho(x) = e^{-x^2}\)</span> 的正交多项式。</p>
<p><span class="math inline">\(n=1\)</span> 时，Gauss-Hermite公式为</p>
<p><span class="math display">\[
\int_{-\infty}^{\infty} e^{-x^2}f(x)dx \approx \frac{\sqrt{\pi}}{2}f(-\frac{\sqrt{2}}{2}) + \frac{\sqrt{\pi}}{2}f(\frac{\sqrt{2}}{2})
\]</span></p>
<p><span class="math inline">\(n=2\)</span> 时，Gauss-Hermite公式为</p>
<p><span class="math display">\[
\int_{-\infty}^{\infty} e^{-x^2}f(x)dx \approx \frac{\sqrt{\pi}}{6}f(-\frac{\sqrt{6}}{2})+\frac{2\sqrt{\pi}}{3}f(0) + \frac{\sqrt{\pi}}{6}f(\frac{\sqrt{6}}{2})
\]</span></p>
<figure>
<img src="/2022/11/14/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86//Gauss-Hermite.png" alt><figcaption>Gauss-Hermite公式常用的高斯点及其高斯系数</figcaption>
</figure>
<h4 id="高斯公式使用注意事项">高斯公式使用注意事项</h4>
<p>应用高斯公式时，首先要观察权函数 <span class="math inline">\(\rho(x)\)</span>，其次要观察积分区间。一般来说，根据权函数就可以确定一个积分问题需要用什么积分公式，积分区间和权函数往往是挂钩的。</p>
<h2 id="多重数值积分">多重数值积分</h2>
<p>对于重积分来说，前面提到的数值积分方法可以解决一些比较简单的重积分问题，比如使用复合Simpson求积可以解决重数比较低的多重数值积分问题。下面以二重积分为例，简单地说明一下多重数值积分问题。</p>
<h3 id="以二重积分为例描述多重数值积分问题">以二重积分为例描述多重数值积分问题</h3>
<p>对于一个二重积分问题，可以将目标积分式写为</p>
<p><span class="math display">\[
\iint_{\Omega} f(x, y) dxdy
\]</span></p>
<p>其中，<span class="math inline">\(\Omega\)</span> 表示二维积分区间，可以表示为</p>
<p><span class="math display">\[
\Omega = \{a \leq x \leq b, \varphi_1(x) \leq y \leq \varphi_2(x)\}
\]</span></p>
<p><img src="/2022/11/14/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86//二重积分求积区域.png" alt="二重积分求积区域" width="40%" align="center"></p>
<p>上面的二重积分可以拆解为对 <span class="math inline">\(x\)</span> 和对 <span class="math inline">\(y\)</span> 的两个积分</p>
<p><span class="math display">\[
\iint_{\Omega} f(x, y) dxdy = \int_a^b dx \int_{\varphi_1(x)}^{\varphi_2(x)}f(x, y)dy
\]</span></p>
<p>令 <span class="math inline">\(F(x) = \displaystyle\int_{\varphi_1(x)}^{\varphi_2(x)}f(x, y)dy\)</span>，有</p>
<p><span class="math display">\[
\iint_{\Omega} f(x, y)dxdy = \int_a^bF(x) dx
\]</span></p>
<p>由数值积分公式，可以得到</p>
<p><span class="math display">\[
\int_a^bF(x)dx \approx \sum_{i=0}^n \omega_i^{(1)} F(x_i)
\]</span></p>
<p><span class="math inline">\(F(x_i)\)</span> 应也能写成</p>
<p><span class="math display">\[
F(x_i) = \int_{\varphi_1(x_i)}^{\varphi_2(x_i)}f(x_i, y)dy \approx \sum_{j=0}^m\omega_j^{(2)}f(x_i, y_j)
\]</span></p>
<p>整合上述两条式子，可以得到双重积分的数值积分公式</p>
<p><span class="math display">\[
\iint_{\Omega} f(x, y)dxdy \approx \sum_{i=0}^n \omega_i^{(1)} \sum_{j=0}^m \omega_j^{(2)} f(x_i, y_j)
\]</span></p>
<p>记 <span class="math inline">\(\omega_{ij}=\omega_i^{(1)} \omega_j^{(2)}\)</span>，可以有</p>
<p><span class="math display">\[
\iint_{\Omega}f(x, y)dxdy\approx \sum_{i=0}^n \sum_{j=0}^m \omega_{ij}f(x_i, y_j)
\]</span></p>
<p>所以双重积分的数值积分本质上就是一个双重求积问题。我们可以使用Newton-Cotes公式对这个求积问题进行求解，但事实上使用Newton-Cotes方式进行重积分的数值求解精度不高。教材中展示了使用复合Simpson公式进行二重积分求积的案例，其过程非常复杂，也不实用，因此在笔记中略去。下面直接介绍对于多重积分数值求解来说比较实用的Monte-Carlo方法。</p>
<h3 id="使用monte-carlo方法求解多重积分">使用Monte-Carlo方法求解多重积分</h3>
<p>Monte-Carlo方法是一种随机模拟思想，并不是一种具体的方法实现。下面以Monte-Carlo方法在一维数值积分中的应用为例，来简单地描述一下Monte-Carlo方法如何应用于数值积分。</p>
<h4 id="monte-carlo方法求解一维数值积分">Monte-Carlo方法求解一维数值积分</h4>
<p>假定随机变量 <span class="math inline">\(X\)</span> 在区间 <span class="math inline">\([0, 1]\)</span> 上服从均匀分布（均匀分布即概率密度函数 <span class="math inline">\(f(x) = \frac{1}{b-a}\)</span>，其中 <span class="math inline">\(b-a\)</span> 为区间长度），函数 <span class="math inline">\(f(x)\)</span> 为任意可积函数，那么 <span class="math inline">\(f(X)\)</span> 的数学期望为</p>
<p><span class="math display">\[
E[f(X)] = \int_0^1 f(x) dx
\]</span></p>
<blockquote>
<p>回顾一下统计学的知识：数学期望指的是随机变量所有可能的取值与其出现概率之积求和。</p>
</blockquote>
<p>也就是说，服从均匀分布的随机变量 <span class="math inline">\(X\)</span> 对应函数值的数学期望 <span class="math inline">\(E[f(X)]\)</span> 恰好是函数 <span class="math inline">\(f(x)\)</span> 在对应区间上的积分值。那么如果有办法求出随机变量对应函数值的数学期望 <span class="math inline">\(E[f(X)]\)</span>，那么就可以得到函数 <span class="math inline">\(f(x)\)</span> 的区间上的积分，而不是直接做数值积分运算。</p>
<p>假如在区间 <span class="math inline">\([0, 1]\)</span> 上共有 <span class="math inline">\(N\)</span> 个相互独立的、服从均匀分布的随机变量 <span class="math inline">\(X_i\)</span>，记</p>
<p><span class="math display">\[
I_N[f] = \frac{1}{N}\sum_{i=1}^N f(X_i)
\]</span></p>
<p>显然，<span class="math inline">\(I_N[f]\)</span> 也是一个随机变量，这个随机变量的数学期望 <span class="math inline">\(E[I_N[f]]\)</span> 在形式上恰好与区间上的数值积分公式类似</p>
<p><span class="math display">\[
E[I_N[f]] = E[\frac{1}{N}\sum_{i=1}^N f(X_i)] = \frac{1}{N}\sum_{i=1}^NE[f(X_i)]=\frac{1}{N}\sum_{i=1}^N\int_0^1f(x)dx = I[f]
\]</span></p>
<p>从这个角度来说，可以把 <span class="math inline">\(I_N[f]\)</span> 视为 <span class="math inline">\(I[f]\)</span> 的无偏估计。由大数定律，知 <span class="math inline">\(N \rightarrow \infty\)</span> 时，<span class="math inline">\(I_N[f] \rightarrow I[f]\)</span>。</p>
<p>说白了，Monte-Carlo方法就是在区间内随机取点求函数值，然后加起来求平均。</p>
<h4 id="monte-carlo方法的一维数值积分误差">Monte-Carlo方法的一维数值积分误差</h4>
<p>积分误差 <span class="math inline">\(R_N[f]\)</span> 可以表示为</p>
<p><span class="math display">\[
R_N[f] = I_N[f] - I[f]
\]</span></p>
<p>由于 <span class="math inline">\(I_N[f]\)</span> 是一个随机变量，因此 <span class="math inline">\(R_N[f]\)</span> 也是一个随机变量。为此需要使用 <span class="math inline">\(R_N[f]\)</span> 的方差衡量Monte-Carlo方法的一维数值积分误差。</p>
<p><span class="math display">\[
var(R_N[f])= E\{[I_N[f] - I[f]]^2\} = \frac{1}{N^2}E\{\sum_{i=1}^N(f(X_i) - I[f])\sum_{j=1}^N(f(X_j) - I[f])\}
\]</span></p>
<p>当 <span class="math inline">\(i\neq j\)</span> 时，由于 <span class="math inline">\(X_i, X_j\)</span> 是相互独立的随机变量，因此</p>
<p><span class="math display">\[
E\{[f(X_i) - I[f]][f(X_j) - I[f]]\} = E[f(X_i) - I[f]]E[f(X_j) - I[f]] = 0
\]</span></p>
<p>那么，只有在 <span class="math inline">\(i=j\)</span> 的情况下，数学期望是非零的，所以上面的数学期望可以简化为</p>
<p><span class="math display">\[
var(R_N[f]) = \frac{1}{N^2} E\{\sum_{i=1}^N[f(X_i)-I[f]]^2\}
\]</span></p>
<p>而 <span class="math inline">\(\displaystyle\frac{1}{N}E\{\sum_{i=1}^N[f(X_i) - I[f]]^2\}\)</span> 实际上就是 <span class="math inline">\(var(f)\)</span>，即 <span class="math inline">\(f(X)\)</span> 的方差。这个值在随机变量的分布和函数结构确定以后，便是一个常数。工程上来说，这个方差可以通过抽样的方法进行估计，例如区间上随机取 <span class="math inline">\(N\)</span> 个点求函数值，取其均值作为数学期望的估计，然后用这些函数值和估计期望求出估计的方差。</p>
<p>总之Monte-Carlo方法求一维数值积分的误差 <span class="math inline">\(var(R_N[f]) = \displaystyle\frac{1}{N}var(f)\)</span> 是与 <span class="math inline">\(N\)</span> 成反比例关系的。事实上，只要 <span class="math inline">\(f(x)\)</span> 是平方可积函数，<span class="math inline">\(var(f)\)</span> 就必然是有限值，那么Monte-Carlo方法求数值积分一定是稳定的，并且精度随着 <span class="math inline">\(N\)</span> 的增大而提高。</p>
<h4 id="monte-carlo方法的多重数值积分误差">Monte-Carlo方法的多重数值积分误差</h4>
<p>Monte-Carlo方法求多重数值积分的误差仍然是 <span class="math inline">\(\displaystyle\frac{1}{N}var(f)\)</span>，与维度无关。这个特性太屌了，所以工程上求多重数值积分基本上都是用Monte-Carlo方法进行求解的。</p>
<p>当然，计算机并不能生成真正的随机数，只能生成伪随机数，所以在实际计算的时候，Monte-Carlo方法的数值积分精度可能略低于理论精度，但与理论相差不会太大。</p>
]]></content>
      <categories>
        <category>University</category>
      </categories>
      <tags>
        <tag>Numerical Analysis</tag>
        <tag>Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title>数值分析作业-第五章</title>
    <url>/2022/11/14/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%BD%9C%E4%B8%9A-%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    <content><![CDATA[<p>姓名：周晓</p>
<p>学号：2231573</p>
<h2 id="第一题">第一题</h2>
<p>令 <span class="math inline">\(f(x) = 1, x, x^2, x^3\)</span>，代入求积公式可得</p>
<p><span class="math display">\[
\begin{equation}\left\{
\begin{aligned}
\omega_0+\omega_1+\omega_2+\omega_3&amp;=2\\
-\omega_0-\frac{1}{3}\omega_1+\frac{1}{3}\omega_2+\omega_3&amp;=0\\
\omega_0+\frac{1}{9}\omega_1+\frac{1}{9}\omega_2+\omega_3&amp;=\frac{2}{3}\\
-\omega_0-\frac{1}{27}\omega_1+\frac{1}{27}\omega_2+\omega_3&amp;=0
\end{aligned}\right.
\end{equation}
\]</span></p>
<span id="more"></span>
<p>解上述方程组，可以得到</p>
<p><span class="math display">\[
\begin{equation}
\begin{bmatrix}
\omega_0\\
\omega_1\\
\omega_2\\
\omega_3
\end{bmatrix}=
\begin{bmatrix}
\displaystyle \frac{1}{4}\\
\displaystyle \frac{3}{4}\\
\displaystyle \frac{3}{4}\\
\displaystyle \frac{1}{4}
\end{bmatrix}
\end{equation}
\]</span></p>
<p>下面，令 <span class="math inline">\(f(x)=x^4\)</span>，计算得 <span class="math inline">\(\int_{-1}^1f(x)dx = \displaystyle \frac{2}{5}\)</span>，而</p>
<p><span class="math display">\[
\omega_0f(-1)+\omega_1f(-\frac{1}{3})+\omega_2f(\frac{1}{3})+\omega_3f(1)=\frac{14}{27}\neq\int_{-1}^1f(x)dx
\]</span></p>
<p>因此，该求积公式的代数精度为三次。</p>
<h2 id="第二题">第二题</h2>
<p>积分目标</p>
<p><span class="math display">\[
\int_0^{\pi} \frac{1+sin^4x}{1+x^2}dx
\]</span></p>
<h3 id="等分复合梯形积分">4等分复合梯形积分</h3>
<p>首先，将目标区间 <span class="math inline">\([0, \pi]\)</span> 四等分为 <span class="math inline">\([0, \frac{\pi}{4}], [\frac{\pi}{4}, \frac{\pi}{2}], [\frac{\pi}{2}, \frac{3\pi}{4}], [\frac{3\pi}{4}, \pi]\)</span>；随后，在每个小区间上，进行梯形积分。那么，需要求出 <span class="math inline">\(f(0), f(\frac{\pi}{4}), f(\frac{\pi}{2}), f(\frac{3\pi}{4}), f(\pi)\)</span>，以进行梯形积分。</p>
<p><span class="math display">\[
\begin{aligned}
f(0) &amp;= 1 \\
f(\frac{\pi}{4}) &amp;= 0.77310807 \\
f(\frac{\pi}{2}) &amp;= 0.57680088 \\
f(\frac{3\pi}{4}) &amp;= 0.19079156 \\
f(\pi) &amp; = 0.09199967
\end{aligned}
\]</span></p>
<p>由上述数据，进行梯形积分如下</p>
<p><span class="math display">\[
\int_0^{\pi}\frac{1+sin^4x}{1+x^2}dx = \frac{1}{2} \times \frac{\pi}{4} \{f(0) + f(\pi) + 2[f(\frac{\pi}{4}) + f(\frac{\pi}{2}) + f(\frac{3\pi}{4})]\} = 1.63889062
\]</span></p>
<p>MATLAB代码如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trapezoid_integral</span><span class="params">()</span></span></span><br><span class="line">    fun = @(x) (<span class="number">1</span> + <span class="built_in">sin</span>(x).^<span class="number">4</span>) ./ (<span class="number">1</span> + x.^<span class="number">2</span>);</span><br><span class="line">    res = (<span class="built_in">pi</span> / <span class="number">8</span>) * (fun(<span class="number">0</span>) + fun(<span class="built_in">pi</span>) + <span class="number">2</span> * (fun(<span class="built_in">pi</span> / <span class="number">4</span>) + fun(<span class="built_in">pi</span> / <span class="number">2</span>) + fun(<span class="number">3</span> * <span class="built_in">pi</span> / <span class="number">4</span>)));</span><br><span class="line">    fprintf(<span class="string">&quot;Trapezoid integral result: %.8f\n&quot;</span>, res);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="等分复合simpson积分">4等分复合Simpson积分</h3>
<p>在梯形积分的基础上，Simpson积分还需要 <span class="math inline">\(x_{i+\frac{1}{2}}\)</span> 节点上的值，也就是 <span class="math inline">\(f(\frac{\pi}{8}), f(\frac{3\pi}{8}), f(\frac{5\pi}{8}), f(\frac{7\pi}{8})\)</span>，结果如下</p>
<p><span class="math display">\[
\begin{aligned}
f(\frac{\pi}{8}) &amp;= 0.88497270 \\
f(\frac{3\pi}{8}) &amp;= 0.72387616 \\
f(\frac{5\pi}{8}) &amp;= 0.35601267 \\
f(\frac{7\pi}{8}) &amp;= 0.11937786
\end{aligned}
\]</span></p>
<p>由上述数据，进行数值积分如下</p>
<p><span class="math display">\[
\begin{aligned}
\int_0^{\pi}\frac{1+sin^4x}{1+x^2}dx &amp;=\frac{1}{6} \times \frac{\pi}{4} \{f(0) + f(\pi) + 2[f(\frac{\pi}{4}) + f(\frac{\pi}{2}) + f(\frac{3\pi}{4})] + 4[f(\frac{\pi}{8}) + f(\frac{3\pi}{8}) + f(\frac{5\pi}{8}) + f(\frac{7\pi}{8})]\} \\
&amp;= 1.63760207
\end{aligned}
\]</span></p>
<p>MATLAB代码如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpson_integral</span><span class="params">()</span></span></span><br><span class="line">    fun = @(x) (<span class="number">1</span> + <span class="built_in">sin</span>(x).^<span class="number">4</span>) ./ (<span class="number">1</span> + x.^<span class="number">2</span>);</span><br><span class="line">    res = (<span class="built_in">pi</span> / <span class="number">24</span>) * (fun(<span class="number">0</span>) + fun(<span class="built_in">pi</span>) + <span class="number">2</span> * (fun(<span class="built_in">pi</span> / <span class="number">4</span>) + fun(<span class="built_in">pi</span> / <span class="number">2</span>) + fun(<span class="number">3</span> * <span class="built_in">pi</span> / <span class="number">4</span>)) + ...</span><br><span class="line">        <span class="number">4</span> * (fun(<span class="built_in">pi</span> / <span class="number">8</span>) + fun(<span class="number">3</span> * <span class="built_in">pi</span> / <span class="number">8</span>) + fun(<span class="number">5</span> * <span class="built_in">pi</span> / <span class="number">8</span>) + fun(<span class="number">7</span> * <span class="built_in">pi</span> / <span class="number">8</span>)));</span><br><span class="line">    fprintf(<span class="string">&quot;Simpson integral result: %.8f\n&quot;</span>, res);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="复合2点高斯积分">复合2点高斯积分</h3>
<p>该函数适合利用Gauss-Legendre公式进行计算，但需要进行区间上的线性变换。</p>
<p>对于区间 <span class="math inline">\([0, \frac{\pi}{4}]\)</span>，令 <span class="math inline">\(t = \frac{8}{\pi}x-1\)</span>，有</p>
<p><span class="math display">\[
\begin{aligned}
dx &amp;= \frac{\pi}{8}dt\\
x &amp;= \frac{\pi}{8}(t+1)
\end{aligned}
\]</span></p>
<p>那么，原函数可以改写为</p>
<p><span class="math display">\[
g_1(t) = \frac{1+sin^4[\frac{\pi}{8}(t+1)]}{1+[\frac{\pi}{8}(t+1)]^2}
\]</span></p>
<p>原积分式可以改写为</p>
<p><span class="math display">\[
\int_0^{\pi}\frac{1+sin^4x}{1+x^2}dx = \frac{\pi}{8}\int_{-1}^1 \frac{1+sin^4[\frac{\pi}{8}(t+1)]}{1+[\frac{\pi}{8}(t+1)]^2}dt
\]</span></p>
<p>由于</p>
<p><span class="math display">\[
\begin{aligned}
g_1(-\frac{1}{\sqrt{3}})&amp;=0.97391616\\
g_1(\frac{1}{\sqrt{3}}) &amp;= 0.80481227
\end{aligned}
\]</span></p>
<p>所以</p>
<p><span class="math display">\[
\frac{\pi}{8}\int_{-1}^1 \frac{1+sin^4[\frac{\pi}{8}(t+1)]}{1+[\frac{\pi}{8}(t+1)]^2}dt = \frac{\pi}{8} [g(-\frac{1}{\sqrt{3}}) + g(\frac{1}{\sqrt{3}})]=0.69850502
\]</span></p>
<p>对于区间 <span class="math inline">\([\frac{\pi}{4}, \frac{\pi}{2}]\)</span>，令 <span class="math inline">\(t = \frac{8}{\pi}x-3\)</span>。观察发现与钱一个区间的变换计算相比较，<span class="math inline">\(t\)</span> 只是发生了一个线性偏移，因此对前面的函数稍加改动，即可进行后续计算</p>
<p><span class="math display">\[
g_2(t) = \frac{1+sin^4[\frac{\pi}{8}(t+3)]}{1+[\frac{\pi}{8}(t+3)]^2}
\]</span></p>
<p><span class="math display">\[
\begin{aligned}
g_2(-\frac{1}{\sqrt{3}})&amp;=0.75559610\\
g_2(\frac{1}{\sqrt{3}}) &amp;= 0.65449392
\end{aligned}
\]</span></p>
<p>同理，对于区间 <span class="math inline">\([\frac{\pi}{2}, \frac{3\pi}{4}]\)</span>，有</p>
<p><span class="math display">\[
g_3(t) = \frac{1+sin^4[\frac{\pi}{8}(t+5)]}{1+[\frac{\pi}{8}(t+5)]^2}
\]</span></p>
<p><span class="math display">\[
\begin{aligned}
g_3(-\frac{1}{\sqrt{3}})&amp;=0.48455531\\
g_3(\frac{1}{\sqrt{3}}) &amp;= 0.24831413
\end{aligned}
\]</span></p>
<p>对于区间 <span class="math inline">\([\frac{3\pi}{4}, \pi]\)</span>，有</p>
<p><span class="math display">\[
g_4(t) = \frac{1+sin^4[\frac{\pi}{8}(t+7)]}{1+[\frac{\pi}{8}(t+7)]^2}
\]</span></p>
<p><span class="math display">\[
\begin{aligned}
g_4(-\frac{1}{\sqrt{3}})&amp;=0.15127794\\
g_4(\frac{1}{\sqrt{3}}) &amp;= 0.10155409
\end{aligned}
\]</span></p>
<p>最后，将这四个区间的积分相加，可以得到</p>
<p><span class="math display">\[
\begin{aligned}
    \int_0^{\pi}\frac{1+sin^4x}{1+x^2}dx=\frac{\pi}{8}[&amp;g_1(-\frac{1}{\sqrt{3}})+g_1(\frac{1}{\sqrt{3}})+g_2(-\frac{1}{\sqrt{3}})+g_2(\frac{1}{\sqrt{3}})+\\
    &amp;g_3(-\frac{1}{\sqrt{3}})+g_3(\frac{1}{\sqrt{3}})+g_4(-\frac{1}{\sqrt{3}})+g_4(\frac{1}{\sqrt{3}})] = 1.63933014
\end{aligned}
\]</span></p>
<p>MATLAB代码如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gauss_integral</span><span class="params">()</span></span></span><br><span class="line">    fun1 = @(x) (<span class="number">1</span> + <span class="built_in">sin</span>((<span class="built_in">pi</span> / <span class="number">8</span>) * (x + <span class="number">1</span>)) .^ <span class="number">4</span>) ./ (<span class="number">1</span> + ((<span class="built_in">pi</span> / <span class="number">8</span>) * (x + <span class="number">1</span>)) .^ <span class="number">2</span>);</span><br><span class="line">    gp11 = fun1(<span class="number">-1</span> / <span class="built_in">sqrt</span>(<span class="number">3</span>));</span><br><span class="line">    gp12 = fun1(<span class="number">1</span> / <span class="built_in">sqrt</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    fun2 = @(x) (<span class="number">1</span> + <span class="built_in">sin</span>((<span class="built_in">pi</span> / <span class="number">8</span>) * (x + <span class="number">3</span>)) .^ <span class="number">4</span>) ./ (<span class="number">1</span> + ((<span class="built_in">pi</span> / <span class="number">8</span>) * (x + <span class="number">3</span>)) .^ <span class="number">2</span>);</span><br><span class="line">    gp21 = fun2(<span class="number">-1</span> / <span class="built_in">sqrt</span>(<span class="number">3</span>));</span><br><span class="line">    gp22 = fun2(<span class="number">1</span> / <span class="built_in">sqrt</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    fun3 = @(x) (<span class="number">1</span> + <span class="built_in">sin</span>((<span class="built_in">pi</span> / <span class="number">8</span>) * (x + <span class="number">5</span>)) .^ <span class="number">4</span>) ./ (<span class="number">1</span> + ((<span class="built_in">pi</span> / <span class="number">8</span>) * (x + <span class="number">5</span>)) .^ <span class="number">2</span>);</span><br><span class="line">    gp31 = fun3(<span class="number">-1</span> / <span class="built_in">sqrt</span>(<span class="number">3</span>));</span><br><span class="line">    gp32 = fun3(<span class="number">1</span> / <span class="built_in">sqrt</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    fun4 = @(x) (<span class="number">1</span> + <span class="built_in">sin</span>((<span class="built_in">pi</span> / <span class="number">8</span>) * (x + <span class="number">7</span>)) .^ <span class="number">4</span>) ./ (<span class="number">1</span> + ((<span class="built_in">pi</span> / <span class="number">8</span>) * (x + <span class="number">7</span>)) .^ <span class="number">2</span>);</span><br><span class="line">    gp41 = fun4(<span class="number">-1</span> / <span class="built_in">sqrt</span>(<span class="number">3</span>));</span><br><span class="line">    gp42 = fun4(<span class="number">1</span> / <span class="built_in">sqrt</span>(<span class="number">3</span>));</span><br><span class="line">    fprintf(<span class="string">&quot;%.8f\n&quot;</span>, (<span class="built_in">pi</span> / <span class="number">8</span>) * (gp11 + gp12 + gp21 + gp22 + gp31 + gp32 + gp41 + gp42));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="第三题">第三题</h2>
<h3 id="题目要求">题目要求</h3>
<p>目标积分式为</p>
<p><span class="math display">\[
\int_0^1 \frac{x^4(1-x)^4}{1+x^2}dx
\]</span></p>
<p>节点数取 <span class="math inline">\(N=2^n+1, n=1, 2, 3,..., 20\)</span>。利用复合Simpson公式进行求解。</p>
<h3 id="题目作答">题目作答</h3>
<p>复合Simpson公式如下</p>
<p><span class="math display">\[
\int_a^bf(x)dx \approx \frac{h}{6}[f(a) + f(b) + 2\sum_{i=1}^{n-1}f(x_i)+4\sum_{i=1}^{n-1}f(x_{i+\frac{1}{2}})]
\]</span></p>
<p>由题目要求，可知目标积分区间为 <span class="math inline">\([0, 1]\)</span>，并且要将积分区间均分为 <span class="math inline">\(2^n\)</span> 份，所以每个区间的长度均为 <span class="math inline">\(\displaystyle\frac{1}{2^n}\)</span>。此时，步长 <span class="math inline">\(h\)</span> 为</p>
<p><span class="math display">\[
h = \frac{b-a}{2^n}
\]</span></p>
<p>那么，不妨将 <span class="math inline">\(x_i\)</span> 表示为</p>
<p><span class="math display">\[
x_i = \displaystyle\frac{i}{2^n}
\]</span></p>
<p>将目标积分式代入复合Simpson公式，可以得到</p>
<p><span class="math display">\[
\int_0^1\frac{x^4(1-x)^4}{1+x^2}dx=\frac{h}{6}[f(0)+f(1)+2\sum_{i=1}^{2^n-1}f(\frac{i}{2^n}) + 4\sum_{i=0}^{2^n-1}f(\frac{1}{2^n}(i+\frac{1}{2}))]
\]</span></p>
<p>可以编写MATLAB代码如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Assignment_Ch5_Prob3</span><span class="params">()</span></span></span><br><span class="line">    fun = @(x) (x .^ <span class="number">4</span> .* (<span class="number">1</span> - x) .^ <span class="number">4</span>) ./ (<span class="number">1</span> + x .^ <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    integral_result = <span class="built_in">zeros</span>(<span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> n = <span class="number">1</span>: <span class="number">20</span></span><br><span class="line">        N = <span class="number">2</span> .^ n + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">% 先计算 2sum_&#123;i=1&#125;^&#123;N-2&#125;f(x_i) + f(a) + f(b)</span></span><br><span class="line">        res1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>: N - <span class="number">2</span></span><br><span class="line">            res1 = res1 + fun(<span class="built_in">i</span> / (N - <span class="number">1</span>)); </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% 再计算 4sum_&#123;i=0&#125;^&#123;N-2&#125;f(x_&#123;i+\frac&#123;1&#125;&#123;2&#125;&#125;)</span></span><br><span class="line">        res2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">0</span>: N - <span class="number">2</span></span><br><span class="line">            res2 = res2 + fun((<span class="built_in">i</span> + <span class="number">0.5</span>) / (N - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        integral_result(n) = (fun(<span class="number">0</span>) + fun(<span class="number">1</span>) + res1 * <span class="number">2</span> + res2 * <span class="number">4</span>) / (<span class="number">6</span> * (N - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    MATLAB_integral_result = integral(fun, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    integral_diff = <span class="built_in">abs</span>(integral_result - MATLAB_integral_result);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">figure</span>();</span><br><span class="line">    set(gcf, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">560</span>, <span class="number">420</span>]);</span><br><span class="line">    n = <span class="number">1</span>: <span class="number">20</span>;</span><br><span class="line">    N = <span class="number">2</span> .^ n + <span class="number">1</span>;</span><br><span class="line">    loglog(N, integral_diff);</span><br><span class="line">    title(<span class="string">&quot;Simpson复合求积时节点数与积分误差之间的关系&quot;</span>);</span><br><span class="line">    xlabel(<span class="string">&quot;节点数量logN&quot;</span>);</span><br><span class="line">    ylabel(<span class="string">&quot;积分误差&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>结果如下</p>
<figure>
<img src="/2022/11/14/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%BD%9C%E4%B8%9A-%E7%AC%AC%E4%BA%94%E7%AB%A0//Assignment_Ch5_Prob3.svg" alt><figcaption>Simpson积分误差与节点数的关系</figcaption>
</figure>
<p>上述计算中将MATLAB中的 <code>integral()</code> 函数积分结果近似看作真值。Simpson公式的积分误差在节点数不非常多的时候，随着节点数的增长而下降，在对数尺度上呈现线性关系；当节点数多到一定程度的时候，积分误差不再随着节点数的增长而下降，而是稳定在一定水平，随节点数变化而略有起伏。</p>
<h2 id="第四题">第四题</h2>
<h3 id="题目要求-1">题目要求</h3>
<p>目标积分式为</p>
<p><span class="math display">\[
\int_0^1\frac{x^4(1-x)^4}{1+x^2}dx
\]</span></p>
<p>要求分别使用Romberg积分和三点高斯积分进行计算。</p>
<h3 id="使用romberg积分求解">使用Romberg积分求解</h3>
<p>由第三题，可以观察到Simpson积分对目标积分式的积分误差极限基本在 <span class="math inline">\(10^{-17}\)</span> 水平，所以差不多可以将Romberg积分的积分误差条件定在 <span class="math inline">\(10^{-15}\)</span>。</p>
<p>Romberg积分外推加速如下</p>
<p><span class="math display">\[
T_n^{(m)} = \frac{T_{2n}^{(m-1)}-2^{-2m}T_n^{(m-1)}}{1-2^{-2m}}
\]</span></p>
<p>MATLAB代码如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">romberg_integral</span><span class="params">()</span></span></span><br><span class="line">    fun = @(x) (x .^ <span class="number">4</span> .* (<span class="number">1</span> - x) .^ <span class="number">4</span>) ./ (<span class="number">1</span> + x .^ <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 将积分误差设定为 10^(-15)</span></span><br><span class="line">    <span class="built_in">eps</span> = <span class="number">10</span> ^ (<span class="number">-17</span>);</span><br><span class="line"></span><br><span class="line">    error = <span class="number">1</span>;</span><br><span class="line">    m = <span class="number">0</span>;</span><br><span class="line">    Tn = <span class="number">0.5</span> * (fun(<span class="number">0</span>) + fun(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span> error &gt; <span class="built_in">eps</span></span><br><span class="line">        m = m + <span class="number">1</span>;</span><br><span class="line">        n = <span class="number">2</span> ^ m;</span><br><span class="line">        h = <span class="number">1</span> / n;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>: n<span class="number">-1</span></span><br><span class="line">            res = res + fun(<span class="built_in">i</span> * h);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        T2n = (res * <span class="number">2</span> + fun(<span class="number">0</span>) + fun(<span class="number">1</span>)) * (h * <span class="number">0.5</span>);</span><br><span class="line">        error = <span class="built_in">abs</span>(T2n - Tn) * <span class="number">3</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">% 利用外推加速技术计算新的Tn</span></span><br><span class="line">        Tn = (T2n - <span class="number">2</span> ^ (<span class="number">-2</span> * m) * Tn) / (<span class="number">1</span> - <span class="number">2</span> ^ (<span class="number">-2</span> * m));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    fprintf(<span class="string">&quot;m = %d, error = %.20f\n&quot;</span>, m, error);</span><br><span class="line">    fprintf(<span class="string">&quot;Romberg integral result: %.20f\n&quot;</span>, Tn);</span><br><span class="line">    fprintf(<span class="string">&quot;MATLAB integral result:  %.20f\n&quot;</span>, integral(fun, <span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>计算结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m = 11, error = 0.00000000000000000520</span><br><span class="line">Romberg integral result: 0.00126448926734961590</span><br><span class="line">MATLAB integral result:  0.00126448926734961872</span><br></pre></td></tr></table></figure>
<h3 id="使用三点高斯公式求解">使用三点高斯公式求解</h3>
<p>对于目标积分式，宜使用Gauss-Legendre公式进行积分。<span class="math inline">\(n=2\)</span> 时，Gauss-Legendre公式为</p>
<p><span class="math display">\[
\int_{-1}^1f(x)dx \approx \frac{5}{9}f(-\sqrt{\frac{3}{5}}) + \frac{8}{9}f(0) + \frac{5}{9}f(\sqrt{\frac{3}{5}})
\]</span></p>
<p>注意到原式积分区间为 <span class="math inline">\([0, 1]\)</span>，因此需要进行线性变换。令</p>
<p><span class="math display">\[
t = 2x-1
\]</span></p>
<p>可以将原函数改写为</p>
<p><span class="math display">\[
g(t) = \frac{[\frac{1}{2}(t+1)]^4[1-\frac{1}{2}(t+1)]^4}{1+[\frac{1}{2}(t+1)]^2} = \frac{(1+t)^4(1-t)^4}{256+64(1+t)^2}
\]</span></p>
<p>那么积分式改写为</p>
<p><span class="math display">\[
\int_0^1\frac{x^4(1-x)^4}{1+x^2}dx=\int_{-1}^1\frac{(1+t)^4(1-t)^4}{512 + 128(1+t)^2}dt
\]</span></p>
<p>根据Gauss-Legendre公式，有</p>
<p><span class="math display">\[
\int_{-1}^1\frac{(1+t)^4(1-t)^4}{512 + 128(1+t)^2}dt \approx \frac{5}{9}g(-\sqrt{\frac{3}{5}}) + \frac{8}{9}g(0) + \frac{5}{9}g(\sqrt{\frac{3}{5}})
\]</span></p>
<p>将高斯点代入，可以得到</p>
<p><span class="math display">\[
\int_{-1}^1\frac{(1+t)^4(1-t)^4}{512 + 128(1+t)^2}dt \approx 0.00143186003683241263
\]</span></p>
<p>MATLAB代码如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gauss_legendre_integral</span><span class="params">()</span></span></span><br><span class="line">    fun = @(x) <span class="number">0.5</span> .* (((<span class="number">0.5</span> .* (<span class="number">1</span> + x)) .^ <span class="number">4</span>) .* ((<span class="number">1</span> - <span class="number">0.5</span> .* (<span class="number">1</span> + x)) .^ <span class="number">4</span>)) ./ (<span class="number">1</span> + (<span class="number">0.5</span> * (<span class="number">1</span> + x)) .^ <span class="number">2</span>);</span><br><span class="line">    original_fun = @(x) (x .^ <span class="number">4</span> .* (<span class="number">1</span> - x) .^ <span class="number">4</span>) ./ (<span class="number">1</span> + x .^ <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    res = (<span class="number">5</span> / <span class="number">9</span>) * (fun(-<span class="built_in">sqrt</span>(<span class="number">3</span> / <span class="number">5</span>)) + fun(<span class="built_in">sqrt</span>(<span class="number">3</span> / <span class="number">5</span>))) + (<span class="number">8</span> / <span class="number">9</span>) * fun(<span class="number">0</span>);</span><br><span class="line">    fprintf(<span class="string">&quot;Gauss-Legendre integral result: %.20f\n&quot;</span>, res);</span><br><span class="line">    fprintf(<span class="string">&quot;MATLAB integral result: %.20f\n&quot;</span>, integral(original_fun, <span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Gauss-Legendre integral result: 0.00143186003683241263</span><br><span class="line">MATLAB integral result: 0.00126448926734961872</span><br></pre></td></tr></table></figure>
<h2 id="第五题">第五题</h2>
<h3 id="monte-carlo方法求解">Monte-Carlo方法求解</h3>
<p>首先，由于目标积分式为三重积分，所以考虑尝试利用Monte-Carlo方法进行求解，MATLAB代码如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ch5_Prob5</span><span class="params">()</span></span></span><br><span class="line">    fun = @(x, y, z) (<span class="built_in">sin</span>(x) .* <span class="built_in">sin</span>(y) .* <span class="built_in">sin</span>(z)) ./ (<span class="number">1</span> + x.^<span class="number">2</span> + y.^<span class="number">2</span> + z.^<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    MATLAB_integral_result = integral3(fun, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    fprintf(<span class="string">&quot;MATLAB result: %.20f\n&quot;</span>, MATLAB_integral_result);</span><br><span class="line"></span><br><span class="line">    fprintf(<span class="string">&quot;Monte-Carlo result\n&quot;</span>)</span><br><span class="line">    N = [<span class="number">10</span> <span class="number">10</span>^<span class="number">2</span> <span class="number">10</span>^<span class="number">3</span> <span class="number">10</span>^<span class="number">4</span> <span class="number">10</span>^<span class="number">5</span> <span class="number">10</span>^<span class="number">6</span> <span class="number">10</span>^<span class="number">7</span> <span class="number">10</span>^<span class="number">8</span>];</span><br><span class="line">    monte_carlo_error = <span class="built_in">zeros</span>(<span class="built_in">length</span>(N), <span class="number">1</span>);</span><br><span class="line">    monte_carlo_relative_error = <span class="built_in">zeros</span>(<span class="built_in">length</span>(N), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>: <span class="built_in">length</span>(N)</span><br><span class="line">        tic;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>: N(<span class="built_in">i</span>)</span><br><span class="line">            res = res + fun(<span class="built_in">rand</span>(), <span class="built_in">rand</span>(), <span class="built_in">rand</span>());</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        res = res / N(<span class="built_in">i</span>);</span><br><span class="line">        error = <span class="built_in">abs</span>(res - MATLAB_integral_result);</span><br><span class="line">        relative_error = error / MATLAB_integral_result;</span><br><span class="line">        fprintf(<span class="string">&quot;N: 10^%d, result: %.20f, error: %.20f, relative error: %.4f%%\n&quot;</span>, <span class="built_in">log10</span>(N(<span class="built_in">i</span>)), res, error, relative_error * <span class="number">100</span>);</span><br><span class="line">        monte_carlo_error(<span class="built_in">i</span>) = error;</span><br><span class="line">        monte_carlo_relative_error(<span class="built_in">i</span>) = relative_error;</span><br><span class="line">        toc;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">figure</span>();</span><br><span class="line">    loglog(N, monte_carlo_error);</span><br><span class="line">    title(<span class="string">&quot;Monte-Carlo算法积分误差与节点规模之间的关系&quot;</span>);</span><br><span class="line">    xlabel(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">    ylabel(<span class="string">&quot;积分误差&quot;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>输出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MATLAB result: 0.04136669609096685352</span><br><span class="line">Monte-Carlo result</span><br><span class="line">N: 10^1, result: 0.03467372868187562629, error: 0.00669296740909122723, relative error: 16.1796%</span><br><span class="line">Elapsed time is 0.001335 seconds.</span><br><span class="line">N: 10^2, result: 0.05036971185335869378, error: 0.00900301576239184026, relative error: 21.7639%</span><br><span class="line">Elapsed time is 0.000289 seconds.</span><br><span class="line">N: 10^3, result: 0.04185950979840031422, error: 0.00049281370743346070, relative error: 1.1913%</span><br><span class="line">Elapsed time is 0.000692 seconds.</span><br><span class="line">N: 10^4, result: 0.04124614901521712895, error: 0.00012054707574972456, relative error: 0.2914%</span><br><span class="line">Elapsed time is 0.003250 seconds.</span><br><span class="line">N: 10^5, result: 0.04129323625366838890, error: 0.00007345983729846461, relative error: 0.1776%</span><br><span class="line">Elapsed time is 0.020172 seconds.</span><br><span class="line">N: 10^6, result: 0.04134011764463717958, error: 0.00002657844632967393, relative error: 0.0643%</span><br><span class="line">Elapsed time is 0.127226 seconds.</span><br><span class="line">N: 10^7, result: 0.04136027708887315274, error: 0.00000641900209370078, relative error: 0.0155%</span><br><span class="line">Elapsed time is 1.323732 seconds.</span><br><span class="line">N: 10^8, result: 0.04136824943853992242, error: 0.00000155334757306891, relative error: 0.0038%</span><br><span class="line">Elapsed time is 13.240245 seconds.</span><br></pre></td></tr></table></figure>
<p>积分误差与节点数量的关系如图所示，每次运算的误差略有不同，但总体趋势一致。</p>
<p><img src="/2022/11/14/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%BD%9C%E4%B8%9A-%E7%AC%AC%E4%BA%94%E7%AB%A0//Ch5_Prob5.png" alt="积分误差与节点规模之间的关系" align="center" width="80%"></p>
<p>输出结果中展示了Monte-Carlo方法在节点规模不同时所消耗的时间（计算平台：Intel i7-9750H，MATLAB默认使用单核心进行计算）。</p>
<h3 id="复合simpson公式求解">复合Simpson公式求解</h3>
<p>下面尝试使用复合Simpson公式进行求解。MATLAB代码如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpson</span><span class="params">()</span></span></span><br><span class="line">    fun = @(x, y, z) (<span class="built_in">sin</span>(x) .* <span class="built_in">sin</span>(y) .* <span class="built_in">sin</span>(z)) ./ (<span class="number">1</span> + x.^<span class="number">2</span> + y.^<span class="number">2</span> + z.^<span class="number">2</span>);</span><br><span class="line">    tic;</span><br><span class="line">    MATLAB_integral_result = integral3(fun, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    toc;</span><br><span class="line">    fprintf(<span class="string">&quot;MATLAB result: %.20f\n&quot;</span>, MATLAB_integral_result);</span><br><span class="line"></span><br><span class="line">    n = [<span class="number">10</span> <span class="number">10</span>^<span class="number">2</span> <span class="number">10</span>^<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> cnt = <span class="number">1</span>: <span class="built_in">length</span>(n)</span><br><span class="line">        tic;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        h = <span class="number">1</span> / n(cnt);</span><br><span class="line">        x = <span class="number">0</span>: h: <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>: h: <span class="number">1</span>;</span><br><span class="line">        z = <span class="number">0</span>: h: <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>: n(cnt)<span class="number">-1</span></span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>: n(cnt)<span class="number">-1</span></span><br><span class="line">                <span class="keyword">for</span> k = <span class="number">1</span>: n(cnt)<span class="number">-1</span></span><br><span class="line">                    vec_x = [x(<span class="built_in">i</span>) x(<span class="built_in">i</span>)+<span class="number">0.5</span>*h x(<span class="built_in">i</span>+<span class="number">1</span>)];</span><br><span class="line">                    vec_y = [y(<span class="built_in">j</span>) y(<span class="built_in">j</span>)+<span class="number">0.5</span>*h y(<span class="built_in">j</span>+<span class="number">1</span>)];</span><br><span class="line">                    vec_z = [z(k) z(k)+<span class="number">0.5</span>*h z(k+<span class="number">1</span>)];</span><br><span class="line">                    weight = [<span class="number">1</span> <span class="number">4</span> <span class="number">1</span>];</span><br><span class="line">                    local_sum = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> idx_x = <span class="number">1</span>: <span class="number">3</span></span><br><span class="line">                        <span class="keyword">for</span> idx_y = <span class="number">1</span>: <span class="number">3</span></span><br><span class="line">                            <span class="keyword">for</span> idx_z = <span class="number">1</span>: <span class="number">3</span></span><br><span class="line">                                local_weight = weight(idx_x) * weight(idx_y) * weight(idx_z);</span><br><span class="line">                                local_sum = local_sum + local_weight * fun(vec_x(idx_x), vec_y(idx_y), vec_z(idx_z));</span><br><span class="line">                            <span class="keyword">end</span></span><br><span class="line">                        <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    res = res + local_sum / <span class="number">6</span>^<span class="number">3</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        res = res / (n(cnt)^<span class="number">3</span>);</span><br><span class="line">        error = <span class="built_in">abs</span>(res - MATLAB_integral_result);</span><br><span class="line">        relative_error = error / MATLAB_integral_result;</span><br><span class="line">        fprintf(<span class="string">&quot;n: %d, Mid result: %.20f, error: %.20f, relative error: %.4f%%\n&quot;</span>, n(cnt), res, error, relative_error * <span class="number">100</span>);</span><br><span class="line">        toc;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上面对三重积分的复合Simpson公式进行了拙劣的实现，发现计算效率极低，输出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Elapsed time is 0.015971 seconds.</span><br><span class="line">MATLAB result: 0.04136669609096685352</span><br><span class="line">n: 10, Mid result: 0.02570352453510416774, error: 0.01566317155586268578, relative error: 37.8642%</span><br><span class="line">Elapsed time is 0.008422 seconds.</span><br><span class="line">n: 100, Mid result: 0.03956360837727929125, error: 0.00180308771368756227, relative error: 4.3588%</span><br><span class="line">Elapsed time is 2.130584 seconds.</span><br><span class="line">n: 1000, Mid result: 0.04118390812835896059, error: 0.00018278796260789293, relative error: 0.4419%</span><br><span class="line">Elapsed time is 2168.109162 seconds.</span><br></pre></td></tr></table></figure>
<p>相较而言，使用Monte-Carlo方法进行数值求解似乎要高效很多。</p>
<h3 id="gauss-legendre方法求解">Gauss-Legendre方法求解</h3>
<p>出于好奇，下面尝试使用6点Gauss-Legendre公式进行目标积分式的求解。MATLAB代码如下</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gauss_legendre</span><span class="params">()</span></span></span><br><span class="line">    fun = @(x, y, z) <span class="number">0.125</span> * (<span class="built_in">sin</span>(<span class="number">0.5</span>*(<span class="number">1</span>+x) .* <span class="built_in">sin</span>(<span class="number">0.5</span>*(<span class="number">1</span>+y)) .* <span class="built_in">sin</span>(<span class="number">0.5</span>*(<span class="number">1</span>+z)))) ./ (<span class="number">1</span> + (<span class="number">0.5</span>*(<span class="number">1</span>+x)).^<span class="number">2</span> + (<span class="number">0.5</span>*(<span class="number">1</span>+y)).^<span class="number">2</span> + (<span class="number">0.5</span>*(<span class="number">1</span>+z)).^<span class="number">2</span>);</span><br><span class="line">    tic;</span><br><span class="line">    MATLAB_integral_result = integral3(fun, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    toc;</span><br><span class="line">    fprintf(<span class="string">&quot;MATLAB result: %.20f\n&quot;</span>, MATLAB_integral_result);</span><br><span class="line"></span><br><span class="line">    gauss_point = [<span class="number">-0.93246951</span> <span class="number">0.93246951</span> <span class="number">-0.66120939</span> <span class="number">0.66120939</span> <span class="number">-0.23861919</span> <span class="number">0.23861919</span>];</span><br><span class="line">    gauss_coeff = [<span class="number">0.17132439</span> <span class="number">0.17132439</span> <span class="number">0.36076157</span> <span class="number">0.36076157</span> <span class="number">0.46791393</span> <span class="number">0.46791393</span>];</span><br><span class="line"></span><br><span class="line">    tic;</span><br><span class="line">    res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>: <span class="built_in">length</span>(gauss_point)</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>: <span class="built_in">length</span>(gauss_point)</span><br><span class="line">            <span class="keyword">for</span> k = <span class="number">1</span>: <span class="built_in">length</span>(gauss_point)</span><br><span class="line">                coeff = gauss_coeff(<span class="built_in">i</span>) * gauss_coeff(<span class="built_in">j</span>) * gauss_coeff(k);</span><br><span class="line">                res = res + coeff * fun(gauss_point(<span class="built_in">i</span>), gauss_point(<span class="built_in">j</span>), gauss_point(k));</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    toc;</span><br><span class="line">    error = <span class="built_in">abs</span>(res - MATLAB_integral_result);</span><br><span class="line">    relative_error = error / MATLAB_integral_result;</span><br><span class="line">    fprintf(<span class="string">&quot;6-point Gauss-Legendre result: %.20f, error: %.20f, relative error: %.4f%%\n&quot;</span>, res, error, relative_error);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>输出数据如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Elapsed time is 0.019378 seconds.</span><br><span class="line">MATLAB result: 0.01484292560031314802</span><br><span class="line">Elapsed time is 0.002133 seconds.</span><br><span class="line">6-point Gauss-Legendre result: 0.04425284863858611195, error: 0.02940992303827296567, relative error: 1.9814%</span><br></pre></td></tr></table></figure>
<p>可以看到，Gauss-Legendre公式的计算效率极高，在6点的情况下已经达到了2%的计算精度。这个结果让我想再探索一下更高点数Gauss-Legendre公式对目标积分式的计算精度。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gauss_legendre</span><span class="params">(n)</span></span></span><br><span class="line">    fun = @(x, y, z) <span class="number">0.125</span> * (<span class="built_in">sin</span>(<span class="number">0.5</span>*(<span class="number">1</span>+x) .* <span class="built_in">sin</span>(<span class="number">0.5</span>*(<span class="number">1</span>+y)) .* <span class="built_in">sin</span>(<span class="number">0.5</span>*(<span class="number">1</span>+z)))) ./ (<span class="number">1</span> + (<span class="number">0.5</span>*(<span class="number">1</span>+x)).^<span class="number">2</span> + (<span class="number">0.5</span>*(<span class="number">1</span>+y)).^<span class="number">2</span> + (<span class="number">0.5</span>*(<span class="number">1</span>+z)).^<span class="number">2</span>);</span><br><span class="line">    tic;</span><br><span class="line">    MATLAB_integral_result = integral3(fun, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    toc;</span><br><span class="line">    fprintf(<span class="string">&quot;MATLAB result: %.20f\n&quot;</span>, MATLAB_integral_result);</span><br><span class="line"></span><br><span class="line">    [gauss_point, gauss_coeff] = gauss_lege(n);</span><br><span class="line"></span><br><span class="line">    tic;</span><br><span class="line">    res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>: <span class="built_in">length</span>(gauss_point)</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>: <span class="built_in">length</span>(gauss_point)</span><br><span class="line">            <span class="keyword">for</span> k = <span class="number">1</span>: <span class="built_in">length</span>(gauss_point)</span><br><span class="line">                coeff = gauss_coeff(<span class="built_in">i</span>) * gauss_coeff(<span class="built_in">j</span>) * gauss_coeff(k);</span><br><span class="line">                res = res + coeff * fun(gauss_point(<span class="built_in">i</span>), gauss_point(<span class="built_in">j</span>), gauss_point(k));</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    toc;</span><br><span class="line">    error = <span class="built_in">abs</span>(res - MATLAB_integral_result);</span><br><span class="line">    relative_error = error / MATLAB_integral_result;</span><br><span class="line">    fprintf(<span class="string">&quot;%d-point Gauss-Legendre result: %.20f, error: %.20f, relative error: %.4f%%\n&quot;</span>, n, res, error, relative_error);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>上述代码中，<code>gauss_lege()</code> 是可以生成任意点数的Gauss-Legendre高斯点以及高斯系数的函数。输入 <code>gauss_legendre(100)</code> 发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Elapsed time is 0.016078 seconds.</span><br><span class="line">MATLAB result: 0.01484292560031314802</span><br><span class="line">Elapsed time is 0.081467 seconds.</span><br><span class="line">100-point Gauss-Legendre result: 0.04425285995567417030, error: 0.02940993435536102402, relative error: 1.9814%</span><br></pre></td></tr></table></figure>
<p>相比于6点Gauss-Legendre公式，计算精度没有任何变化。</p>
<h3 id="结论">结论</h3>
<p>综上，Monte-Carlo是计算精度最高的数值积分方法。</p>
<h2 id="第六题">第六题</h2>
<p>首先需要说明一点，对于一条左右端点位于同一高度的悬链线，若令y轴经过悬链线最低点，那么可以将悬链线表示为</p>
<p><span class="math display">\[
y = acosh\frac{x}{a}
\]</span></p>
<p>上面的表达式是悬链线的标准形式。另外，上述标准悬链线从最低点开始，到第一象限任意一点 <span class="math inline">\((x, y)\)</span> 之间的悬链线长度可以通过下式得到</p>
<p><span class="math display">\[
s = asinh\frac{x}{a}
\]</span></p>
<p>若 <span class="math inline">\(x&lt;0\)</span>，则上述公式需要取负。</p>
<p>对于一条两端点不等高的悬链线，在仍然令y轴经过悬链线最低点建立坐标系的前提下，记两端点之间的水平距离为 <span class="math inline">\(H\)</span>，垂直距离为 <span class="math inline">\(h\)</span>，两点之间悬链线长度为 <span class="math inline">\(s\)</span>，左右两端点坐标分别为 <span class="math inline">\((x_1, y_1), (x_2, y_2)\)</span>，可以得到以下关系</p>
<p><span class="math display">\[
\begin{aligned}
    v = acosh\frac{x_2}{a} - acosh\frac{x_1}{a}\\
    s = asinh\frac{x_2}{a} - asinh\frac{x_1}{a}
\end{aligned}
\]</span></p>
<p>上述两条式子求平方差恰好可以得到</p>
<p><span class="math display">\[
s^2 - v^2 = 4a^2sinh^2\frac{x_2 - x_1}{2a}
\]</span></p>
<p>那么可以得到</p>
<p><span class="math display">\[
\sqrt{s^2 - v^2} = 2asinh\frac{H}{2a}
\]</span></p>
<p>等式两边同除以 <span class="math inline">\(H\)</span>，可以得到</p>
<p><span class="math display">\[
\frac{\sqrt{s^2 - v^2}}{H} = \frac{2a}{H}sinh\frac{H}{2a}
\]</span></p>
<p>令 <span class="math inline">\(x=\frac{H}{2a}\)</span>，可以得到</p>
<p><span class="math display">\[
\frac{\sqrt{s^2 - v^2}}{H} = \frac{sinhx}{x}
\]</span></p>
<p>将题设参数代入，可以得到</p>
<p><span class="math display">\[
\frac{sinhx}{x} = \frac{\sqrt{100-16}}{4} = \frac{\sqrt{21}}{2}
\]</span></p>
<p>简单计算可以发现 <span class="math inline">\(\displaystyle\frac{sinh3}{3} \approx 3.3393, \displaystyle\frac{sinh2}{2} \approx 1.8134, \frac{\sqrt{21}}{2} \approx 2.2913\)</span>，那么在 <span class="math inline">\([2, 3]\)</span> 之间通过二分法可以查找得到上述方程的近似解。MATLAB代码如下，绝对误差设定为 <span class="math inline">\(10^{-15}\)</span></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_a</span><span class="params">()</span></span></span><br><span class="line">    fun = @(x) <span class="built_in">sinh</span>(x) ./ x;</span><br><span class="line"></span><br><span class="line">    target = <span class="built_in">sqrt</span>(<span class="number">10</span>^<span class="number">2</span> - <span class="number">4</span>^<span class="number">2</span>) / <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">eps</span> = <span class="number">10</span>^(<span class="number">-15</span>);</span><br><span class="line"></span><br><span class="line">    x1 = <span class="number">2</span>;</span><br><span class="line">    x2 = <span class="number">3</span>;</span><br><span class="line">    error = <span class="built_in">abs</span>(fun(x1) - target);</span><br><span class="line">    <span class="keyword">while</span> error &gt; <span class="built_in">eps</span></span><br><span class="line">        mid_x = <span class="number">0.5</span> * (x1 + x2);</span><br><span class="line">        <span class="keyword">if</span> fun(mid_x) &gt; target</span><br><span class="line">            x2 = mid_x;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x1 = mid_x;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        error = <span class="built_in">abs</span>(fun(mid_x) - target);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    fprintf(<span class="string">&quot;Solution: %.16f, error: %.16f\n&quot;</span>, mid_x, error);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>可以得到结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Solution: 2.4099791561716124, error: 0.0000000000000009</span><br></pre></td></tr></table></figure>
<p>所以可以得到 <span class="math inline">\(x = 2.409979156171612\)</span>，那么可以得到</p>
<p><span class="math display">\[
a = \frac{H}{2x} = 0.8298826962375527
\]</span></p>
<p>通过上述方法，得到了悬链线方程的特征参数 <span class="math inline">\(a\)</span>，但是上述坐标系y轴经过悬链线的最低点，与题设坐标系之间存在平移关系。为了求出 <span class="math inline">\((x^*, y^*)\)</span>，将悬链线方程改写为</p>
<p><span class="math display">\[
y = acosh\frac{x - x^*}{a} + y^*
\]</span></p>
<p>将 <span class="math inline">\((x_1, y_1), (x_2, y_2)\)</span> 代入上述方程，可以得到</p>
<p><span class="math display">\[
\begin{aligned}
    y_1 = acosh\frac{x_1 - x^*}{a} + y^*\\
    y_2 = acosh\frac{x_2 - x^*}{a} + y^*
\end{aligned}
\]</span></p>
<p>两式相减，可以得到</p>
<p><span class="math display">\[
\frac{y_2 - y_1}{a} = cosh\frac{x_2 - x^*}{a}-cosh\frac{x_1 - x^*}{a}
\]</span></p>
<p>由于 <span class="math inline">\(x_2 - x_1 = H\)</span>，所以可以将 <span class="math inline">\(x_2\)</span> 用 <span class="math inline">\(x_1 + H\)</span> 替代，得到</p>
<p><span class="math display">\[
\frac{v}{a} = cosh\frac{x_1 + H - x^*}{a} - cosh\frac{x_1 - x^*}{a}
\]</span></p>
<p>令</p>
<p><span class="math display">\[
\begin{aligned}
    &amp;d = \frac{v}{a}\\
    &amp;t = \frac{x_1-x^*}{a}\\
    &amp;c = \frac{H}{a}
\end{aligned}
\]</span></p>
<p>上述公式可以改写为</p>
<p><span class="math display">\[
d = cosh(t+c) - cosh(t)
\]</span></p>
<p>由于 <span class="math inline">\(coshx = \frac{1}{2}(e^x + e^{-x})\)</span>，所以上述等式可以进一步化为</p>
<p><span class="math display">\[
2d = e^{t+c} + e^{-t-c} - e^t - e^{-t}
\]</span></p>
<p>令 <span class="math inline">\(\tau = e^t\)</span>，有</p>
<p><span class="math display">\[
2d = e^c\tau +e^{-c}\tau^{-1} - \tau - \tau^{-1}
\]</span></p>
<p>等式两边同乘以 <span class="math inline">\(\tau\)</span>，可以得到</p>
<p><span class="math display">\[
2d\tau = (e^c -1)\tau^2+(e^{-c}-1)
\]</span></p>
<p>移项得到</p>
<p><span class="math display">\[
(e^c - 1)\tau^2 - 2d\tau + (e^{-c}-1)=0
\]</span></p>
<p>由一元二次方程的求根公式，可以得到</p>
<p><span class="math display">\[
\tau = \frac{-b\pm\sqrt{b^2 -4ac}}{2a}=\frac{d\pm\sqrt{d^2-(e^c-1)(e^{-c}-1)}}{e^c -1}
\]</span></p>
<p>由于 <span class="math inline">\(\tau = e^t\)</span>，所以</p>
<p><span class="math display">\[
t = ln\frac{d\pm\sqrt{d^2 - (e^c - 1)(e^{-c}-1)}}{e^c -1}
\]</span></p>
<p>由于 <span class="math inline">\(t = \frac{x_1 - x^*}{a}\)</span>，所以</p>
<p><span class="math display">\[
x^* = x_1 - at = x_1 - aln\frac{d\pm\sqrt{d^2 - (e^c - 1)(e^{-c}-1)}}{e^c -1}
\]</span></p>
<p>代入本题中的参数，可以解得</p>
<p><span class="math display">\[
x^* = 1.648421083552779
\]</span></p>
<p>根据</p>
<p><span class="math display">\[
y^* = y_1 - acosh\frac{x_1 - x^*}{a}
\]</span></p>
<p>很容易能求出</p>
<p><span class="math display">\[
y^* = -3.081327311778100
\]</span></p>
<p>所以题设悬链线最低点坐标为 <span class="math inline">\((x^*, y^*) = (1.648421083552779, -3.081327311778100)\)</span>。可以绘制得到悬链线图形如下</p>
<p><img src="/2022/11/14/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%BD%9C%E4%B8%9A-%E7%AC%AC%E4%BA%94%E7%AB%A0//catenary_initial.png" alt="题设初始悬链线" align="center" width="80%"></p>
<p>此时，x轴以下的悬链线长度很显然是左端点 <span class="math inline">\((x_1, y_1)\)</span> 与最低点 <span class="math inline">\((x^*, y^*)\)</span> 之间悬链线长度的两倍，可以由下式得到</p>
<p><span class="math display">\[
s = 2asinh\frac{x^* - x_1}{a} = 5.934938150577525
\]</span></p>
<p>如果将悬链线最低点 <span class="math inline">\((x^*, y^*)\)</span> 固定到 <span class="math inline">\((x^*, x^*)\)</span> 上，那么将会形成两段悬链线。左侧悬链线的长度为</p>
<p><span class="math display">\[
s_l = asinh\frac{x^* - x_1}{a} = 2.967469075288763
\]</span></p>
<p>右侧悬链线的长度则为</p>
<p><span class="math display">\[
s_r = s - s_l = 7.032530924711237
\]</span></p>
<p>另外，左侧悬链线的其他两个几何参数分别为</p>
<p><span class="math display">\[
\begin{aligned}
    H_l = x^* - x_1 = 1.648421083552779\\
    v_l = x^* - y_1 = 1.648421083552779
\end{aligned}
\]</span></p>
<p>右侧悬链线的其他两个几何参数分别为</p>
<p><span class="math display">\[
\begin{aligned}
    H_r = x_2 - x^* = 2.351578916447221\\
    v_r = y_2 - x^* = 2.351578916447221
\end{aligned}
\]</span></p>
<p>下面先求解左侧悬链线的参数 <span class="math inline">\(a_l\)</span>，由</p>
<p><span class="math display">\[
\frac{\sqrt{s_l^2 - v_l^2}}{H_l} = \frac{sinh\frac{H_l}{2a_l}}{\frac{H_l}{2a_l}}
\]</span></p>
<p>使用同样的二分数值求解方法，在区间 <span class="math inline">\([1, 2]\)</span> 内进行解的搜索，可以得到</p>
<p><span class="math display">\[
\frac{H_l}{2a_l} = 1.617660172926119
\]</span></p>
<p>那么</p>
<p><span class="math display">\[
a_l = 0.509507840750946
\]</span></p>
<p>同理，可以得到</p>
<p><span class="math display">\[
\begin{aligned}
    &amp;\frac{H_r}{2a_r} = 2.742262212210288\\
    &amp;a_r = 0.428766240145910
\end{aligned}
\]</span></p>
<p>同样，为了解出这两条悬链线在题设坐标系中的表达式，由</p>
<p><span class="math display">\[
\begin{aligned}
    &amp;d_l = \frac{v_l}{a_l}\\
    &amp;t_l = \frac{x_1-x^*_l}{a_l}\\
    &amp;c_l = \frac{H_l}{a_l}\\
    &amp;x^*_l = x_1 - a_lt_l = x_1 - a_lln\frac{d_l\pm\sqrt{d_l^2 - (e^{c_l} - 1)(e^{-c_l}-1)}}{e^{c_l} -1}
\end{aligned}
\]</span></p>
<p>可以解出</p>
<p><span class="math display">\[
x^*_l = 0.505107188587596
\]</span></p>
<p>根据</p>
<p><span class="math display">\[
y^*_l = y_1 - a_lcosh\frac{x_1 - x^*_l}{a_l} = -0.78106929181407
\]</span></p>
<p>对于左侧的悬链线，y轴以下的长度可以通过 <span class="math inline">\((x_1, y_1)\)</span> 到 <span class="math inline">\((x_l^*, y^*_l)\)</span> 之间的悬链线2倍长度得到</p>
<p><span class="math display">\[
s_{tl} = 2a_lsinh\frac{x^*_l - x_1}{a_l} = 1.184011822285978
\]</span></p>
<p>下面解出右侧悬链线在题设坐标系下的方程</p>
<p><span class="math display">\[
\begin{aligned}
    &amp;d_r = \frac{v_r}{a_r}\\
    &amp;t_r = \frac{x^*-x^*_r}{a_r}\\
    &amp;c_r = \frac{H_r}{a_r}\\
    &amp;x^*_r = x^* - a_rt_r = x^* - a_rln\frac{d_r\pm\sqrt{d_r^2 - (e^{c_r} - 1)(e^{-c_r}-1)}}{e^{c_r} -1}
\end{aligned}
\]</span></p>
<p>可以解出</p>
<p><span class="math display">\[
x_r^* = 2.675103585900648
\]</span></p>
<p>另外也很容易解出</p>
<p><span class="math display">\[
y^*_r = x^* - a_rcosh\frac{x^* - x^*_r}{a_r} = -0.721365152257195
\]</span></p>
<p>可以绘制图像如下</p>
<p><img src="/2022/11/14/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%E4%BD%9C%E4%B8%9A-%E7%AC%AC%E4%BA%94%E7%AB%A0//catenary_after.png" alt="将原悬链线最低点固定后的悬链线图形" width="80%" align="center"></p>
<p>接下来，需要解出右侧悬链线与x轴相交点的横坐标。记</p>
<p><span class="math display">\[
f(x) = a_r cosh\frac{x - x^*_r}{a_r} + y^*_r
\]</span></p>
<p>那么实际上题目可以转换为求以下方程的解</p>
<p><span class="math display">\[
f(x) = 0
\]</span></p>
<p>由于悬链线具有对称性，因此只需要求出悬链线与x轴交点中的一个，就可以解出x轴以下部分的长度。同样，可以通过二分法进行数值求解，得到</p>
<p><span class="math display">\[
x_{sol} = 2.199026644146695
\]</span></p>
<p>那么，右侧悬链线x轴以下的长度可以表示为</p>
<p><span class="math display">\[
s_{tr} = 2a_rsinh\frac{x^*_r - x_{sol}}{a_r} = 1.160219279622929
\]</span></p>
<p>所以经过调整后的悬链线位于x轴以下的总长度为</p>
<p><span class="math display">\[
s_t = s_{tl} + s_{tr} = 1.184011822285978 + 1.160219279622929 = 2.344231101908907
\]</span></p>
<p>变化量为</p>
<p><span class="math display">\[
\Delta s = s - s_t = 5.934938150577525 - 2.344231101908907 = 3.590707048668619
\]</span></p>
]]></content>
      <categories>
        <category>University</category>
      </categories>
      <tags>
        <tag>Numerical Analysis</tag>
        <tag>Mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵分析笔记-多项式</title>
    <url>/2022/11/26/%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E5%A4%9A%E9%A1%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>本章节介绍多项式的一些基础知识，为后续章节中的矩阵分析做基础知识铺垫。</p>
<span id="more"></span>
<h2 id="数域">数域</h2>
<h3 id="数域的概念">数域的概念</h3>
<p>数域是对四则运算封闭的数集。所谓对四则运算封闭，指的是从数集中随意取出两个数，进行任意<strong>合法</strong>的四则运算以后，得到的结果仍然属于这个数集。注意，这里强调了合法的四则运算，形如除以0这种未定义的运算不计入在内，所以不能以某些数集中存在0元素，而通过不能除以0来判断这个数集不是数域。</p>
<p>常见的数域有实数集、复数集，但整数集就不是一个数域，因为两个整数做除法可能会得到小数，而小数不属于整数集。</p>
<h3 id="广义四则运算">广义四则运算</h3>
<p>前面提到的四则运算仍然是普通的加减乘除，但实际上一个数集如果对广义的四则运算封闭，那么仍然可以称其为数域。</p>
<p>所谓广义的四则运算，指的是我们可以在一个数集上自定义加法和乘法，只要自定义的加法和乘法满足交换律、结合律、分配律即可，随后只要定义新的加法和乘法的逆运算，即可视为自定义的减法和除法。例如对于素数集，可以定义在加法和乘法后取余数，作为新的加法和乘法，并且这个新的加法和乘法都是存在逆运算的，因此素数集也可以认为是一种数域。</p>
<p>广义四则运算以及相应的数域属于扩展内容，和主线关系不大。本教材中所提的数域，主要就是有理数、实数和复数域。下面用 <span class="math inline">\(F\)</span> 来表示有理数、实数和复数域，表示下面所提到的内容对这三个数域都成立。</p>
<h2 id="一元多项式">一元多项式</h2>
<h3 id="一元多项式的定义">一元多项式的定义</h3>
<p>若有整数 <span class="math inline">\(n&gt;0\)</span>，<span class="math inline">\(a_0, a_1, \cdots, a_n \in F\)</span> 且 <span class="math inline">\(a_n \neq 0\)</span>，<span class="math inline">\(x\)</span> 是一个<em>文字符号</em>，那么称</p>
<p><span class="math display">\[
f(x) = \sum_{k=0}^n a_k x^k
\]</span></p>
<p>为数域 <span class="math inline">\(F\)</span> 上的一个一元多项式，<span class="math inline">\(n\)</span> 称为这个一元多项式的次数，也记作 <span class="math inline">\(deg f(x)\)</span>。<span class="math inline">\(a_kx^k\)</span> 称为一元多项式的 <span class="math inline">\(k\)</span> 次项，<span class="math inline">\(a_k\)</span> 称为这个一元多项式的 <span class="math inline">\(k\)</span> 次项系数，<span class="math inline">\(a_0\)</span> 称为0次项或常数项。</p>
<p><span class="math inline">\(f(x)=0\)</span> 也是一个一元多项式，不过比较特殊，一般称其为<strong>零多项式</strong>，其次数定义为 <span class="math inline">\(-\infty\)</span>。这个定义在后续的应用中会带来很大的方便。</p>
<p>数域 <span class="math inline">\(F\)</span> 上的一元多项式全体，用 <span class="math inline">\(F[x]\)</span> 表示。</p>
<h3 id="一元多项式的运算">一元多项式的运算</h3>
<h4 id="一元多项式相等">一元多项式相等</h4>
<p>若两个一元多项式 <span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 除了系数为0的项以外，其他同次项系数全部相等，则称这两个一元多项式相等。</p>
<h4 id="一元多项式加法">一元多项式加法</h4>
<p>一元多项式的加法很简单，假定有一个 <span class="math inline">\(n\)</span> 次的一元多项式 <span class="math inline">\(f(x)\)</span> 和一个 <span class="math inline">\(m\)</span> 次的一元多项式 <span class="math inline">\(g(x)\)</span>，并且 <span class="math inline">\(n\geq m\)</span>，可以将这两个一元多项式分别表示为</p>
<p><span class="math display">\[
\begin{aligned}
    f(x) &amp;= \sum_{k=0}^n a_k x^k \\
    g(x) &amp;= \sum_{k=0}^n b_k x^k, \ b_i = 0 \ (n &gt; i &gt; m)
\end{aligned}
\]</span></p>
<p>那么，两个一元多项式的加法就可以定义为</p>
<p><span class="math display">\[
f(x) + g(x) = \sum_{k=0}^n (a_k + b_k)x^k
\]</span></p>
<p>显然，一元多项式的减法就是一元多项式加法的逆运算</p>
<p><span class="math display">\[
f(x) - g(x) = \sum_{k=0}^n (a_k - b_k)x^k
\]</span></p>
<p>一元多项式的加减法对多项式次数的影响是</p>
<p><span class="math display">\[
deg[f(x) \pm g(x)] \leq max(m, n)
\]</span></p>
<h4 id="一元多项式乘法">一元多项式乘法</h4>
<p>一元多项式的乘法也很简单，无非就是两个一元多项式的很多个项相乘后合并同类项，然后再相加，可以表示为</p>
<p><span class="math display">\[
\begin{aligned}
    f(x)g(x) &amp;= \sum_{k=0}^{n+m} c_k x^k\\
    c_k &amp;= \sum_{j=0}^k a_jb_{k-j}
\end{aligned}
\]</span></p>
<p>一元多项式乘法对多项式次数的影响是</p>
<p><span class="math display">\[
deg[f(x)g(x)] = m+n
\]</span></p>
<p>从这里可以发现，将零多项式的次数定义为 <span class="math inline">\(-\infty\)</span> 很有好处，当 <span class="math inline">\(f(x)=0\)</span> 或 <span class="math inline">\(g(x)=0\)</span> 时，上面的这个多项式次数影响公式仍然成立，而不需要为零多项式进行额外说明。</p>
<h4 id="一元多项式带余除法">一元多项式带余除法</h4>
<p>一元多项式不能直接定义乘法的逆运算，但是可以像整数一样定义带余除法，定义如下：对于一元多项式 <span class="math inline">\(f(x), g(x) \in F[x]\)</span>，存在唯一的一组 <span class="math inline">\(q(x), r(x) \in F[x]\)</span>，使得 <span class="math inline">\(f(x) = q(x)g(x) + r(x)\)</span> 成立。<span class="math inline">\(q(x), r(x)\)</span> 分别称为 <span class="math inline">\(f(x)\)</span> 除以 <span class="math inline">\(g(x)\)</span> 所得的商式(quotient)和余式(remainder)。</p>
<p>其中，必然存在 <span class="math inline">\(deg\ r(x) &lt; deg\ g(x)\)</span>。</p>
<p>一元多项式的带余除法和整数的带余除法计算基本一致。在计算时，先找被除式的最高次项与除式最高次项的次数差，并对相应的系数做除法，得到商式的最高次项及其系数，然后用这个最高次项乘以除式，并用被除式减去这个乘法结果；随后，再将上述一元多项式减法结果作为新的被除式，重复上述步骤，直到被除式的次数小于除式的次数，那么最后剩下的减法结果就是余式，商式的项也就不再继续更新。本质上，这就是一元多项式的长除法，由于写长除法的LaTeX公式非常麻烦，因此意会即可，反正我也就是用自己的话描述一遍以加深记忆，不会真有人回来看这一段描述文字复习长除法吧！</p>
<p>需要注意，一元多项式的系数必须属于某一数域，否则多项式带余除法可能会不成立。</p>
<h4 id="一元多项式整除">一元多项式整除</h4>
<p>在一元多项式的带余除法中，可能出现余式恰好为0的情况。这种情况称为一元多项式整除，此时被除式称为除式的<strong>倍式</strong>，除式称为被除式的<strong>因式</strong>，和整数整除的倍数、因数概念是一致的。假如 <span class="math inline">\(f(x)\)</span> 可以被 <span class="math inline">\(g(x)\)</span> 整除，那么可以写作 <span class="math inline">\(g(x) | f(x)\)</span>。</p>
<p>对于任一一元多项式 <span class="math inline">\(f(x)\)</span>，可以发现这个多项式的任意非零倍数以及常数多项式总是能够整除它本身，因此称常数多项式和 <span class="math inline">\(cf(x)\)</span> 为 <span class="math inline">\(f(x)\)</span> 的<strong>平凡因式</strong>；反过来，<span class="math inline">\(f(x)\)</span> 总是能够整除 <span class="math inline">\(cf(x)\)</span> 以及零多项式，因此零多项式和 <span class="math inline">\(cf(x)\)</span> 是 <span class="math inline">\(f(x)\)</span> 的<strong>平凡倍式</strong>。可以看出，<span class="math inline">\(cf(x)\)</span> 既是 <span class="math inline">\(f(x)\)</span> 的平凡因式，又是 <span class="math inline">\(f(x)\)</span> 的平凡倍式。</p>
<p>关于整除，有以下比较tricky的性质，可以稍微记一下</p>
<ol type="1">
<li>如果 <span class="math inline">\(f(x)|g(x)\)</span> 且 <span class="math inline">\(g(x)|f(x)\)</span>，那么 <span class="math inline">\(f(x) = cg(x)\)</span>，<span class="math inline">\(c\)</span> 为非零常数</li>
<li>整除带有传递性，若 <span class="math inline">\(f(x)|g(x), g(x)|h(x)\)</span>，那么必有 <span class="math inline">\(f(x)|h(x)\)</span></li>
<li>若 <span class="math inline">\(f(x)|g_j(x), u_j(x) \in F[x], j=1, 2\)</span>，则 <span class="math inline">\(f(x) | u_1(x)g_1(x) + u_2(x) g_2(x)\)</span></li>
</ol>
<h4 id="余式定理">余式定理</h4>
<p>如果除式为一次一元多项式，例如 <span class="math inline">\(g(x)=x-c\)</span>，那么用 <span class="math inline">\(g(x)\)</span> 去除 <span class="math inline">\(f(x)\)</span> 时，余式满足 <span class="math inline">\(r(x)=f(c)\)</span>，证明如下:</p>
<p>由于 <span class="math inline">\(g(x)\)</span> 除 <span class="math inline">\(f(x)\)</span> 可以表示为 <span class="math inline">\(f(x)=q(x)g(x) + r(x)\)</span>，那么将 <span class="math inline">\(g(x) = x-c\)</span> 代入，可以得到</p>
<p><span class="math display">\[
f(x) = (x-c)q(x) + r(x)
\]</span></p>
<p>令 <span class="math inline">\(x=c\)</span>，有</p>
<p><span class="math display">\[
f(c) = r(c)
\]</span></p>
<p>由于除式 <span class="math inline">\(g(x)=x-c\)</span>，次数为一次，那么商式的次数肯定是被除式的次数减一次，这意味着余式 <span class="math inline">\(r(x)\)</span> 是常数多项式，所以余式就是一个常数，压根和 <span class="math inline">\(x\)</span> 没关系，所以 <span class="math inline">\(r(x)=r(c)\)</span>，那么很自然有 <span class="math inline">\(r(x)=f(c)\)</span> 成立。</p>
<p>从余式定理还可推出，如果 <span class="math inline">\((x-c)|f(x)\)</span> 成立，那么显然，<span class="math inline">\(f(c)=0\)</span>，即 <span class="math inline">\(x = c\)</span> 是多项式 <span class="math inline">\(f(x)\)</span> 的零点。</p>
<h3 id="最大公因式与最小公倍式">最大公因式与最小公倍式</h3>
<h4 id="最大公因式">最大公因式</h4>
<p>和两个整数有公因数一样，多项式也有公因式的概念。假如对于 <span class="math inline">\(f(x), g(x) \in F[x]\)</span>，存在一个多项式 <span class="math inline">\(d(x) \in F[x]\)</span>，满足 <span class="math inline">\(d(x)|f(x)\)</span> 且 <span class="math inline">\(d(x)|g(x)\)</span>，那么称 <span class="math inline">\(d(x)\)</span> 为多项式 <span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 的公因式(Common Divisor)。</p>
<p>对于多项式 <span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 的某一公因式 <span class="math inline">\(d(x)\)</span>，若 <span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 的任一公因式 <span class="math inline">\(d_i(x)\)</span> 同时也是 <span class="math inline">\(d(x)\)</span> 的因式，那么可以认为 <span class="math inline">\(d(x)\)</span> 是上述两个多项式的其中一个最大公因式(Greatest Common Divisor, gcd)。</p>
<p>为了更好地介绍最大公因式，下面先说明一个与辗转相除法相关的引理。</p>
<h5 id="被除式除式和余式的公因式关系">被除式、除式和余式的公因式关系</h5>
<p>对于 <span class="math inline">\(f(x), g(x), q(x), r(x) \in F[x]\)</span>，若这些多项式满足多项式带余除法关系</p>
<p><span class="math display">\[
f(x) = q(x)g(x) + r(x)
\]</span></p>
<p>那么，<span class="math inline">\(f(x), g(x)\)</span> 的公因式全体恰为 <span class="math inline">\(g(x), r(x)\)</span> 的公因式全体。</p>
<p>这条定理的证明很简单，从两个方面考虑：</p>
<ol type="1">
<li>若 <span class="math inline">\(\varphi(x)\)</span> 是 <span class="math inline">\(f(x), g(x)\)</span> 的公因式，即 <span class="math inline">\(\varphi(x)|f(x), \varphi(x)|g(x)\)</span>，由于 <span class="math inline">\(r(x) = f(x) - q(x)g(x)\)</span>，显然 <span class="math inline">\(\varphi(x)|r(x)\)</span>，即 <span class="math inline">\(\varphi(x)\)</span> 也是 <span class="math inline">\(r(x)\)</span> 的因式</li>
<li>若 <span class="math inline">\(\varphi(x)\)</span> 是 <span class="math inline">\(g(x), r(x)\)</span> 的公因式，即 <span class="math inline">\(\varphi(x)|g(x), \varphi(x)|r(x)\)</span>，由于 <span class="math inline">\(f(x) = q(x)g(x) + r(x)\)</span>，显然 <span class="math inline">\(\varphi(x)|f(x)\)</span>，即 <span class="math inline">\(\varphi(x)\)</span> 也是 <span class="math inline">\(f(x)\)</span> 的因式</li>
</ol>
<p>上面这个被除式、除式和余式的公因式关系是辗转相除法获取两个多项式最大公因式的理论基础，需要牢记。</p>
<h5 id="最大公因式的存在性以及辗转相除法">最大公因式的存在性以及辗转相除法</h5>
<p>对于 <span class="math inline">\(f(x), g(x) \in F[x]\)</span>，这两个多项式的最大公因式一定存在。下面进行最大公因式存在性的证明。</p>
<p>前面提到，被除式 <span class="math inline">\(f(x)\)</span> 和除式 <span class="math inline">\(g(x)\)</span> 的公因式全体与除式 <span class="math inline">\(g(x)\)</span> 和余式 <span class="math inline">\(r(x)\)</span> 的公因式全体是完全一致的，那么再用余式 <span class="math inline">\(r(x)\)</span> 去除原来的除式 <span class="math inline">\(g(x)\)</span>，如果无法整除的话又会产生新的余式 <span class="math inline">\(r_1(x)\)</span>，新的余式 <span class="math inline">\(r_1(x)\)</span> 和新的除式 <span class="math inline">\(r(x)\)</span> 的公因式全体和最原始的 <span class="math inline">\(f(x), g(x)\)</span> 的公因式全体仍然完全一致。这种关系可以概括为<em>公因式的传递关系</em>。</p>
<p>由于多项式带余除法一定会导致余式次数小于除式次数，那么经过有限次多项式带余除法后，一定能将余式的次数降至 <span class="math inline">\(-\infty\)</span>，也就是余式为0多项式。这意味着，在反复进行上述操作后，经过有限次迭代，一定能找到一组除式 <span class="math inline">\(r_{s-1}(x)\)</span> 和余式 <span class="math inline">\(r_s(x)\)</span>，满足 <span class="math inline">\(r_s(x)|r_{s-1}(x)\)</span>，此时 <span class="math inline">\(r_{s}(x)\)</span> 与 <span class="math inline">\(r_{s-1}(x)\)</span> 的最大公因式恰为 <span class="math inline">\(r_{s}(x)\)</span> 本身，那么根据公因式的传递关系，<span class="math inline">\(r_{s}(x)\)</span> 恰为最原始的被除式和除式，即 <span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 的最大公因式。上面这样的反复用余式去除除式，以获取原始被除式和除式的最大公因式的方法，称为<strong>辗转相除法</strong>。</p>
<p>不过需要注意，多项式的最大公因式不是唯一的，例如 <span class="math inline">\(d(x)\)</span> 是 <span class="math inline">\(f(x), g(x)\)</span> 的最大公因式，<span class="math inline">\(cd(x)\)</span> 也是 <span class="math inline">\(f(x), g(x)\)</span> 的最大公因式，其中 <span class="math inline">\(c\)</span> 是一个非零常数。不过一般来说，我们会用这一堆最大公因式中最高次系数为1的那个多项式作为典型的最大公因式，这个最大公因式记作 <span class="math inline">\(\displaystyle gcd(f(x), g(x))\)</span>。</p>
<p>多项式的辗转相除法和整数求最大公因数的辗转相除法在本质上是完全相同的。</p>
<h5 id="最大公因式的线性表示">最大公因式的线性表示</h5>
<p>两个多项式的最大公因式可以表示为这两个多项式的线性组合。若有 <span class="math inline">\(f(x), g(x), r_s(x) \in F[x]\)</span>，其中 <span class="math inline">\(r_s(x) = \displaystyle gcd(f(x), g(x))\)</span>，那么存在 <span class="math inline">\(u(x), v(x) \in F[x]\)</span>，使得</p>
<p><span class="math display">\[
r_s(x) = u(x)f(x) + v(x)g(x)
\]</span></p>
<p>上式成立的理由其实很简单。由 <span class="math inline">\(f(x) = q(x)g(x) + r(x)\)</span> 可以倒推 <span class="math inline">\(r(x) = f(x) - q(x)g(x)\)</span>，即余式可以表示为被除式和除式的线性组合。而根据辗转相除法，两个多项式的最大公因式实际上就是大量的被除式和除式的线性组合嵌套计算而来的，因此最大公因式可以通过一系列线性嵌套，最终表示为原始被除式和除式的线性组合。</p>
<h5 id="多项式互素">多项式互素</h5>
<p>若 <span class="math inline">\(f(x), g(x) \in F[x]\)</span> 满足 <span class="math inline">\(\displaystyle gcd(f(x), g(x)) = 1\)</span>，则称多项式 <span class="math inline">\(f(x)\)</span> 与 <span class="math inline">\(g(x)\)</span> 互素。</p>
<p>多项式互素的充要条件是存在 <span class="math inline">\(u(x), v(x) \in F[x]\)</span>，满足</p>
<p><span class="math display">\[
u(x)f(x) + v(x)g(x) = 1
\]</span></p>
<p>必要性可以直接从最大公因式的线性表示得到；至于充分性，假如 <span class="math inline">\(\varphi(x)\)</span> 是多项式 <span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 的最大公因式，且有上述线性组合等式成立，那么因为 <span class="math inline">\(\varphi(x)|f(x)\)</span> 且 <span class="math inline">\(\varphi(x)|g(x)\)</span>，所以显然 <span class="math inline">\(\varphi(x)|u(x)f(x) + v(x)g(x)\)</span>，即 <span class="math inline">\(\varphi(x)|1\)</span>，这意味着 <span class="math inline">\(\varphi(x)=1\)</span>，即 <span class="math inline">\(\displaystyle gcd(f(x), g(x)) = 1\)</span>，多项式 <span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 互素。</p>
<p>由多项式互素可以得到以下推论：</p>
<ol type="1">
<li>若 <span class="math inline">\(d_1(x), d_2(x)\)</span> 是多项式 <span class="math inline">\(f(x)\)</span> 的两个互素因式，那么 <span class="math inline">\(d_1(x)d_2(x)|f(x)\)</span></li>
<li>若多项式 <span class="math inline">\(f(x), g(x)\)</span> 互素，且 <span class="math inline">\(f(x)|g(x)h(x)\)</span>，那么 <span class="math inline">\(f(x)|h(x)\)</span></li>
</ol>
<h5 id="多个多项式的最大公因式求解">多个多项式的最大公因式求解</h5>
<p>多个多项式的最大公因式求解问题可以分解为其中一个多项式与其余多项式的最大公因式之间的最大公因式求解问题，也就是可以转换为最大公因式嵌套求解问题。例如，要求n个多项式的最大公因式，那么先取其中的两个多项式求最大公因式，然后用求出的最大公因式替换掉这两个多项式，使其变为n-1个多项式求最大公因式的问题，以此类推。</p>
<h4 id="最小公倍式">最小公倍式</h4>
<p>若有 <span class="math inline">\(f(x), g(x), m(x) \in F[x]\)</span>，满足 <span class="math inline">\(f(x)|m(x), g(x)|m(x)\)</span>，则称 <span class="math inline">\(m(x)\)</span> 是多项式 <span class="math inline">\(f(x), g(x)\)</span> 的一个公倍式(Common Multiple)。若对于这两个多项式的任意公倍式 <span class="math inline">\(m_i(x)\)</span>，都有 <span class="math inline">\(m(x)|m_i(x)\)</span>，则称 <span class="math inline">\(m(x)\)</span> 是 <span class="math inline">\(f(x), g(x)\)</span> 的最小公倍式(Least Common Multiple)。</p>
<h5 id="最小公倍式的计算">最小公倍式的计算</h5>
<p>最小公倍式的计算公式如下</p>
<p><span class="math display">\[
\frac{f(x)g(x)}{gcd(f(x), g(x))}
\]</span></p>
<p>证明过程比较巧妙。记 <span class="math inline">\(d(x) = gcd(f(x), g(x))\)</span>，并做 <span class="math inline">\(f_1(x) = \displaystyle \frac{f(x)}{d(x)}, g_1(x) = \frac{g(x)}{d(x)}\)</span>，显然 <span class="math inline">\(f_1(x)\)</span> 和 <span class="math inline">\(g_1(x)\)</span> 互素。此时有</p>
<p><span class="math display">\[
\frac{f(x)g(x)}{gcd(f(x), g(x))} = \frac{f(x)g(x)}{d(x)} = f_1(x)d(x)g_1(x)
\]</span></p>
<p>若记 <span class="math inline">\(m(x)\)</span> 为 <span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(g(x)\)</span> 的任一公倍式，那么需要证明 <span class="math inline">\(f_1(x)d(x)g_1(x)|m(x)\)</span>。</p>
<p>记 <span class="math inline">\(m(x) = f(x)p(x), m(x) = g(x)q(x)\)</span>，那么可以推出 <span class="math inline">\(\displaystyle \frac{m(x)}{d(x)} = f_1(x)p(x) = g_1(x)q(x)\)</span>，由于 <span class="math inline">\(f_1(x)|f_1(x)p(x)\)</span>，所以 <span class="math inline">\(f_1(x)|g_1(x)q(x)\)</span>。而 <span class="math inline">\(f_1(x)\)</span> 和 <span class="math inline">\(g_1(x)\)</span> 互素，因此 <span class="math inline">\(f_1(x)|q(x)\)</span>。</p>
<p>由于 <span class="math inline">\(g_1(x)d(x)|g_1(x)d(x)q(x)\)</span>，且 <span class="math inline">\(f_1(x)|q(x)\)</span>，因此 <span class="math inline">\(g_1(x)d(x)f_1(x)|g_1(x)d(x)q(x)\)</span>，即 <span class="math inline">\(g_1(x)d(x)f_1(x)|m(x)\)</span>，证毕。</p>
<p>和最大公因式一样，最小公倍式也不止一个。简单起见，将最高次系数为1的最小公倍数记为 <span class="math inline">\(lcm(f(x), g(x))\)</span>。</p>
<h2 id="插值多项式与中国剩余定理">插值多项式与中国剩余定理</h2>
<h3 id="lagrange插值多项式">Lagrange插值多项式</h3>
<p>在数值分析中，我们对插值多项式已经做过了比较详细的介绍，下面简单重复一下Lagrange插值多项式的定义。首先重新描述一下多项式插值问题：对于 <span class="math inline">\(x_i, y_i\)</span> 共 <span class="math inline">\(2k\)</span> 个数，找到插值多项式 <span class="math inline">\(f(x)\)</span>，使得 <span class="math inline">\(f(x_i) = y_i\)</span>。Lagrange插值多项式是一种插值多项式的表示方法，其表达式如下</p>
<p><span class="math display">\[
L(x) = \sum_{i=1}^k \frac{P_i(x)}{P_i(x_i)}y_i
\]</span></p>
<p>上述 <span class="math inline">\(P_i(x) = \displaystyle\sum_{j=1, j\neq i}^k (x-x_j)\)</span>。这个 <span class="math inline">\(P_i(x)\)</span> 的定义非常巧妙，假定 <span class="math inline">\(j \in [1, k]\)</span> 且 <span class="math inline">\(j \neq i\)</span>，那么</p>
<p><span class="math display">\[
P_i(x_j) = 0
\]</span></p>
<p>所以 <span class="math inline">\(L(x_i) = \displaystyle\frac{P_i(x_i)}{P_i(x_i)}y_i=y_i\)</span>。这样恰好能够满足所有的插值条件。</p>
<p>Lagrange插值多项式和余数定理有着非常紧密的关系。事实上，从余数定理的角度观察插值条件 <span class="math inline">\(f(x_i) = y_i\)</span>，可以发现 <span class="math inline">\(y_i\)</span> 实际上就是 <span class="math inline">\(f(x)\)</span> 被 <span class="math inline">\(x-x_i\)</span> 所除得到的余数。那么只需构造这样一个多项式，除了 <span class="math inline">\(y_i\)</span> 所在项以外，其他项中均含因式 <span class="math inline">\(x-x_i\)</span>；而 <span class="math inline">\(y_i\)</span> 所在项的系数在 <span class="math inline">\(x=x_i\)</span> 时恰好为1。Lagrange插值多项式完美地满足了上述条件。</p>
<h4 id="同余">同余</h4>
<p>若多项式 <span class="math inline">\(f_1(x), f_2(x)\)</span> 被 <span class="math inline">\(g(x)\)</span> 除有相同的余数，称 <span class="math inline">\(f_1(x), f_2(x)\)</span> 关于 <span class="math inline">\(g(x)\)</span> 同余，表示为 <span class="math inline">\(f_1(x) \equiv f_2(x) \ mod \ g(x)\)</span>。同余的充要条件是</p>
<p><span class="math display">\[
g(x)|(f_1(x) - f_2(x))
\]</span></p>
<p>同余可以推出其他的一些定理，但不过多赘述。</p>
<p>如果从同余的角度来看，由于常数多项式除一次多项式的余数就是这个常数多项式本身，所以可以认为Lagrange插值多项式满足这样的同余关系</p>
<p><span class="math display">\[
L(x) \equiv y_i \ mod\ x-x_i, i \in [1, k]
\]</span></p>
<p>即Lagrange插值多项式与多项式 <span class="math inline">\(y_i\)</span> 关于多项式 <span class="math inline">\(x-x_i\)</span> 同余。也就是说，对于这一类特殊的多项式，是能找到一个多项式，同时满足 <span class="math inline">\(k\)</span> 个同余条件的。那么更一般的，对于 <span class="math inline">\(g_i(x), r_i(x)\)</span> 共 <span class="math inline">\(2k\)</span> 个多项式，其中 <span class="math inline">\(g_i(x)\)</span> 的次数均大于1且两两互素，那么能够找到一个多项式 <span class="math inline">\(f(x)\)</span>，同时满足</p>
<p><span class="math display">\[
f(x) \equiv r_i(x) \ mod \ g_i(x), i \in [1, k]
\]</span></p>
<p>这样的关系呢？答案是肯定的。</p>
<h3 id="中国剩余定理">中国剩余定理</h3>
<p>中国剩余定理包括以下两部分内容</p>
<ol type="1">
<li>存在 <span class="math inline">\(f(x)\)</span> 满足 <span class="math inline">\(f(x) \equiv r_i(x) \ mod \ g_i(x), i \in [1, k]\)</span></li>
<li>若允许 <span class="math inline">\(deg f(x) &gt; deg\prod_{i=1}^kg_i(x)\)</span>，那么满足上述要求的 <span class="math inline">\(f(x)\)</span> 不唯一，而且如果 <span class="math inline">\(f_1(x)\)</span> 与 <span class="math inline">\(f_2(x)\)</span> 均满足上述要求且 <span class="math inline">\(f_1(x)\)</span> 的次数高于 <span class="math inline">\(f_2(x)\)</span>，那么有 <span class="math inline">\(f_1(x) \equiv f_2(x) \ mod \ \prod_{i=1}^kg_i(x)\)</span>；若要求 <span class="math inline">\(deg f(x) &lt; deg \prod_{i=1}^kg_i(x)\)</span>，则满足上述要求的 <span class="math inline">\(f(x)\)</span> 存在且唯一</li>
</ol>
<p>构造中国剩余定理对应的多项式与构造Lagrange插值多项式本质上是一样的。对于Lagrange插值多项式，注意到为了保证 <span class="math inline">\(L(x)\)</span> 除以 <span class="math inline">\(x-x_i\)</span> 的余式中有 <span class="math inline">\(y_i\)</span> 这一项， <span class="math inline">\(\displaystyle\frac{P_i(x)}{P_i(x_i)}\)</span> 与 <span class="math inline">\(x-x_i\)</span> 必须是互素的。同理，对于中国剩余定理多项式，假定其中第 <span class="math inline">\(i\)</span> 项元素为 <span class="math inline">\(Q_i(x)r_i(x)\)</span>，那么该项元素的系数 <span class="math inline">\(Q_i(x)\)</span> 也应该与 <span class="math inline">\(g_i(x)\)</span> 互素。为此，<span class="math inline">\(Q_i(x)\)</span> 中应当与Lagrange插值多项式的 <span class="math inline">\(\displaystyle \prod_{j=1, j\neq i}^kx-x_i\)</span> 类似的，含有 <span class="math inline">\(\displaystyle\prod_{j=1, j\neq i}^kg_j(x)\)</span> 元素。</p>
<p>所以，可以记</p>
<p><span class="math display">\[
q_i(x) = \prod_{j=1, j\neq i}^k g_j(x)
\]</span></p>
<p>由于中国剩余定理中限定了 <span class="math inline">\(g_i(x)\)</span> 之间必须两两互素，因此 <span class="math inline">\(q_i(x)\)</span> 与 <span class="math inline">\(g_i(x)\)</span> 也是互素的。那么，可以将其表示为 <span class="math inline">\(1\)</span> 的线性组合</p>
<p><span class="math display">\[
u(x)q_i(x) + v(x)g_i(x) = 1
\]</span></p>
<p>那么 <span class="math inline">\(u(x)q_i(x) = 1 - v(x)g_i(x) \equiv 1 \ mod \  g_i(x)\)</span>。令 <span class="math inline">\(Q_i(x) = u(x)q_i(x)\)</span>，可以得到</p>
<p><span class="math display">\[
f(x) = \sum_{i=1}^kQ_i(x)r_i(x)
\]</span></p>
<p>这里直接令 <span class="math inline">\(Q_i(x) = q_i(x)\)</span> 也可以得到符合要求的 <span class="math inline">\(f(x)\)</span>，令 <span class="math inline">\(Q_i(x) = u(x)q_i(x)\)</span> 的作用是为了说明 <span class="math inline">\(f(x)\)</span> 在不限定次数的情况下不唯一。</p>
<p>中国剩余定理的实质是，利用余式和除式条件，建立约束条件，求出满足约束条件的多项式。</p>
<h3 id="余式定理lagrange插值多项式和中国剩余定理的综合应用">余式定理、Lagrange插值多项式和中国剩余定理的综合应用</h3>
<p>下面的例子展示了如何综合应用余式定理、Lagrange插值多项式以及中国剩余定理，进行问题的求解。</p>
<p>例题：对于 <span class="math inline">\(f(x)=x^{20}\)</span>，求关于 <span class="math inline">\((x-2)(x-3)\)</span> 的余式。</p>
<p>首先，利用余式定理，可以得到</p>
<p><span class="math display">\[
\begin{cases}
    f(x) \equiv f(2) \ mod \ (x-2)\\
    f(x) \equiv f(3) \ mod \ (x-3)
\end{cases}
\]</span></p>
<p>即</p>
<p><span class="math display">\[
\begin{cases}
    f(x) \equiv 2^{20} \ mod \ (x-2)\\
    f(x) \equiv 3^{20} \ mod \ (x-3)
\end{cases}
\]</span></p>
<p>根据中国剩余定理，可以构造 <span class="math inline">\(\tilde f(x)\)</span>，满足</p>
<p><span class="math display">\[
f(x) \equiv \tilde f(x) \ mod \ (x-2)(x-3)
\]</span></p>
<p>记 <span class="math inline">\(g_1(x) = x-2, g_2(x) = x-3, r_1(x) = 2^{20}, r_2(x) = 3^{20}\)</span>，那么 <span class="math inline">\(q_1(x) = x-3, q_2(x) = x-2\)</span>。</p>
<p>由中国剩余定理和Lagrange插值多项式，<span class="math inline">\(\tilde f(x)\)</span> 构造如下</p>
<p><span class="math display">\[
\tilde f(x) = \sum_{i=1}^2 Q_i(x)r_i(x)=\frac{x-3}{2-3}2^{20}+\frac{x-2}{3-2}3^{20}= (3^{20}-2^{20})x+(3 \cdot 2^{20} - 2 \cdot 3^{20})
\]</span></p>
<p>这里应用Lagrange插值多项式主要是规避 <span class="math inline">\(u(x)q_i(x)+v(x)g_i(x)=1\)</span> 的计算。实际上也可以手动去计算，如下</p>
<p><span class="math display">\[
\begin{cases}
    u_1(x)q_1(x) + v_1(x)g_1(x) = 1\\
    u_2(x)q_2(x) + v_2(x)g_2(x) = 1
\end{cases}
\]</span></p>
<p>将 <span class="math inline">\(q_i(x), g_i(x)\)</span> 代入，有</p>
<p><span class="math display">\[
\begin{cases}
    u_1(x)(x-3)+v_1(x)(x-2)=1\\
    u_2(x)(x-2) + v_2(x)(x-3) = 1
\end{cases}
\]</span></p>
<p>可以得到一组解</p>
<p><span class="math display">\[
\begin{cases}
    u_1(x) = -1, \ v_1(x) = 1\\
    u_2(x)= 1, \ v_2(x) = -1
\end{cases}
\]</span></p>
<p>那么 <span class="math inline">\(Q_1(x) = u_1(x) q_1(x) = -(x-3), Q_2(x) = u_2(x)q_2(x) = x-2\)</span>，结果和上面用Lagrange插值多项式构造的结果是一致的。如果 <span class="math inline">\(r_i(x)\)</span> 不是常数项或 <span class="math inline">\(g_i(x)\)</span> 不是一次多项式，那么Lagrange插值多项式就无法使用了，必须按照上面的步骤来。</p>
<h2 id="因式分解与不可约多项式">因式分解与不可约多项式</h2>
<h3 id="不可约多项式">不可约多项式</h3>
<p>对于 <span class="math inline">\(F[x]\)</span> 上的非常值多项式 <span class="math inline">\(p(x)\)</span>，若其因式全体恰为平凡因式，那么称 <span class="math inline">\(p(x)\)</span> 是 <span class="math inline">\(F[x]\)</span> 上的<strong>不可约多项式</strong>；否则，<span class="math inline">\(p(x)\)</span> 是 <span class="math inline">\(F[x]\)</span> 上的可约多项式。</p>
<p>按照定义，一次多项式均为不可约多项式。注意，多项式是否可约与其数域有密切联系，例如 <span class="math inline">\(x^2+1\)</span> 在实数域上是不可约多项式，在复数域上就是可约多项式了。</p>
<p>不可约多项式在多项式中的地位就类似于素数在整数中的地位，也具有一系列特殊性质。</p>
<h4 id="不可约多项式的性质">不可约多项式的性质</h4>
<ol type="1">
<li>不可约多项式 <span class="math inline">\(p(x)\)</span> 和数域中任一多项式 <span class="math inline">\(f(x)\)</span> 只可能存在两种关系，要么 <span class="math inline">\(p(x)\)</span> 是 <span class="math inline">\(f(x)\)</span> 的因式，要么 <span class="math inline">\(p(x)\)</span> 和 <span class="math inline">\(f(x)\)</span> 互素</li>
<li>若不可约多项式 <span class="math inline">\(p(x)\)</span> 和多项式 <span class="math inline">\(f(x), g(x)\)</span> 之间满足 <span class="math inline">\(p(x)|f(x)g(x)\)</span>，那么有 <span class="math inline">\(p(x)|f(x)\)</span> 或 <span class="math inline">\(p(x)|g(x)\)</span> 之中至少一项成立</li>
<li>若不可约多项式 <span class="math inline">\(p(x)\)</span> 和 <span class="math inline">\(n\)</span> 个多项式 <span class="math inline">\(f_i(x)\)</span> 之间满足 <span class="math inline">\(p(x)|\prod_if_i(x)\)</span>，则至少有 <span class="math inline">\(p(x)|f_i(x)\)</span> 之中的一项成立</li>
</ol>
<h4 id="不可约多项式的判定条件">不可约多项式的判定条件</h4>
<p>在复数域上，一个多项式不可约的充要条件是该多项式为一次多项式，这可以由<strong>代数学基本定理</strong>推得：任意一个n次复数多项式恰有n个根。</p>
<p>在实数域上，情况会稍微复杂一些，一个多项式不可约的充要条件是满足以下两个条件的其中一个：</p>
<ol type="1">
<li>多项式为一次实数多项式</li>
<li>多项式是无实根的二次实数多项式</li>
</ol>
<h3 id="因式分解的唯一性">因式分解的唯一性</h3>
<p>对于任一 <span class="math inline">\(f(x) \in F[x]\)</span>，都可以分解为有限个不可约多项式的乘积，而且这个分解在不考虑非0常数多项式因子的时候是唯一的。可以将所有不可约多项式因式的最高次项系数提取出来，然后将相同的不可约因式用幂次表示，可以将数域上的任一多项式表示为</p>
<p><span class="math display">\[
f(x) = a\prod_i p_i^{\alpha_i}(x)
\]</span></p>
<p>这样的表达式称为多项式 <span class="math inline">\(f(x)\)</span> 在数域 <span class="math inline">\(F[x]\)</span> 上的<strong>标准分解式</strong>。显然，如果两个多项式的标准分解式已知，那么很容易直接写出这两个多项式的最大公因式。</p>
<h4 id="复数多项式的因式分解定理">复数多项式的因式分解定理</h4>
<p>根据复数多项式因式分解的充要条件，任一复数多项式可以分解为以下形式</p>
<p><span class="math display">\[
f(x) = a\prod_i (x-r_i)^{\alpha_i}
\]</span></p>
<h4 id="实数多项式的因式分解定理">实数多项式的因式分解定理</h4>
<p>实数多项式的因式分解和复数多项式是类似的，区别在于实数多项式还可能分解出无实根的二次多项式因式</p>
<p><span class="math display">\[
f(x) = a \prod_i (x-r_i)^{\alpha_i} \prod_j (x^2 + q_jx+p_j)^{\alpha_j}
\]</span></p>
<h3 id="因式分解是困难的">因式分解是困难的</h3>
<p>因式分解定理只是证明了多项式可以分解为标准分解式，但是并没有给出具体的分解方法。事实上，高次实数、复数多项式基本上是无法进行分解的。但至少，实数、复数多项式是否可约是很好判断的，而对于有理数多项式而言，判断可约也是困难的。</p>
<h3 id="eisenstein判别法">Eisenstein判别法</h3>
<p>Eisenstein给出了一种对于有理数多项式的充分但不一定是必要的判别方法。假如一个有理数多项式能够通过提取系数，表示为一个有理数与一个整数多项式之积，那么如果存在一个素数，满足</p>
<ol type="1">
<li>该素数无法整除整数多项式最高次项系数，且该素数的平方无法整数整数多项式常数项次数</li>
<li>该素数可以整除除了整数多项式最高次项和常数项系数以外的所有项系数</li>
</ol>
<p>那么原有理数多项式就是可约的。</p>
<h2 id="多项式的导数">多项式的导数</h2>
<p>多项式的求导很容易，下面主要讨论多项式导数的两个重要用途。</p>
<h3 id="判断多项式是否有重根">判断多项式是否有重根</h3>
<p>通过判断多项式与其导数多项式是否互素，可以判断多项式是否在复数域上有重根。多项式 <span class="math inline">\(f(x)\)</span> 在复数域上没有重根的充要条件是 <span class="math inline">\(gcd(f(x), f&#39;(x)) = 1\)</span>，即 <span class="math inline">\(f(x)\)</span> 与 <span class="math inline">\(f&#39;(x)\)</span> 互素。</p>
<h3 id="计算多项式关于高次因子的余式">计算多项式关于高次因子的余式</h3>
<p>首先，对于一个连续函数，我们知道可以用泰勒公式对其进行无穷级数展开</p>
<p><span class="math display">\[
f(x) = \sum_{i=1}^{\infty}\frac{f^{(i)}(x_0)}{i!}(x-x_0)^{i}
\]</span></p>
<p>对于一个 <span class="math inline">\(n\)</span> 次多项式来说，可以用截止第 <span class="math inline">\(n\)</span> 项的泰勒级数来表示</p>
<p><span class="math display">\[
f_n(x) = \sum_{i=1}^n\frac{f_n^{(i)}(x_0)}{i!}(x-x_0)^i
\]</span></p>
<p>根据这个级数展开，很容易得到</p>
<p><span class="math display">\[
f_n(x) \equiv \sum_{i=1}^{m-1}\frac{f_n^{(i)}(x_0)}{i!}(x-x_0)^i \ mod \ (x-x_0)^m
\]</span></p>
<h2 id="零化多项式">零化多项式</h2>
<p>下面用一个例子来引出零化多项式。</p>
<p>假如我们想要求出 <span class="math inline">\(f(x) = 2x^3 - x^2 - 5x + 4\)</span> 在 <span class="math inline">\(x=\sqrt{2}+1\)</span> 时的值，可以通过代入 <span class="math inline">\(x\)</span> 的值的方式进行求解，但是当多项式次数很高时，计算量非常大。由于已知 <span class="math inline">\(x=\sqrt{2}+1\)</span>，那么有 <span class="math inline">\((x-1)^2=2\)</span>，即 <span class="math inline">\(x^2 -2x-1=0\)</span>。那么我们可以用 <span class="math inline">\(x^2 -2x-1=0\)</span> 去除 <span class="math inline">\(f(x)\)</span>，然后得到一个次数较低的余式，将 <span class="math inline">\(x=\sqrt{2}+1\)</span> 代入这个次数较低的余式，得到的结果和直接代入原多项式是一致的，因为因式 <span class="math inline">\(x^2-2x-1\)</span> 一定等于0，从而实现计算量的降低。</p>
<p>在代数上，如果常数 <span class="math inline">\(c\)</span> 是某一多项式的根，那么称 <span class="math inline">\(f(x)\)</span> 为 <span class="math inline">\(c\)</span> 的一个<strong>零化多项式</strong>。注意，不是所有常数都存在零化多项式的，有零化多项式的常数称为<strong>代数数</strong>，没有零化多项式的常数称为<strong>超越数</strong>，例如 <span class="math inline">\(e, \pi\)</span> 等。</p>
<p>关于零化多项式，还有一个定理：某个常数 <span class="math inline">\(c\)</span> 的两个零化多项式的最大公因式也是 <span class="math inline">\(c\)</span> 的零化多项式。另外，一个常数 <span class="math inline">\(c\)</span> 如果有零化多项式，那么这个零化多项式中一定存在一类次数最小的多项式，称为常数 <span class="math inline">\(c\)</span> 的<strong>最小多项式</strong>。</p>
]]></content>
      <categories>
        <category>University</category>
      </categories>
      <tags>
        <tag>Mathematics</tag>
        <tag>Matrix Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust入门-所有权系统</title>
    <url>/2022/11/08/Rust%E5%85%A5%E9%97%A8-%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>什么是所有权？</p>
<p>所有权机制是Rust保证内存安全的一个重要机制。形如Java和C#的编程语言通过垃圾回收(Garbage collector, GC)机制进行内存管理，程序员在编程时无需关心变量在内存中的位置，也无需关心内存的占用与释放，所有的内存都由一个Runtime来管理，因此程序的性能会受到一定的影响，内存占用也比较多；形如C和C++的编程语言要求开发者自行进行内存的申请与释放，其哲学是充分信任程序员的内存管理能力，但经验不足的程序员很容易在编程时遇到内存安全问题；Rust则是另类，通过所有权机制对内存进行管理，由编译器在编译时找出可能存在的内存安全问题。</p>
<p>本笔记将整理Rust中的所有权概念。</p>
<span id="more"></span>
<h2 id="栈stack和堆heap">栈(stack)和堆(heap)</h2>
<p>栈和堆是内存中的两片区域。对于Rust来说，变量的值存储在栈还是堆上与所有权机制是挂钩的，为了更好地理解所有权机制，在这里要强调一下栈和堆这两个不同的概念。</p>
<h3 id="栈">栈</h3>
<p>栈是一个后进先出(LIFO)的结构，就像叠盘子一样，我们总是往一堆盘子的最上方加叠盘子，取的时候也总是从最上方取盘子。这个特性决定了栈是一个紧凑、有序的结构，数据按顺序进栈(push into)，也按顺序出栈(pop off)；在栈中数据总是紧密相邻，数据之间不会出现空位，因此只有数据长度已知的数据才能入栈。</p>
<h3 id="堆">堆</h3>
<p>堆是一个无序、稀疏的结构，就像在一片沙滩上堆沙子一样，我们可以在这里堆一座城堡，在那里堆一个土包，城堡和土包之间可能相隔很远。一般来说，当一个数据的长度未知时，我们会将这个数据存到堆的一个比较稀疏的位置，以便数据扩张，这个过程叫做在堆上给数据分配(allocate)内存空间。分配完内存之后，Rust会返回指向这段数据起始位置的指针，并将这段内存标记为已使用。</p>
<h3 id="栈和堆之间的速度差异">栈和堆之间的速度差异</h3>
<p>数据入栈的速度明显快于在堆上分配内存，因为数据入栈时只要往栈顶上放就可以了，而在堆上分配内存要先在内存中找到一片大小足够的空间，然后才能把这些数据存进去，存完了还得将这一片内存标记为已使用，工作量明显大很多。</p>
<p>从栈中读数据的速度也要比从堆上读数据更快，因为在堆上读数据必须要通过指针，而现代处理器在内存中跳转越多读取速度越慢。</p>
<h3 id="所有权系统的工作">所有权系统的工作</h3>
<p>所有权系统会跟踪哪部分代码正在使用堆上的哪些数据，最大程度上减少堆中的重复数据，并且会清理堆中不再使用的数据。所以总体来说，所有权系统主要任务就是进行堆的管理。</p>
<h2 id="所有权系统">所有权系统</h2>
<h3 id="所有权规则">所有权规则</h3>
<ol type="1">
<li>内存中的每一个值都有一个对应的 <code>Owner</code> 变量</li>
<li>内存中的每一个值在同一时刻只能有一个 <code>Owner</code></li>
<li>当 <code>Owner</code> 离开对应的变量作用域，这个值将从内存中被丢弃</li>
</ol>
<p>变量作用域的概念在函数部分简单说明过，这里不再赘述。</p>
<h3 id="演示所有权规则">演示所有权规则</h3>
<p>在变量数据类型中，基本的标量类型和复合类型变量在完成定义后，其数据长度总是已知的，因此总是被存入栈中。这些变量在离开作用域以后，其对应的值会从栈中被移除。所以这些基本的数据类型不会涉及到堆的管理。</p>
<p>下面介绍一种更加复杂的数据类型，来演示一下Rust的所有权规则。</p>
<h4 id="string-变量"><code>String</code> 变量</h4>
<p>Rust中提供了一种非常易懂的字符串字面值机制，即直接通过硬编码定义一串字符串，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>这个字符串字面值是不可变的。如果我们想要创建一个长度可变的字符串变量要怎么操作呢？Rust为此定义了 <code>String</code> 类型的字符串变量。可以使用 <code>String::from()</code> 方法从字符串字面值创建一个 <code>String</code> 变量，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>如果我们将其定义为一个可变变量，那么可以使用 <code>String</code> 的 <code>push_str()</code> 方法进行追加字符串，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;, world!&quot;</span>);</span><br></pre></td></tr></table></figure>
<h4 id="string-类型的内存分配"><code>String</code> 类型的内存分配</h4>
<p>由于 <code>String</code> 类型可变变量的长度是可增长的，因此它们的值不能存在栈中，只能存到堆里面。这意味着 <code>String</code> 类型变量的内存是在运行时分配的，而且在 <code>String</code> 类型的变量使用完毕以后，这部分内存需要被回收。</p>
<p>运行时分配内存由形如 <code>String::from()</code> 等变量构造的方法进行实现，这种构造变量的方法在其他的编程语言中非常常见；比较棘手的是如何去回收变量在堆中占据的内存。在形如C这种可以直接操作内存的语言中，程序员需要手动为前面 <code>allocate</code> 的内存进行 <code>free</code> 操作，并且这个对应关系必须梳理清楚，否则代码将会出现异常的行为；Rust提供了另一种策略，即内存会在其绑定的变量离开作用域之后自动释放，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行到这里的时候 s 对应的内存已经被释放了</span></span><br></pre></td></tr></table></figure>
<p>这是一种很自然的做法，对于程序员也是如此：变量在它应该起作用的地方起作用，在它不应该起作用的地方失效。在变量离开作用域的时候，Rust会隐式地对这个变量调用用于释放内存的 <code>drop</code> 函数。</p>
<h4 id="string-类型变量在内存中的移动"><code>String</code> 类型变量在内存中的移动</h4>
<p>下面来考虑另外一个问题。对于普通的标量类型变量，如果我们要创建一份变量的拷贝，那么只需要将一个变量的值赋值给另一个变量即可，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x;</span><br></pre></td></tr></table></figure>
<p>这是很自然的做法。上面的操作在内存中的行为也很容易理解，其实就是在栈中存入了两个 <code>i32</code> 类型的整型变量。但是，<code>String</code> 类型的变量如果这样操作的话，在内存中的行为就有明显区别了。前面提到，这个 <code>String</code> 类型的变量是变长的变量，因此其值只能存入堆中，然后将指针等描述信息存入栈中。实际上一个 <code>String</code> 变量对应了三个栈中的变量</p>
<ul>
<li>指针</li>
<li>长度</li>
<li>容量</li>
</ul>
<p>其中，长度指的是当前这个 <code>String</code> 变量在堆中占据了多少字节的内存；容量这个概念暂时不重要，可以先不去管它。<code>String</code> 变量真正的字符串值被存储在内存的堆中，由栈中的指针指示内存地址。</p>
<p><img src="/2022/11/08/Rust%E5%85%A5%E9%97%A8-%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9F//trpl04-01.svg" width="50%" height="50%" align="center" alt="String变量在内存中的存储"></p>
<p>所以，将一个 <code>String</code> 变量的值拷贝给另外一个 <code>String</code> 变量，并不像标量类型那么简单，对于下面的代码</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x;</span><br></pre></td></tr></table></figure>
<p>在内存中实际上的操作是，CPU复制了 <code>x</code> 在栈中的指针、长度和容量，然后将这些值绑定给变量 <code>y</code>，对于堆中的内容则不动。也就是说，变量 <code>x</code> 和 <code>y</code> 会指向相同的堆地址，这种拷贝方式很像是其他编程语言中的<strong>浅拷贝</strong>（但Rust中的操作与其他语言不完全相同，因此并非浅拷贝，<em>需要注意以下叙述中所有被称为浅拷贝的行为都不是在Rust中发生的行为</em>）。</p>
<p><img src="/2022/11/08/Rust%E5%85%A5%E9%97%A8-%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9F//trpl04-02.svg" width="50%" height="50%" align="center" alt="String变量在内存中的拷贝"></p>
<p>浅拷贝在拷贝的时候，只拷贝了栈上存储的类似于Metadata的部分，对于真正存储在堆上的Data部分是不会拷贝的，所以浅拷贝的速度非常快。但浅拷贝存在一个问题，这个问题出现在内存释放的时候。浅拷贝之后，程序的内存栈中出现了两个指向内存中同一堆地址的指针，假如在释放内存的时候，我们只释放了变量 <code>y</code> 的内存，那么操作系统会回收对应堆的内存，但是栈中仍然存在一个指向那个堆地址的指针信息在 <code>x</code> 中。这将会导致一个严重的内存安全漏洞，因此在第一次释放内存以后，操作系统以为它已经收回了访问这一段内存堆地址的访问权限，但实际上栈中还有一个 <code>x</code> 的指针可以访问这段内存。</p>
<p>为了形象地说明上面这个问题的严重性，下面以租房为例。<code>let x = String::from("hello");</code> 就相当于房东将它的一间房子出租给了变量 <code>x</code>，然后把钥匙（指向内存堆地址的指针）给了它；过段时间 <code>x</code> 跟房东说它不租了，要转租给 <code>y</code>，但偷偷留了一把钥匙，但房东以为只有 <code>y</code> 有钥匙；等 <code>y</code> 退租了以后，房东收回了 <code>y</code> 的那把钥匙，却不知道 <code>x</code> 那里还有一把钥匙。假如 <code>x</code> 在某个时刻突然想起来自己这里还有一把钥匙，要把它还给房东，而恰好房东在这之前已经将房子租给了 <code>z</code>，那么这就会导致 <code>z</code> 因为 <code>x</code> 交还了钥匙而被房东赶了出去。如果你是 <code>z</code> 你崩不崩溃？反正程序是会崩溃的。</p>
<p>上面的这个问题被称为<strong>二次释放(double free)</strong>。事实上，恶意人员拿到一个指向堆中内存地址的指针可能并不能拿来偷取内存中的数据，因为堆中的数据是一般是无序的，除非刚好在这个地址附近有什么机密数据；主要的问题在于，操作系统栈中还有一个指针指向这片内存，假如恰好这片内存在第一次释放之后，又分配给了其他的变量，那么再次释放指针将会破坏其他变量的数据结构，很可能导致程序崩溃。事实上，在C语言中，如果程序员申请了一段堆中的内存，经过一些操作以后释放了这些内存，但没有把指针置为 <code>NULL</code>，而是再次调用释放内存的API进行了一次内存的释放，那么程序将会马上崩溃。</p>
<p>所有权机制为二次释放问题提供了解决方案。假如我们定义了一个 <code>String</code> 类型变量 <code>x</code>，然后将其栈中的值拷贝至 <code>y</code> 的栈上，那么 <code>x</code> 马上就会被弃用，因为我们前面提到——一个内存中的值在同一时刻只能存在一个 <code>Owner</code> ——当 <code>x</code> 在栈中的值被拷贝至 <code>y</code> 的栈上以后，堆中那些值的 <code>Owner</code> 马上由 <code>x</code> 转为 <code>y</code>；而一旦 <code>x</code> 不是任何内存中值的 <code>Owner</code> 以后，这个变量就不再能够访问，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(x);</span><br></pre></td></tr></table></figure>
<p>这段代码将无法通过编译，因为Rust编译器认为 <code>x</code> 是一个无效的引用。</p>
<p>前面我们说，只拷贝栈上Metadata而不拷贝堆上Data的拷贝，一般可以称为<strong>浅拷贝(shallow copy)</strong>。需要注意的是，这与Rust中的行为并不完全相同，因为浅拷贝不会影响原来变量的那些Metadata，而在Rust中原来的变量直接变为不可引用，所以在Rust中与其称其为拷贝，不如直接称其为<strong>移动(move)</strong>，就像将一个文件从一个位置移动到另一个位置之后，原来那个位置就不再能访问这个文件了。</p>
<p><img src="/2022/11/08/Rust%E5%85%A5%E9%97%A8-%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9F//trpl04-04.svg" width="50%" height="50%" align="center" alt="String类型变量移动后原变量被弃用"></p>
<h4 id="string-类型变量的深拷贝"><code>String</code> 类型变量的深拷贝</h4>
<p>有时候我们确实是需要将一个 <code>String</code> 类型变量栈中的值和堆中的值都进行一次拷贝，那么Rust也提供了一种称为 <code>clone</code> 的方法，如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x.<span class="title function_ invoke__">clone</span>();</span><br></pre></td></tr></table></figure>
<p>上面这段代码在内存中的行为就是完全拷贝了 <code>x</code> 变量在栈中的值和在堆中的值到 <code>y</code> 变量上，图示如下</p>
<p><img src="/2022/11/08/Rust%E5%85%A5%E9%97%A8-%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9F//trpl04-03.svg" width="50%" height="50%" align="center" alt="String类型变量的克隆"></p>
<h3 id="函数与所有权">函数与所有权</h3>
<p>对于向函数传参这种情况，其实也涉及到变量的复制和移动的问题。如果是一个 <code>String</code> 要传入函数中，那么在传参的过程中将会出现 <code>String</code> 变量的移动，即函数外部的 <code>String</code> 变量由于传入了函数，导致在内存中发生了移动，最后的结果是</p>
<ul>
<li>原来的那个变量在传入函数之后不再能引用</li>
<li>这一段内存在函数执行结束之后将会自动被释放，除非函数返回了这个变量</li>
</ul>
<p>例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 s 传入 take_ownership() 函数后，s 将会被移动到函数的作用域中去</span></span><br><span class="line">    <span class="title function_ invoke__">take_ownership</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从这里开始 s 已经不再能访问了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">take_ownership</span>(s: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>值得注意的是，如果是变量的值仅存储在栈上，那么不会遇到上面这种问题，变量传入函数时Rust将会自动在栈上复制一份数据传到函数里，而不是将原来的变量移动到函数里。</p>
<p>对于前者，我们经常会碰到这样一种情况：我先拿到了一串数据，然后传入函数得到另一串数据，最后我希望比较传入函数的这串数据和函数计算得到的另一串数据的差异。这个时候，Rust的实现就有点复杂了，似乎只能让这个函数将传入的数据和计算结果一起使用元组返回才能满足我们的需求。这无疑是非常尴尬的设计，每次调个函数还得把数据传进去再传出来，太麻烦了。万幸的是，Rust在调用函数的时候，提供了一种引用机制，能够省去上面说的这些麻烦。</p>
<h2 id="引用与借用">引用与借用</h2>
<p>Rust中允许通过 <code>&amp;</code> 符号创建一个指向某个变量的引用(reference)，而这个创建引用的过程称为借用(borrowing)。引用可以理解为一个变量的快捷方式，不拥有对内存的所有权，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">length</span> = <span class="title function_ invoke__">get_length</span>(&amp;s);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">get_length</span>(s_ref: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">    s_ref.<span class="title function_ invoke__">len</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这段代码定义了一个 <code>String</code> 类型变量 <code>s</code>，然后创建了一个 <code>s</code> 的引用 <code>&amp;s</code> 并传入 <code>get_length()</code> 函数。注意这个函数的签名就是 <code>String</code> 的引用类型 <code>&amp;String</code>。<code>get_length()</code> 函数返回 <code>&amp;s</code> 这个引用指向的 <code>String</code> 变量长度，并返回给到 <code>length</code> 变量，最后 <code>println!(s)</code> 仍然能够输出 <code>s</code> 的值。这说明，将引用传入一个函数，并不会影响引用的那个变量本身。</p>
<p>需要注意的是，不可变变量的引用被称为不可变引用，这是只读的，任何尝试通过不可变引用来改变原变量值的行为都无法通过编译。</p>
<h3 id="创建可变引用">创建可变引用</h3>
<p>如果我们真的需要改变引用变量的值，那么</p>
<ol type="1">
<li>确保原变量是可变变量</li>
<li>使用可变引用</li>
</ol>
<p>例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">change</span>(&amp;<span class="keyword">mut</span> s);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">change</span>(s: &amp;<span class="keyword">mut</span> <span class="type">String</span>) &#123;</span><br><span class="line">    s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;，世界！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于同一个变量，同一时刻允许存在多个不可变引用，但只允许存在一个可变引用，而且不允许同时存在可变引用和不可变引用。这个限制主要是为了在编译时就避免数据竞争(data race)情况的出现。</p>
<h3 id="引用作用域">引用作用域</h3>
<p>一个变量引用的作用域从创建开始，一直持续到最后一次使用结束。例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s_ref</span>: &amp;<span class="type">String</span> = &amp;s;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s_ref);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s_mut_ref</span>: &amp;<span class="type">String</span> = &amp;s;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s_mut_ref);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于最后一次使用 <code>s_ref</code> 在定义 <code>s_mut_ref</code> 之前，所以可变引用 <code>s_ref</code> 和不可变引用 <code>s_mut_ref</code> 的作用域错开了，因此这不会与可变引用和不可变引用无法共存的规则相冲突。</p>
<h3 id="悬垂引用">悬垂引用</h3>
<p>悬垂引用(dangling reference)在一些支持指针的语言中是可能出现的，这个错误来源于释放了堆中的内存，但是栈中的指针没有随之释放掉。其实这和二次释放是类似的问题，只不过悬垂引用不会引发和二次释放一样的严重错误。Rust通过编译器进行悬垂引用的检查，形如下面的代码是无法通过编译的</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span>: &amp;<span class="type">String</span> = <span class="title function_ invoke__">dangle</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">dangle</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &amp;s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码试图通过从函数返回一个引用来创建悬垂引用，因为 <code>dangle()</code> 函数完成以后 <code>s</code> 离开了作用域，<code>s</code> 的内存会被释放掉；如果这样成功返回了 <code>s</code> 的指针，那么确实会出现悬垂引用，不过Rust编译器能够检查到这个错误，并阻止编译通过。所以，Rust中是不会在运行时出现悬垂引用的。</p>
<h2 id="slice切片">slice切片</h2>
<h3 id="字符串切片">字符串切片</h3>
<p>有时候我们可能想取一个 <code>String</code> 变量中的一部分，或者说某一个字符串的子串。Rust提供了字符串slice的方式，进行字符串子串提取。不过需要注意，字符串slice同样是一种引用，不拥有对应内存的所有权，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">sub_string</span> = &amp;s[..<span class="number">7</span>];</span><br></pre></td></tr></table></figure>
<p>这个 <code>&amp;s[..7]</code> 表示引用 <code>s</code> 的第0至第6个字符，形成一个字符串slice引用。这里由于从 <code>0</code> 开始引用，因此可以不写开头的索引，如果要引用第1至第6字符，则要写 <code>&amp;s[1..7]</code>，注意Rust中的区间永远是左闭右开的；如果我们要一直引用到末尾，则可以不写右边的索引，例如 <code>&amp;s[1..]</code>。</p>
<p>我们在写函数签名的时候，可能会需要注明字符串slice的数据类型，这里记一下字符串slice的数据类型为 <code>&amp;str</code>。实际上，字符串字面值(string literal)的数据类型就是 <code>&amp;str</code>！</p>
<p>另外，字符串的slice还能继续被切片，其语法和对字符串进行切片是一致的。</p>
<h3 id="数组切片">数组切片</h3>
<p>不只是字符串能够被切片，数组也是可以切片的，例如</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">a_slice</span> = &amp;a[..<span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<p>那么 <code>a_slice</code> 就会对应 <code>[1, 2, 3]</code>。这里强调一下，数组的切片数据类型形如 <code>&amp;[i32]</code>，这里原数组内的元素是 <code>i32</code> 类型的整型；如果是一个 <code>f64</code> 数组，那么其数组切片数据类型就是 <code>&amp;[f64]</code>。</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Programming Language</tag>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵分析笔记-矩阵的Jordan标准形</title>
    <url>/2022/12/01/%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E7%9F%A9%E9%98%B5%E7%9A%84Jordan%E6%A0%87%E5%87%86%E5%BD%A2/</url>
    <content><![CDATA[<h2 id="lambda-矩阵"><span class="math inline">\(\lambda\)</span> 矩阵</h2>
<h3 id="什么是-lambda-矩阵">什么是 <span class="math inline">\(\lambda\)</span> 矩阵</h3>
<p><span class="math inline">\(\lambda\)</span> 矩阵就是以 <span class="math inline">\(\lambda\)</span> 多项式为元素的矩阵，例如 <span class="math inline">\(\lambda E - A\)</span>。<span class="math inline">\(\lambda\)</span> 矩阵的符号是 <span class="math inline">\(A(\lambda)\)</span>。为了更好地与普通矩阵进行区分，我们将普通矩阵称为<strong>数值矩阵</strong>，将含 <span class="math inline">\(\lambda\)</span> 多项式的矩阵称为 <strong><span class="math inline">\(\lambda\)</span> 矩阵</strong>。</p>
<span id="more"></span>
<h3 id="lambda-矩阵的基本性质"><span class="math inline">\(\lambda\)</span> 矩阵的基本性质</h3>
<h4 id="lambda-矩阵的次数"><span class="math inline">\(\lambda\)</span> 矩阵的次数</h4>
<p><span class="math inline">\(\lambda\)</span> 矩阵的次数由元素中次数最高的 <span class="math inline">\(\lambda\)</span> 多项式决定。因此，一个 <span class="math inline">\(n\)</span> 阶 <span class="math inline">\(\lambda\)</span> 矩阵也可以写成 <span class="math inline">\(\lambda\)</span> 多项式的形式，只不过这个多项式的每一项系数都是 <span class="math inline">\(n\)</span> 阶数值矩阵。</p>
<h4 id="lambda-矩阵的秩"><span class="math inline">\(\lambda\)</span> 矩阵的秩</h4>
<p><span class="math inline">\(\lambda\)</span> 矩阵的秩由其非0多项式子式的最高次数决定，用 <span class="math inline">\(rank A(\lambda)\)</span> 标记。例如对于任一数值方阵 <span class="math inline">\(A\)</span>，其特征多项式为 <span class="math inline">\(|\lambda E -A|\)</span>，此时不论 <span class="math inline">\(A\)</span> 是否满秩，<span class="math inline">\(\lambda\)</span> 矩阵 <span class="math inline">\(\lambda E -A\)</span> 总是满秩的。</p>
<h4 id="lambda-矩阵的逆矩阵"><span class="math inline">\(\lambda\)</span> 矩阵的逆矩阵</h4>
<p>对于 <span class="math inline">\(A(\lambda)\)</span>，若有 <span class="math inline">\(B(\lambda)\)</span> 满足 <span class="math inline">\(A(\lambda)B(\lambda)=E\)</span>，那么称 <span class="math inline">\(B(\lambda)\)</span> 是 <span class="math inline">\(A(\lambda)\)</span> 的逆矩阵，标记为 <span class="math inline">\(A(\lambda)^{-1}\)</span>。显然，任一 <span class="math inline">\(\lambda\)</span> 矩阵对应的逆矩阵都是唯一的。</p>
<p><span class="math inline">\(A(\lambda)\)</span> 可逆的充要条件是 <span class="math inline">\(|A(\lambda)|\)</span> 为零次多项式，即非零常数。这很容易理解，因为从逆矩阵的定义出发，假如 <span class="math inline">\(A(\lambda)\)</span> 可逆，那么应有</p>
<p><span class="math display">\[
A(\lambda)^{-1} = \frac{1}{|A(\lambda)|} A^*(\lambda)
\]</span></p>
<p>若 <span class="math inline">\(\displaystyle \frac{1}{|A(\lambda)|}\)</span> 非常数，而是一个 <span class="math inline">\(\lambda\)</span> 多项式，那么 <span class="math inline">\(A(\lambda)^{-1}\)</span> 将不是 <span class="math inline">\(\lambda\)</span> 矩阵。这是因为多项式除法不能保证除尽。</p>
<h4 id="lambda-矩阵的初等变换"><span class="math inline">\(\lambda\)</span> 矩阵的初等变换</h4>
<p><span class="math inline">\(\lambda\)</span> 矩阵和数值矩阵一样，同样有三类初等变换，甚至前两类变换是一模一样的，即交换行（列）或某一行（列）元素同乘一个非0常数。但 <span class="math inline">\(\lambda\)</span> 矩阵的第三类初等变换略有不同，允许 <span class="math inline">\(\lambda\)</span> 矩阵的某一行（列）乘上一个 <span class="math inline">\(\lambda\)</span> 多项式后，加到另一行（列）上去。</p>
<p>和数值矩阵一样，<span class="math inline">\(\lambda\)</span> 矩阵的初等变换也可以抽象为初等 <span class="math inline">\(\lambda\)</span> 矩阵。</p>
<h3 id="lambda-矩阵的等价关系"><span class="math inline">\(\lambda\)</span> 矩阵的等价关系</h3>
<p>如果一个 <span class="math inline">\(\lambda\)</span> 矩阵 <span class="math inline">\(A(\lambda)\)</span> 能通过有限次初等变换，转换为 <span class="math inline">\(B(\lambda)\)</span>，则称 <span class="math inline">\(A(\lambda) \rightarrow B(\lambda)\)</span>，即 <span class="math inline">\(A(\lambda)\)</span> 与 <span class="math inline">\(B(\lambda)\)</span> 等价。</p>
<p>若 <span class="math inline">\(A(\lambda)\)</span> 和 <span class="math inline">\(B(\lambda)\)</span> 均为 <span class="math inline">\(m\times n\)</span> 阶矩阵，那么 <span class="math inline">\(A(\lambda) \rightarrow B(\lambda)\)</span> 的充要条件是，存在 <span class="math inline">\(m\)</span> 阶可逆 <span class="math inline">\(\lambda\)</span> 矩阵 <span class="math inline">\(P(\lambda)\)</span> 和 <span class="math inline">\(n\)</span> 阶可逆 <span class="math inline">\(\lambda\)</span> 矩阵 <span class="math inline">\(Q(\lambda)\)</span>，满足 <span class="math inline">\(B(\lambda) = P(\lambda)A(\lambda)Q(\lambda)\)</span>。这个条件与数值矩阵的相似变换基本对应。</p>
<p>那么，一个 <span class="math inline">\(\lambda\)</span> 矩阵是否能够像数值矩阵一样，通过有限次初等变换，转换为一个等价的标准形式矩阵呢？</p>
<h3 id="lambda-矩阵的等价标准形"><span class="math inline">\(\lambda\)</span> 矩阵的等价标准形</h3>
<p>首先，存在这样一条引理：对于首行首列元素非0的 <span class="math inline">\(A(\lambda)\)</span>，若矩阵中存在一个元素 <span class="math inline">\(a_{ij}\)</span> 无法被 <span class="math inline">\(a_{11}\)</span> 整除，那么必存在一个与之等价的 <span class="math inline">\(B(\lambda)\)</span>，使得 <span class="math inline">\(deg \ b_{11} &lt; deg \ a_{11}\)</span>。这个引理的证明不难，但写出来比较麻烦，也不是什么重要性质，故略去。</p>
<p>下面还有一条引理：对于 <span class="math inline">\(n\)</span> 阶非零 <span class="math inline">\(A(\lambda)\)</span>，必然存在与之等价的 <span class="math inline">\(B(\lambda)\)</span>，满足 <span class="math inline">\(b_{11}\)</span> 可以整除 <span class="math inline">\(B(\lambda)\)</span> 中的所有元素。</p>
<p>由上述两条引理，可以得到：对于任一秩为 <span class="math inline">\(r\)</span> 的矩阵 <span class="math inline">\(A(\lambda)\)</span>，必然可以将其转换为一个等价的分块 <span class="math inline">\(\lambda\)</span> 矩阵</p>
<p><span class="math display">\[
A(\lambda) \rightarrow \begin{pmatrix}
    D(\lambda) &amp; 0\\
    0 &amp; 0
\end{pmatrix}
\]</span></p>
<p>其中，<span class="math inline">\(D(\lambda)\)</span> 是仅有对角线为非零 <span class="math inline">\(\lambda\)</span> 多项式元素的矩阵。这个对角矩阵中的所有元素均为最高次项系数为1的 <span class="math inline">\(\lambda\)</span> 多项式，并且 <span class="math inline">\(d_k(\lambda)|d_{k+1}(\lambda), k \in [0, r-1]\)</span>。</p>
<p>上述分块矩阵称为 <span class="math inline">\(A(\lambda)\)</span> 的<strong>等价标准形</strong>，标记为 <span class="math inline">\(I_r(\lambda)\)</span>，其中 <span class="math inline">\(d_k(\lambda)\)</span> 被称为 <span class="math inline">\(A(\lambda)\)</span> 的第 <span class="math inline">\(k\)</span> 个<strong>不变因子</strong>。可以看出，<span class="math inline">\(\lambda\)</span> 矩阵的等价标准形定义和数值矩阵基本一致，只是多出了不变因子的概念。</p>
<h4 id="将-lambda-矩阵转换为等价标准形的步骤">将 <span class="math inline">\(\lambda\)</span> 矩阵转换为等价标准形的步骤</h4>
<ol type="1">
<li>先判断 <span class="math inline">\(a_{11}\)</span> 是否可以整除同行同列的元素。如果可以整除，则通过第三类初等变换，将这些可以被整除的元素化为0；如果存在无法被整除的元素，则尝试降低 <span class="math inline">\(a_{11}\)</span> 的次数，直至 <span class="math inline">\(a_{11}\)</span> 可以整除同行同列所有非0元素，然后通过第三类初等变换，将同行同列的其他元素全部化为0</li>
<li>去掉首行首列，对剩下的 <span class="math inline">\(n-1\)</span> 次矩阵进行相同的操作</li>
<li>经过有限次迭代，<span class="math inline">\(\lambda\)</span> 矩阵将转换为等价标准形</li>
</ol>
<h2 id="lambda-矩阵标准形的计算方法"><span class="math inline">\(\lambda\)</span> 矩阵标准形的计算方法</h2>
<p>利用上述标准步骤进行 <span class="math inline">\(\lambda\)</span> 矩阵等价标准形的计算比较繁琐。事实上 <span class="math inline">\(\lambda\)</span> 矩阵在初等变换中存在着不变量，这一点和数值矩阵是相同的，数值矩阵的不变量其实就是特征值。而 <span class="math inline">\(\lambda\)</span> 矩阵在初等变换中的不变量更多一些，包括<strong>行列式因子</strong>和<strong>不变因子</strong>。</p>
<h3 id="行列式因子">行列式因子</h3>
<p><span class="math inline">\(A(\lambda)\)</span> 的所有 <span class="math inline">\(k\)</span> 阶子式最高次项系数为1的最大公因式称为 <span class="math inline">\(A(\lambda)\)</span> 的 <span class="math inline">\(k\)</span> 阶行列式因子，标记为 <span class="math inline">\(D_k(\lambda)\)</span>。</p>
<p>行列式因子是 <span class="math inline">\(\lambda\)</span> 矩阵在初等变换过程中的不变量。第一类初等变换只会影响某些子式的符号，第二类初等变换只会影响某些子式的常数倍数，第三类初等变换则相当于将某些子式进行线性组合，这些变换都不会影响所有 <span class="math inline">\(k\)</span> 阶子式的最大公因式，所以行列式因子是不变量。</p>
<h3 id="不变因子">不变因子</h3>
<p>行列式因子之间存在这样的关系：<span class="math inline">\(D_{k-1}(\lambda)d_k(\lambda)=D_k(\lambda)\)</span>。这里约定 <span class="math inline">\(D_0(\lambda)=1\)</span>，即 <span class="math inline">\(d_1(\lambda)=D_1(\lambda)\)</span>。那么这个 <span class="math inline">\(d_k(\lambda)\)</span> 就称为 <span class="math inline">\(\lambda\)</span> 矩阵的第 <span class="math inline">\(k\)</span> 个<strong>不变因子</strong>。实际上，在等价标准形小节已经介绍过这个不变因子了，但在这里想强调的一点是，<span class="math inline">\(\lambda\)</span> 矩阵的等价标准形对不变因子的顺序是有要求的，总是存在 <span class="math inline">\(d_k(\lambda)|d_{k+1}(\lambda)\)</span> 的关系。</p>
<p>注意，相邻行列式因子的关系其实也可以直接推出第 <span class="math inline">\(k\)</span> 阶行列式因子用不变因子来表示的表达式</p>
<p><span class="math display">\[
D_k(\lambda) = \prod_i^k d_i(\lambda)
\]</span></p>
<h3 id="通过行列式因子和不变因子简化等价标准形的计算">通过行列式因子和不变因子简化等价标准形的计算</h3>
<p>观察 <span class="math inline">\(\lambda\)</span> 矩阵的各阶子式，可以快速得到行列式因子，例如</p>
<p><span class="math display">\[
A(\lambda) = \begin{pmatrix}
    \lambda-1 &amp; 1 &amp; 0\\
    -2 &amp; \lambda - 4&amp; 1 \\
    0 &amp; 0 &amp; \lambda - 3
\end{pmatrix}
\]</span></p>
<p>观察到矩阵中含有常数元素，因此一阶子式的最大公因式显然是零次多项式，那么一阶行列式因子就必然是 <span class="math inline">\(1\)</span>。</p>
<p>观察矩阵的二阶子式，发现</p>
<p><span class="math display">\[
\begin{pmatrix}
    1 &amp; 0 \\
    \lambda - 4 &amp; 1
\end{pmatrix}
\]</span></p>
<p>的行列式为 <span class="math inline">\(1\)</span>，那么二阶子式的最大公因式显然也是零次多项式，那么二阶行列式因子也是 <span class="math inline">\(1\)</span>。</p>
<p>由于矩阵只有三阶，那么三阶行列式因子就是矩阵行列式的最大公因式，通过计算矩阵行列式，发现</p>
<p><span class="math display">\[
\begin{vmatrix}
    \lambda - 1 &amp; 1 &amp; 0\\
    -2 &amp; \lambda - 4 &amp; 1\\
    0 &amp; 0 &amp; \lambda -3
\end{vmatrix} = (\lambda - 1)(\lambda -4)(\lambda - 3) + 2(\lambda-3)=(\lambda -3)(\lambda^2 - 5\lambda + 6)=(\lambda-3)^2(\lambda-2)
\]</span></p>
<p>那么三阶行列式因子就是 <span class="math inline">\((\lambda-3)^2(\lambda-2)\)</span>，所以矩阵 <span class="math inline">\(A(\lambda)\)</span> 的等价标准形为</p>
<p><span class="math display">\[
\begin{pmatrix}
    1 &amp; &amp; \\
    &amp; 1\\
    &amp; &amp; (\lambda-3)^2(\lambda-2)
\end{pmatrix}
\]</span></p>
<h3 id="初等因子">初等因子</h3>
<p>对 <span class="math inline">\(\lambda\)</span> 矩阵的不变因子进行分解，还可以得到 <span class="math inline">\(\lambda\)</span> 矩阵的<strong>初等因子</strong>。本质上，所谓的初等因子就是不变因子在复数域分解出的一次多项式因式，即</p>
<p><span class="math display">\[
d_i(\lambda) = \prod_j^k(\lambda - a_j)^{l_{ij}}
\]</span></p>
<p>上面的 <span class="math inline">\(l_{ij}\)</span> 为正整数，<span class="math inline">\((\lambda - a_j)^{l_{ij}}\)</span> 整体，就是一个初等因子。<em>注意，不同阶数对应的不变因子可能含有相同的初等因子，但是在表示初等因子全体的时候，这些重复的初等因子不能略去</em>。这就像在上面的例子中，一阶不变因子和二阶不变因子都是1，但是在说明不变因子全体的时候，我们还是需要分别列出一阶、二阶不变因子，而不是因为他们相等就直接省略重复项。</p>
<p>很明显，初等因子是由不变因子决定的。如果已知不变因子全体，就相当于已知初等因子全体。反过来，如果已知初等因子全体和矩阵的秩，也可以倒推不变因子全体。</p>
<p>例如已知矩阵 <span class="math inline">\(rankA(\lambda)=4\)</span>，且初等因子全体为 <span class="math inline">\(\lambda-2, \lambda-2, (\lambda-2)^2, \lambda-3, (\lambda-3)^2\)</span>，那么先求矩阵的4阶不变因子。很明显，4阶不变因子是初等因子全体的最小公倍式，即 <span class="math inline">\((\lambda-2)^2(\lambda-3)^2\)</span>；此时初等因子全体里的因子 <span class="math inline">\((\lambda-2)^2\)</span> 和 <span class="math inline">\((\lambda-3)^2\)</span> 已经被使用，因此在求矩阵的3阶不变因子的时候，只剩下 <span class="math inline">\(\lambda -2, \lambda-2, \lambda-3\)</span> 可以用于组装不变因子，求其最小公倍式，得到3阶不变因子为 <span class="math inline">\((\lambda-2)(\lambda-3)\)</span>；那么显然，2阶不变因子只能是 <span class="math inline">\(\lambda-2\)</span>，1阶不变因子只能是 <span class="math inline">\(1\)</span>。</p>
<h3 id="lambda-等价矩阵总结"><span class="math inline">\(\lambda\)</span> 等价矩阵总结</h3>
<p>在 <span class="math inline">\(\lambda\)</span> 矩阵的初等变换中，我们发现存在三种类型的不变量</p>
<ol type="1">
<li>行列式因子</li>
<li>不变因子</li>
<li>初等因子（和秩）</li>
</ol>
<p>实际上，行列式因子和初等因子都可以由不变因子推导得到，因此上面三种不变量，本质上指向不变因子这个关键的不变量。可以认为行列式因子和初等因子只是不变因子的另一种表现形式，<span class="math inline">\(\lambda\)</span> 矩阵本征不变量其实只有不变因子。</p>
<p>那么，可以总结得出结论：两个 <span class="math inline">\(\lambda\)</span> 矩阵等价的条件是两个矩阵的不变因子相同。到这里，基本可以认定，不变因子之于 <span class="math inline">\(\lambda\)</span> 矩阵就好比特征值之于数值矩阵。更一般的，如果将数值矩阵看作零次 <span class="math inline">\(\lambda\)</span> 矩阵，那么特征值其实就是零次 <span class="math inline">\(\lambda\)</span> 矩阵的不变因子。所以，不变因子可以推广到任意类型的矩阵上去。</p>
<p>所以，不变因子就相当于矩阵的身份证ID，不管矩阵如何变换，身份证ID是不变的。</p>
<h3 id="初等因子与分块对角矩阵">初等因子与分块对角矩阵</h3>
<p>对于分块对角矩阵</p>
<p><span class="math display">\[
A(\lambda) = \begin{pmatrix}
    A_1(\lambda) \\
    &amp; A_2(\lambda) \\
    &amp; &amp; \ddots \\
    &amp;&amp;&amp;A_k(\lambda)
\end{pmatrix}
\]</span></p>
<p>可以证明，任一 <span class="math inline">\(A_i(\lambda)\)</span> 的初等因子都是 <span class="math inline">\(A(\lambda)\)</span> 的初等因子，而 <span class="math inline">\(A(\lambda)\)</span> 的初等因子必为某一 <span class="math inline">\(A_i(\lambda)\)</span> 的初等因子。这个性质对于高次 <span class="math inline">\(\lambda\)</span> 矩阵的等价标准形计算很有帮助，因为我们可以将高次 <span class="math inline">\(\lambda\)</span> 矩阵进行分块对角化，通过计算各分块矩阵的初等因子，得到高次 <span class="math inline">\(\lambda\)</span> 矩阵的初等因子全体，然后再结合秩的信息，倒推出所有行列式因子，从而得到高次 <span class="math inline">\(\lambda\)</span> 矩阵的等价标准形。</p>
<p>当然，由于计算初等因子会涉及到多项式求根，因此虽然对高次矩阵的等价标准形转换很有帮助，但一般会引入数值误差。</p>
<h2 id="lambda-矩阵的jordan标准形"><span class="math inline">\(\lambda\)</span> 矩阵的Jordan标准形</h2>
<h3 id="数值矩阵相似的充要条件">数值矩阵相似的充要条件</h3>
<p>在矩阵回顾中，我们简单地提到了数值矩阵的相似矩阵，说如果存在可逆阵 <span class="math inline">\(P\)</span>，满足 <span class="math inline">\(B = P^{-1}AP\)</span>，则矩阵 <span class="math inline">\(A, B\)</span> 相似。这句话其实只能说是可逆矩阵的定义，应用中很难直接找出符合上述条件的可逆矩阵 <span class="math inline">\(P\)</span>。在介绍了 <span class="math inline">\(\lambda\)</span> 矩阵以后，这里给出数值矩阵相似的充要条件：<strong><span class="math inline">\(A \sim B\)</span> 的充要条件是 <span class="math inline">\(\lambda E - A \rightarrow \lambda E - B\)</span></strong>。</p>
<p>上述定理的证明略去。我们在这里进行如下定义：<span class="math inline">\(\lambda E-A\)</span> 的初等因子和不变因子就是矩阵 <span class="math inline">\(A\)</span> 的初等因子和不变因子。</p>
<h3 id="jordan标准形">Jordan标准形</h3>
<p>为了更好地说明Jordan标准形的性质，先要对下列形式的矩阵性质进行说明。对于 <span class="math inline">\(n\)</span> 阶矩阵</p>
<p><span class="math display">\[
A=\begin{pmatrix}
    \lambda_0 &amp; 1\\
    &amp;\lambda_0 &amp; \ddots\\
    &amp;&amp;\ddots &amp; 1\\
    &amp;&amp;&amp;\lambda_0
\end{pmatrix}
\]</span></p>
<p>有</p>
<p><span class="math display">\[
\lambda E - A = \begin{pmatrix}
    \lambda - \lambda_0 &amp; 1\\
    &amp;\lambda -\lambda_0 &amp; \ddots\\
    &amp;&amp;\ddots &amp; 1\\
    &amp;&amp;&amp;\lambda -\lambda_0
\end{pmatrix}
\]</span></p>
<p>由于 <span class="math inline">\(\lambda E -A\)</span> 的 <span class="math inline">\(n-1\)</span> 阶及以下的子式的最大公因式均为零次多项式，所以对于 <span class="math inline">\(1\leq i \leq n-1\)</span>，都有 <span class="math inline">\(d_i(\lambda) = 1\)</span>，那么矩阵 <span class="math inline">\(A\)</span> 的初等因子全体就是第 <span class="math inline">\(n\)</span> 阶不变因子 <span class="math inline">\(d_n(\lambda)=(\lambda-\lambda_0)^n\)</span>。</p>
<p>记住这个特性，下面介绍Jordan标准形。Jordan标准形指的是如下形式的 <span class="math inline">\(n\)</span> 阶矩阵</p>
<p><span class="math display">\[
J = \begin{pmatrix}
    J_1 \\
    &amp;J_2\\
    &amp;&amp;\ddots\\
    &amp;&amp;&amp;J_s
\end{pmatrix}
\]</span></p>
<p>其中</p>
<p><span class="math display">\[
J_k = \begin{pmatrix}
    \lambda_k&amp;1\\
    &amp; \lambda_k&amp;\ddots \\
    &amp;&amp; \ddots &amp; 1\\
    &amp;&amp;&amp; \lambda_k
\end{pmatrix}
\]</span></p>
<p>这一 <span class="math inline">\(n_k\)</span> 阶上三角矩阵，称为一个<strong>Jordan块</strong>。另外，<span class="math inline">\(\sum_{i=1}^sn_i=n\)</span>。注意到，假如所有的Jordan块均为1阶矩阵，那么Jordan标准形恰为对角阵。很明显，矩阵的Jordan标准形就是相似对角阵的推广，相似对角阵是Jordan标准形的一种特殊情况。</p>
<p>根据前面的铺垫，一个Jordan块的初等因子全体，显然可以表示为 <span class="math inline">\((\lambda - \lambda_k)^{n_k}\)</span>。那么，Jordan标准形的初等因子全体，就是</p>
<p><span class="math display">\[
(\lambda-\lambda_1)^{n_1}, \ (\lambda - \lambda_2)^{n_2}, \ \cdots, \ (\lambda-\lambda_s)^{n_s}
\]</span></p>
<h3 id="在复数域内将任一矩阵转为jordan标准形">在复数域内将任一矩阵转为Jordan标准形</h3>
<p>Jordan标准形的这一性质直接指向了本章最为关键的一个定理：在复数域内，若矩阵 <span class="math inline">\(A\)</span> 的初等因子全体为</p>
<p><span class="math display">\[
(\lambda-\lambda_1)^{n_1}, \ (\lambda - \lambda_2)^{n_2}, \ \cdots, \ (\lambda-\lambda_s)^{n_s}
\]</span></p>
<p>那么矩阵 <span class="math inline">\(A\)</span> 一定与上述Jordan标准形相似。特别的，矩阵 <span class="math inline">\(A\)</span> 能够相似对角化的充要条件是矩阵 <span class="math inline">\(A\)</span> 所有初等因子均为一次多项式。</p>
<p>需要特别注意的是，如果初等因子全体恰为 <span class="math inline">\(\lambda-a, (\lambda-a)^2\)</span>，那么对应的Jordan标准形应当写为</p>
<p><span class="math display">\[
\begin{pmatrix}
    a\\
    &amp;a&amp;1\\
    &amp;&amp;a
\end{pmatrix}
\]</span></p>
<p>也就是说，即便特征值相同，但是如果这个特征值是不同的初等因子带来的，必须将其作为一个独立的Jordan块进行处理。</p>
<h2 id="矩阵的零化多项式和最小多项式">矩阵的零化多项式和最小多项式</h2>
<h3 id="多项式在矩阵上的取值">多项式在矩阵上的取值</h3>
<p>对于多项式 <span class="math inline">\(\varphi(\lambda) = a_0 \lambda^n + a_1 \lambda^{n-1} + \cdots + a_n\)</span>，多项式在矩阵 <span class="math inline">\(A\)</span> 上的取值，就是 <span class="math inline">\(\varphi(A) = a_0 A^n + a_1 A^{n-1} + \cdots + a_0 E\)</span>。当然，这里的矩阵是一个数值矩阵。</p>
<h3 id="矩阵的零化多项式">矩阵的零化多项式</h3>
<p>对于 <span class="math inline">\(n\)</span> 阶矩阵 <span class="math inline">\(A\)</span>，若存在 <span class="math inline">\(\varphi(A)=\boldsymbol{0}\)</span>，那么称 <span class="math inline">\(\varphi(\lambda)\)</span> 为矩阵 <span class="math inline">\(A\)</span> 的一个零化多项式。这个和常数的零化多项式的定义在本质上没什么区别。</p>
<h3 id="cayley-hamilton定理">Cayley-Hamilton定理</h3>
<p>Cayley-Hamilton定理：矩阵 <span class="math inline">\(A\)</span> 的特征多项式 <span class="math inline">\(\varphi(\lambda) = |\lambda E - A|\)</span> 是矩阵 <span class="math inline">\(A\)</span> 的一个零化多项式。</p>
<p>注意，应用本定理时不能直接将矩阵 <span class="math inline">\(A\)</span> 代入方程右边的 <span class="math inline">\(\lambda\)</span>，这样会导致右边的结果变为求 <span class="math inline">\(\boldsymbol{0}\)</span> 矩阵的行列式。应该写出特征多项式的表达式之后，再代入 <span class="math inline">\(A\)</span>，这样才能保证方程右边的结果是一个 <span class="math inline">\(\boldsymbol{0}\)</span> 矩阵。</p>
<h3 id="矩阵的零化多项式性质">矩阵的零化多项式性质</h3>
<p>和常数的零化多项式一样，矩阵的零化多项式也存在类似的性质。</p>
<ol type="1">
<li>若 <span class="math inline">\(f(\lambda), g(\lambda)\)</span> 为矩阵 <span class="math inline">\(A\)</span> 的两个零化多项式，那么 <span class="math inline">\(gcd(f(\lambda), g(\lambda))\)</span> 也是矩阵 <span class="math inline">\(A\)</span> 的零化多项式</li>
<li>矩阵 <span class="math inline">\(A\)</span> 的所有零化多项式的最大公因式，称为矩阵 <span class="math inline">\(A\)</span> 的<strong>最小多项式</strong></li>
</ol>
<h3 id="最小多项式的性质">最小多项式的性质</h3>
<p>前面提到，一个矩阵的最小多项式就是这个矩阵所有零化多项式的最大公因式。这个表示等价于，一个矩阵的最小多项式，就是这个矩阵的最高次项系数为1且次数最低的零化多项式，记作 <span class="math inline">\(m_A(\lambda)\)</span>。</p>
<p>从上面的这个表述可以推出，矩阵 <span class="math inline">\(A\)</span> 的特征值，一定是其最小多项式的根。</p>
<h4 id="最小多项式和jordan标准形的关系">最小多项式和Jordan标准形的关系</h4>
<p>实际上矩阵的最小多项式和其Jordan标准形描述的是同一件事。若记矩阵 <span class="math inline">\(A\)</span> 对应的Jordan标准形为 <span class="math inline">\(J\)</span>，那么矩阵 <span class="math inline">\(A\)</span> 的最小多项式其实就是 <span class="math inline">\(\lambda E - J\)</span> 的对角元之乘积。</p>
<h4 id="最小多项式和不变因子的关系">最小多项式和不变因子的关系</h4>
<p><span class="math inline">\(n\)</span> 阶方阵 <span class="math inline">\(A\)</span> 的最小多项式，实际上就是 <span class="math inline">\(A\)</span> 的第 <span class="math inline">\(n\)</span> 个不变因子。</p>
<h4 id="最小多项式和特征多项式的关系">最小多项式和特征多项式的关系</h4>
<p>最小多项式一定能整除特征多项式。某些特殊情况下，特征多项式恰好就是最小多项式。</p>
<h4 id="用最小多项式来描述矩阵相似对角化的充要条件">用最小多项式来描述矩阵相似对角化的充要条件</h4>
<p>前面提到，矩阵能够进行相似对角化的充要条件是，矩阵的特征值互不相同，也就是特征多项式无重根。实际上，这意味着最小多项式也没有重根，那么从多项式导数的角度考虑，可以描述为</p>
<p><span class="math display">\[
gcd(m_A(\lambda), m&#39;_A(\lambda)) = 1
\]</span></p>
<p>即最小多项式与其导数互素。这个性质在对最小多项式或特征多项式求根比较困难的时候，非常实用。</p>
]]></content>
      <categories>
        <category>University</category>
      </categories>
      <tags>
        <tag>Mathematics</tag>
        <tag>Matrix Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵分析笔记-矩阵基础回顾</title>
    <url>/2022/11/22/%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E7%9F%A9%E9%98%B5%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<h2 id="矩阵基础知识回顾">矩阵基础知识回顾</h2>
<p>矩阵本质上是一个二维数表，数据以行和列的形式存在于矩阵中。例如一个m行n列的矩阵 <span class="math inline">\(A_{m\times n}\)</span>，可以表示为</p>
<p><span class="math display">\[
A_{m\times n}=
\begin{bmatrix}
    a_{11} &amp; a_{12} &amp; a_{13} &amp; \cdots &amp; a_{1n} \\
    a_{21} &amp; a_{22} &amp; a_{23} &amp; \cdots &amp; a_{2n} \\
    \vdots  &amp; &amp; &amp; \ddots &amp; \\
    a_{m1} &amp; a_{m2} &amp; a_{m3} &amp; \cdots &amp; a_{mn}
\end{bmatrix}
\]</span></p>
<p>矩阵中的 <span class="math inline">\(a_{ij}\)</span> 项，称为矩阵<strong>元素</strong>。</p>
<span id="more"></span>
<h3 id="矩阵的简单分类">矩阵的简单分类</h3>
<h4 id="零矩阵">零矩阵</h4>
<p>如果矩阵中的所有元素 <span class="math inline">\(a_{ij}\)</span> 均满足 <span class="math inline">\(a_{ij} = 0\)</span>，则称该矩阵为零矩阵，用符号 <span class="math inline">\(\boldsymbol{0}\)</span> 来表示。</p>
<h4 id="行列矩阵">行/列矩阵</h4>
<p>如果一个矩阵只有一行，那么常称为行矩阵，或行向量。同样的，如果一个矩阵只有一列，那么称为列矩阵，或列向量。</p>
<h4 id="方阵">方阵</h4>
<p>如果一个矩阵的维度 <span class="math inline">\(m, n\)</span> 满足 <span class="math inline">\(m=n&gt;0\)</span>，那么这个矩阵可以称为方阵，因为行列的长度相同，就像一个正方形。在本课程中所描述的大部分矩阵都是方阵。</p>
<h3 id="方阵基本概念">方阵基本概念</h3>
<h4 id="对角线">对角线</h4>
<p>对于一个n阶方阵，从左上元素 <span class="math inline">\(a_{11}\)</span> 到右下元素 <span class="math inline">\(a_{nn}\)</span> 所形成的这条对角线，称为方阵的<strong>主对角线</strong>，或简称为对角线；从右上元素 <span class="math inline">\(a_{1n}\)</span> 到左下元素 <span class="math inline">\(a_{n1}\)</span> 形成的对角线，称为方阵的<strong>副对角线</strong>。副对角线不常用。</p>
<h4 id="对角矩阵">对角矩阵</h4>
<p>如果一个n阶方阵除了主对角线元素以外，其他元素均为0，那么可以称这个方阵为<strong>对角矩阵</strong>，可以记作 <span class="math inline">\(diag(a_{11}, a_{22}, \cdots, a_{nn})\)</span>。</p>
<h4 id="单位矩阵">单位矩阵</h4>
<p>如果一个n阶对角矩阵的对角线元素均为1，那么称这个对角矩阵为n阶单位矩阵，用符号 <span class="math inline">\(E_n\)</span> 表示，在已知这个矩阵阶数的情况下也可简写为 <span class="math inline">\(E\)</span>。</p>
<h4 id="三角矩阵">三角矩阵</h4>
<p>如果一个方阵的对角线以下元素均为0，那么可以称这个方阵为<strong>上三角矩阵</strong>；同理，如果这个方阵的对角线以上元素均为0，那么可以称这个方阵为<strong>下三角矩阵</strong>。</p>
<p>特别的，单位矩阵同时符合上述两个概念的定义，因此单位矩阵既是上三角矩阵，也是下三角矩阵。</p>
<p>如果一个三角矩阵的<strong>对角线元素</strong>恰好均为1，那么称这个三角矩阵为单位上（下）三角矩阵。</p>
<h3 id="矩阵运算">矩阵运算</h3>
<h4 id="矩阵加法">矩阵加法</h4>
<p>仅同型矩阵允许相加，相加的方式是对应行列位置的元素做实数或复数的加法，过于简单，不再赘述。</p>
<h4 id="矩阵数乘">矩阵数乘</h4>
<p>一个矩阵可以与任意一个实数或复数相乘，数乘的方式是矩阵中的所有元素都与这个数做实数或复数的乘法，也很简单，不再赘述。</p>
<h4 id="矩阵乘法">矩阵乘法</h4>
<p>矩阵乘法比较特殊，对于两个相乘的矩阵行列规模有严格要求，并且对矩阵相乘的左右顺序也有要求。若乘号左侧的矩阵有j列，那么乘号右侧矩阵的行数必须同样为j，否则无法进行矩阵乘法，因为矩阵乘法的操作是<strong>取乘号左侧矩阵的第i行，与乘号右侧矩阵的第j列，对应元素相乘后求和，得到结果矩阵的第i行第j个元素。</strong></p>
<p>矩阵乘法的本质是两个线性变换的叠加。相关性质比较熟悉，不再过多叙述。</p>
<p>特别的，对于方阵而言，由于两个n阶方阵相乘后的结果仍然是n阶方阵，因此方阵允许进行求幂操作。</p>
<h4 id="矩阵转置">矩阵转置</h4>
<p>对于一个m行n列的矩阵 <span class="math inline">\(A_{m\times n}\)</span>，若令矩阵的第i行成为结果矩阵的第i列，实现矩阵行列的互换，就可以完成一次矩阵转置操作，得到一个n行m列的矩阵，其中原矩阵第i行第j列的元素 <span class="math inline">\(a_{ij}\)</span> 会位于结果矩阵的第j行第i列，成为 <span class="math inline">\(b_{ji}\)</span>。转置后得到的矩阵记为 <span class="math inline">\(A^T\)</span>，上标 <span class="math inline">\(^T\)</span> 表示<em>Transpose</em>。</p>
<p>矩阵转置对于矩阵乘法来说比较特别，因为矩阵乘法对于矩阵行列规模是敏感的，因此对于一个矩阵乘法做转置时，原本左乘的矩阵在转置后会变为右乘，如下</p>
<p><span class="math display">\[
(AB)^T = B^TA^T
\]</span></p>
<p>另外，如果一个矩阵满足 <span class="math inline">\(A^T=A\)</span>，那么称这个矩阵为<strong>对称矩阵</strong>；如果一个矩阵满足 <span class="math inline">\(A^T=-A\)</span>，那么称这个矩阵为<strong>反对称矩阵</strong>。</p>
<h3 id="行列式">行列式</h3>
<p>矩阵行列式的计算规律在数学上描述起来很复杂，但是用自然语言描述相对简单：</p>
<ol type="1">
<li>从矩阵每一行中取出一个元素相乘，要求这些元素不允许出现在同一列</li>
<li>元素的列数逆序数对-1求幂，然后乘到上面的积上</li>
<li>将所有的乘积相加，就可以得到矩阵的行列式</li>
</ol>
<p>矩阵行列式的自然起源是n维平行体的体积计算。一个n阶方阵的行列式，表示这个n阶方阵所有列元素对应的n个列向量在n维空间所形成的平行2n面体的<strong>有向体积</strong>。</p>
<h4 id="维平面的例子">2维平面的例子</h4>
<p>假如在一个2维直角坐标系上，有两个向量 <span class="math inline">\(\boldsymbol x_1 = (a, b), \boldsymbol x_2 = (c, d)\)</span>，其中点 <span class="math inline">\((a, b)\)</span> 在点 <span class="math inline">\((c, d)\)</span> 的右下侧，那么这两个向量所形成的<strong>有向面积</strong>可以表示为</p>
<p><span class="math display">\[
S = ad - bc
\]</span></p>
<p>下面的图示更加直观</p>
<p><img src="/2022/11/22/%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0-%E7%9F%A9%E9%98%B5%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE//Parallelogramme.jpg" alt="两个向量形成的平行四边形有向面积" align="center"></p>
<p>注意，这里提到了有向面积。以逆时针方向为正，如果向量 <span class="math inline">\(\boldsymbol x_1\)</span> 与x轴的夹角小于向量 <span class="math inline">\(\boldsymbol x_2\)</span> 与x轴的夹角，那么向量 <span class="math inline">\(\boldsymbol x_1\)</span> 与向量 <span class="math inline">\(\boldsymbol x_2\)</span> 的有向面积为正；否则为负。</p>
<p>很显然，在2维直角坐标系上，两个向量的有向面积表达式与2阶方阵的行列式完全相同。假如两个向量共线，那么这两个向量的有向面积很显然为0。</p>
<h4 id="维空间的例子">3维空间的例子</h4>
<p>以3阶方阵为例，若将一个3阶方阵 <span class="math inline">\(A_{3\times 3}\)</span> 表示为</p>
<p><span class="math display">\[
A_{3\times 3} = \begin{bmatrix}
    \boldsymbol c_1 &amp; \boldsymbol c_2 &amp; \boldsymbol c_3
\end{bmatrix}
\]</span></p>
<p>每一个列向量都可以看成是三维空间中的一个向量。这个3阶方阵的行列式恰为这三个向量所形成的平行体有向体积。假如其中有两个向量共线或三个向量共平面，那么这个平行体的有向体积为0，在空间中退化为一个平面，甚至退化为一条直线。</p>
<h4 id="到高维空间的推广">到高维空间的推广</h4>
<p>上面的引例可以推广到高维空间。一个n阶方阵的行列式在n维空间上恰为这个n阶方阵中列向量所形成的平行2n面体的有向体积，假如其中有两个列向量出现了线性相关的情况，那么这个有向体积就会坍缩为0。实际上一个非满秩方阵行列式为0的几何意义，就是方阵中至少存在一对线性相关的列向量，导致这n个列向量所形成的平行体在n维空间发生了降维，坍缩为n-1维超平面，甚至更低的超直线等。</p>
<h4 id="行列式的运算性质">行列式的运算性质</h4>
<p>行列式的英文为<em>Determinant</em>，常用 <span class="math inline">\(detA\)</span> 表示矩阵 <span class="math inline">\(A\)</span> 的行列式。</p>
<ol type="1">
<li>矩阵转置不影响行列式大小</li>
<li>若方阵 <span class="math inline">\(A\)</span> 为n阶方阵，<span class="math inline">\(k\)</span>为一常数，那么有 <span class="math inline">\(detkA=k^ndetA\)</span> （相当于所有列向量的长度均为k倍，那么很明显平行2n面体的体积将会是 <span class="math inline">\(k^n\)</span> 倍）</li>
<li><span class="math inline">\(detAB=detAdetB\)</span></li>
<li>三角矩阵的行列式恰为对角线元素之积</li>
</ol>
<p>如果要求一个矩阵的行列式，可以通过按行列展开的方式进行求解。将矩阵元素 <span class="math inline">\(a_{ij}\)</span> 所在行列从矩阵中去除后，可以得到一个 <span class="math inline">\(n-1\)</span> 阶方阵，这个方阵的行列式称为元素 <span class="math inline">\(a_{ij}\)</span> 的余子式，常记作 <span class="math inline">\(M_{ij}\)</span>；<span class="math inline">\(a_{ij}\)</span> 在矩阵中的位置决定了这个余子式的符号，由 <span class="math inline">\((-1)^{i+j}\)</span> 确定，实际上就是前面所称的逆序数概念，那么 <span class="math inline">\(A_{ij} = (-1)^{i+j}M_{ij}\)</span> 被称为元素 <span class="math inline">\(a_{ij}\)</span> 的代数余子式。矩阵的行列式可以写作</p>
<p><span class="math display">\[
det A_n = \sum_{k=1}^n a_{ik}A_{ik}, i \in [1, n]
\]</span></p>
<p>一个矩阵可以从任意一行进行展开，同样，也可以从任意一列进行展开</p>
<p><span class="math display">\[
det A_n = \sum_{k=1}^n a_{ki}A_{ki}, i \in [1, n]
\]</span></p>
<p>相对来说，使用矩阵按行或按列展开来求解行列式还是很繁琐的，一般会通过将矩阵通过<strong>初等变换</strong>转换为一个三角矩阵后，用三角矩阵对角线元素之积来计算矩阵的行列式。</p>
<h3 id="伴随矩阵">伴随矩阵</h3>
<p>前面提到了矩阵元素的代数余子式概念。事实上，每一个矩阵 <span class="math inline">\(A\)</span> 都有一个伴随矩阵 <span class="math inline">\(A^*\)</span>，这个伴随矩阵可以写作</p>
<p><span class="math display">\[
A^* = \begin{bmatrix}
    A_{11} &amp; A_{21} &amp; \cdots &amp; A_{n1}\\
    A_{12} &amp; A_{22} &amp; \cdots &amp; A_{n2}\\
    \vdots &amp; &amp; \ddots &amp;\\
    A_{1n} &amp; A_{2n} &amp; \cdots &amp; A_{nn}
\end{bmatrix}
\]</span></p>
<p>也就是所有元素都由其代数余子式取代后做转置。这个伴随矩阵和原矩阵的关系如下</p>
<p><span class="math display">\[
AA^* = A^*A = (detA)E
\]</span></p>
<p>事实上，上面这条式子定义了一个矩阵的逆矩阵</p>
<p><span class="math display">\[
A^{-1} = \frac{A^*}{detA}
\]</span></p>
<p>显然，一个矩阵存在逆矩阵的充分必要条件是，这个矩阵的行列式不为0。</p>
<h3 id="逆矩阵">逆矩阵</h3>
<p>在上个小节，逆矩阵的定义式已经给出。矩阵的可逆性又可以称为非奇异性，可逆矩阵就是非奇异矩阵，不可逆矩阵就是奇异矩阵。另外，逆矩阵还有以下性质</p>
<ol type="1">
<li>一个矩阵如果是可逆的，其逆矩阵必然也是可逆的，而且逆矩阵的逆就是原矩阵，即 <span class="math inline">\((A^{-1})^{-1}=A\)</span></li>
<li>若一个矩阵是可逆的，那么有 <span class="math inline">\((kA)^{-1} = k^{-1}A^{-1}\)</span></li>
<li>若 <span class="math inline">\(AB\)</span> 可逆，那么有 <span class="math inline">\((AB)^{-1} = B^{-1}A^{-1}\)</span></li>
<li>若 <span class="math inline">\(A^T\)</span> 可逆，那么有 <span class="math inline">\((A^T)^{-1} = (A^{-1})^T\)</span>，即矩阵转置的逆等于逆矩阵的转置</li>
<li>逆矩阵的行列式等于原矩阵行列式的倒数，即 <span class="math inline">\(detA^{-1} = (detA)^{-1}\)</span></li>
</ol>
<h3 id="矩阵的迹">矩阵的迹</h3>
<p>矩阵的迹就是其对角线元素之和。由于迹的英文是Trace，因此用 <span class="math inline">\(tr A\)</span> 来标记矩阵 <span class="math inline">\(A\)</span> 的迹。</p>
<p>迹在证明矩阵的一些性质时有一些作用，但平时使用比较少。</p>
<h3 id="共轭矩阵">共轭矩阵</h3>
<p>假如矩阵 <span class="math inline">\(A\)</span> 是一个复数矩阵，那么对其所有元素 <span class="math inline">\(a_{ij}\)</span> 均取共轭，得到 <span class="math inline">\(\bar A\)</span>，那么这个 <span class="math inline">\(\bar A\)</span> 就称为矩阵 <span class="math inline">\(A\)</span> 的共轭矩阵。复数矩阵的共轭和转置常同时进行，因此 <span class="math inline">\(\bar A^T\)</span> 常用 <span class="math inline">\(A^H\)</span> 表示。</p>
<p>若矩阵 <span class="math inline">\(A\)</span> 满足</p>
<p><span class="math display">\[
A = A^H
\]</span></p>
<p>则称矩阵 <span class="math inline">\(A\)</span> 为Hermite矩阵。</p>
<p>若矩阵 <span class="math inline">\(A\)</span> 满足</p>
<p><span class="math display">\[
A = -A^H
\]</span></p>
<p>则称矩阵 <span class="math inline">\(A\)</span> 为反Hermite矩阵。</p>
<h3 id="分块矩阵">分块矩阵</h3>
<p>对于高阶矩阵来说，将矩阵分割为若干小矩阵，将其看作若干矩阵元素，对于矩阵分析来说是很有帮助的。分块矩阵有许多基本的性质，这里不做记录，下面记录一些可能比较tricky的性质</p>
<ol type="1">
<li>若 <span class="math inline">\(A = diag(A_1, A_2, \cdots, A_n)\)</span>，那么 <span class="math inline">\(A^{-1} = diag(A_1^{-1}, A_2^{-1}, \cdots, A_n^{-1})\)</span></li>
<li>若矩阵 <span class="math inline">\(A\)</span> 是三角分块矩阵，其中 <span class="math inline">\(A_1, A_2, \cdots, A_n\)</span> 为穿过对角线的矩阵块，那么 <span class="math inline">\(detA = detA_1detA_2\cdots detA_n\)</span></li>
</ol>
<h2 id="线性方程组">线性方程组</h2>
<h3 id="线性方程组和矩阵表示的关系">线性方程组和矩阵表示的关系</h3>
<p>对于一个 <span class="math inline">\(m\times n\)</span> 规模的线性方程组</p>
<p><span class="math display">\[
\begin{cases}
    a_{11}x_1 + a_{12}x_2 + &amp;\cdots &amp;+ a_{1n} x_n = b_1\\
    a_{21}x_1 + a_{22}x_2 + &amp;\cdots &amp;+ a_{2n} x_n = b_2\\
    &amp; \cdots &amp; \\
    a_{m1}x_1 + a_{m2}x_2 + &amp;\cdots &amp;+ a_{mn} x_n = b_m
\end{cases}
\]</span></p>
<p>可以通过矩阵和向量的方式表示上面这个线性方程组，即令</p>
<p><span class="math display">\[
A = \begin{bmatrix}
    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n}\\
    a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n}\\
    \vdots &amp; &amp; \ddots \\
    a_{m1} &amp; a_{m2} &amp; \cdots &amp; a_{mn}
\end{bmatrix}, \
\boldsymbol x = \begin{bmatrix}
    x_1\\x_2\\\vdots \\x_n
\end{bmatrix} ,\
\boldsymbol b = \begin{bmatrix}
    b_1\\b_2\\\vdots \\ b_m
\end{bmatrix}
\]</span></p>
<p>上述线性方程组可以简单地表示为</p>
<p><span class="math display">\[
A\boldsymbol x=\boldsymbol b
\]</span></p>
<h3 id="线性方程组研究的问题">线性方程组研究的问题</h3>
<p>对于一个线性方程组，我们主要研究以下三方面问题</p>
<ol type="1">
<li>线性方程组是否有解？</li>
<li>线性方程组有多少解？</li>
<li>线性方程组如何求解？</li>
</ol>
<p>上述矩阵 <span class="math inline">\(A\)</span> 称为系数矩阵，<span class="math inline">\(\boldsymbol{x}\)</span> 称为未知数矩阵，或未知数向量，<span class="math inline">\(\boldsymbol{b}\)</span> 称为常数项矩阵，或常数项向量。</p>
<p>观察到系数矩阵和常数项矩阵具有相同的行数，常将这两个矩阵合在一起，称为<strong>增广矩阵</strong>，如下</p>
<p><span class="math display">\[
\begin{pmatrix}
    A &amp; \boldsymbol{b}
\end{pmatrix}
=\begin{bmatrix}
    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} &amp; b_1 \\
    a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} &amp; b_2 \\
    \vdots &amp; &amp; \ddots &amp; &amp;\vdots\\
    a_{m1} &amp; a_{m2} &amp; \cdots &amp; a_{mn} &amp; b_m
\end{bmatrix}
\]</span></p>
<p>假如线性方程组的系数矩阵 <span class="math inline">\(A\)</span> 是一个方阵，那么根据<strong>Cramer法则</strong>，这个线性方程组存在唯一解的充要条件是系数方阵可逆。</p>
<h3 id="矩阵的初等变换">矩阵的初等变换</h3>
<h4 id="矩阵初等变换分类">矩阵初等变换分类</h4>
<p>矩阵的初等变换包括以下三种</p>
<ol type="1">
<li>第一类初等变换——矩阵的某两行或某两列元素交换位置</li>
<li>第二类初等变换——矩阵的某一行或某一列元素乘上一个常数</li>
<li>第三类初等变换——矩阵的某一行（列）元素乘上一个常数，然后加到另一行（列）上</li>
</ol>
<p>从解线性方程组的角度来看，第二类与第三类初等变换是解线性方程组中最常见的操作：对某一条方程两边同乘以某一个常数；某一条方程乘以某一个常数以后，加到另一个方程上，以实现消元等目的。</p>
<h4 id="初等变换矩阵">初等变换矩阵</h4>
<p>矩阵的初等变换可以抽象为一个矩阵，例如第一类初等变换可以抽象为</p>
<p><span class="math display">\[
\begin{aligned}
    E(i, j) = E - (\boldsymbol{e}_i - \boldsymbol{e}_j)(\boldsymbol{e}_i - \boldsymbol{e}_j)^T &amp;= E - \begin{bmatrix}
    0  &amp; \cdots &amp; 0 &amp; \cdots &amp; 0 &amp; \cdots &amp; 0 \\
    \vdots &amp;  \ddots \\
    0  &amp; \cdots &amp; 1 &amp;\cdots&amp; -1 &amp; \cdots &amp; 0\\
    \vdots &amp; &amp;  &amp; \ddots \\
    0 &amp; \cdots &amp; -1 &amp; \cdots &amp; 1 &amp; \cdots &amp; 0\\
    \vdots &amp; &amp; &amp; &amp; &amp;  \ddots &amp;\\
    0  &amp;\cdots&amp; 0 &amp; \cdots &amp; 0 &amp; \cdots &amp;0
\end{bmatrix} \\
&amp;=
\begin{bmatrix}
    1  &amp; \cdots &amp; 0 &amp; \cdots &amp; 0 &amp; \cdots &amp; 0 \\
    \vdots &amp;  \ddots \\
    0  &amp; \cdots &amp; 0 &amp;\cdots&amp; 1 &amp; \cdots &amp; 0\\
    \vdots &amp; &amp;  &amp; \ddots \\
    0 &amp; \cdots &amp; 1 &amp; \cdots &amp; 0 &amp; \cdots &amp; 0\\
    \vdots &amp; &amp; &amp; &amp; &amp;  \ddots &amp;\\
    0  &amp;\cdots&amp; 0 &amp; \cdots &amp; 0 &amp; \cdots &amp;1
\end{bmatrix}
\end{aligned}
\]</span></p>
<p>其中 <span class="math inline">\(\boldsymbol{e}_i\)</span> 表示单位矩阵 <span class="math inline">\(E\)</span> 的第 <span class="math inline">\(i\)</span> 列列向量。那么，如果要对矩阵 <span class="math inline">\(A\)</span> 进行第一类初等列变换，只需要将第一类初等变换矩阵 <span class="math inline">\(E(i, j)\)</span> 左乘到矩阵 <span class="math inline">\(A\)</span> 上，即 <span class="math inline">\(E(i, j)A\)</span>；同理，如果要进行第一类初等行变换，只需要将第一类初等变换矩阵 <span class="math inline">\(E(i, j)\)</span> 右乘到矩阵 <span class="math inline">\(A\)</span> 上，即 <span class="math inline">\(AE(i, j)\)</span>。</p>
<p>其他两类初等变换也是类似的，都可以以一个初等变换矩阵来抽象对目标矩阵进行初等变换操作。</p>
<p>矩阵经过初等变换之后，行列式会发生以下变化</p>
<ol type="1">
<li>经过第一类初等变换后，行列式变符号</li>
<li>经过第二类初等变换后，行列式变为原来的 <span class="math inline">\(k\)</span> 倍，<span class="math inline">\(k\)</span> 为第二类初等变换时的倍数</li>
<li>经过第三类初等变换后，行列式不发生任何变化</li>
</ol>
<p>很明显，初等变换是可逆的，初等变换的逆变换是相同类型的初等变换；相应的，初等矩阵也都是可逆的，初等矩阵的逆矩阵也是相同类型的初等矩阵。</p>
<h4 id="矩阵的等价关系">矩阵的等价关系</h4>
<p>如果矩阵 <span class="math inline">\(A\)</span> 经过有限次初等变换变为了矩阵 <span class="math inline">\(B\)</span>，那么称矩阵 <span class="math inline">\(A\)</span> 和矩阵 <span class="math inline">\(B\)</span> 等价，记作 <span class="math inline">\(A\sim B\)</span>。这和三角形的相似或全等性质非常类似，在数学上这些关系都称为<strong>等价关系</strong>。</p>
<p>可以将等价矩阵的转换关系写作</p>
<p><span class="math display">\[
PAQ = B
\]</span></p>
<p>上面的 <span class="math inline">\(P\)</span> 可以看作由矩阵 <span class="math inline">\(A\)</span> 转换到矩阵 <span class="math inline">\(B\)</span> 所必须进行的初等列变换矩阵之积，<span class="math inline">\(Q\)</span> 则是相应的初等行变换矩阵之积。</p>
<p>另外，矩阵与对应的逆矩阵之间本质上也是等价关系，同样可以通过若干个初等矩阵之积进行转换。在应用中，往往不会使用伴随矩阵求逆矩阵，而是利用初等变换进行逆矩阵的求解，以减少计算量。</p>
<h3 id="阶梯形矩阵与行最简形矩阵">阶梯形矩阵与行最简形矩阵</h3>
<p>通过矩阵进行线性方程组的求解过程，其实就是对系数矩阵进行初等变换的过程。在这个过程中，矩阵往往会出现两种简化形式</p>
<ol type="1">
<li>行阶梯形</li>
<li>行最简形</li>
</ol>
<h4 id="行阶梯形矩阵">行阶梯形矩阵</h4>
<p>行阶梯形矩阵指的是，矩阵的非零行全部在矩阵的最下方；另外，矩阵越靠下的行，其行首非0元素越靠右，例如</p>
<p><span class="math display">\[
\begin{bmatrix}
    2 &amp; 2 &amp; 3 &amp; 4\\
    0 &amp; 0&amp; 3 &amp; 2\\
    0 &amp; 0&amp;0 &amp; 1
\end{bmatrix}
\]</span></p>
<p>就是一个行阶梯形矩阵。如果将所有的0元素遮起来，那么这个矩阵将会变成</p>
<p><span class="math display">\[
\begin{bmatrix}
    2 &amp; 2&amp; 3&amp;4\\
    &amp;&amp;3&amp;2\\
    &amp;&amp;&amp;1
\end{bmatrix}
\]</span></p>
<p>这个矩阵的形状就很像是一个阶梯，由此得名。行阶梯形矩阵中的行首非0元素简称为<strong>首元素</strong>。矩阵 <span class="math inline">\(A\)</span> 的行阶梯形记作 <span class="math inline">\(A_0\)</span>。</p>
<h4 id="行最简形矩阵">行最简形矩阵</h4>
<p>在行阶梯形矩阵的基础上，先通过第二类初等变换令所有行的首元素变为1，再令首元素所在列的其他元素均通过初等变换化为0，得到行最简形矩阵，例如</p>
<p><span class="math display">\[
\begin{bmatrix}
    1 &amp; 2 &amp; 0 &amp; 0\\
    0 &amp; 0 &amp; 1 &amp; 0\\
    0 &amp; 0 &amp; 0 &amp; 1
\end{bmatrix}
\]</span></p>
<p>可以看到，行最简形矩阵其实就是阶梯形矩阵再通过第三类初等变换得到的。矩阵 <span class="math inline">\(A\)</span> 的行最简形记作 <span class="math inline">\(A_1\)</span>。</p>
<h3 id="矩阵的秩">矩阵的秩</h3>
<p>在线性方程组的求解中，矩阵的秩是反映线性方程组解的结构的重要概念。<strong>矩阵的秩，本质上反映了线性方程组中独立方程的数量。</strong></p>
<p>矩阵秩的定义是，<strong>矩阵非零代数余子式的最高阶数</strong>。这个概念相对抽象一些，一下子可能反应不过来。其实矩阵的秩从直观上来看，就是<em>矩阵化为阶梯形矩阵之后，非全0行的数量</em>。矩阵的秩在英语中用rank表示，因此数学上也用 <span class="math inline">\(rankA\)</span> 表示矩阵 <span class="math inline">\(A\)</span> 的秩。</p>
<p>矩阵的秩有很多蛮好的性质，教材中列出了很多基础的性质，下面只记一些比较tricky的</p>
<ol type="1">
<li>矩阵的秩就是矩阵化为行阶梯形之后的非全0行数</li>
<li>矩阵的秩小于等于矩阵的行数或列数中较小的那一个</li>
<li>矩阵加法可能导致矩阵的秩变大</li>
<li>矩阵相乘后，秩只可能变小，不可能变大</li>
<li><span class="math inline">\(rankAA^T=rankA\)</span></li>
</ol>
<h4 id="矩阵的等价标准形">矩阵的等价标准形</h4>
<p>若矩阵 <span class="math inline">\(A\)</span> 的秩为 <span class="math inline">\(r\)</span>，那么经过有限次初等变换，总是能够化为下面这样的分块矩阵</p>
<p><span class="math display">\[
\begin{pmatrix}
    E_r &amp; 0\\
    0&amp;0
\end{pmatrix}
\]</span></p>
<p>当然，如果矩阵 <span class="math inline">\(A\)</span> 是一个满秩方阵，那么最后就是化为对应阶数的单位矩阵。上面这样的分块矩阵称为矩阵 <span class="math inline">\(A\)</span> 的等价标准形。</p>
<h4 id="矩阵的秩与线性方程组解的关系">矩阵的秩与线性方程组解的关系</h4>
<p>假如矩阵 <span class="math inline">\(A\)</span> 的规模是 <span class="math inline">\(m\times n\)</span>，那么</p>
<ol type="1">
<li>对于齐次线性方程组 <span class="math inline">\(A\boldsymbol{x} = \boldsymbol{0}\)</span>，其存在非0解的充分必要条件是 <span class="math inline">\(rankA &lt; n\)</span>；若 <span class="math inline">\(rankA=n\)</span>，那么这个齐次线性方程组只有全0解</li>
<li>对于非齐次线性方程组 <span class="math inline">\(A\boldsymbol{x} = \boldsymbol{b}\)</span>，其存在解的充分必要条件是 <span class="math inline">\(rankA = rank(A\boldsymbol{b})\)</span>；其存在唯一解的充分必要条件是 <span class="math inline">\(rank A = rank(A\boldsymbol{b}) = n\)</span>，如果 <span class="math inline">\(rank A = rank(A\boldsymbol{b}) &lt; n\)</span> 则该线性方程组存在无穷多个解</li>
</ol>
<p>线性方程组是否有解，可以通过机械设计上约束的概念来类比：</p>
<ol type="1">
<li>假如线性方程组引入了常数项之后，增广矩阵的秩比系数矩阵的秩要大，那么说明线性方程组出现了过约束情况，此时线性方程组是无解的</li>
<li>假如系数矩阵的秩恰好等于未知数的个数，那么说明线性方程组恰好对所有未知数都形成了约束，所以此时方程组存在唯一解</li>
<li>假如系数矩阵的秩小于未知数的个数，那么说明线性方程组此时出于欠约束的情况，至少有一个未知数没有受到约束，那么方程组就会存在无数个解</li>
</ol>
<h4 id="线性相关性">线性相关性</h4>
<p>线性相关性的理解和行列式是很类似的。对于两个二维向量 <span class="math inline">\(\boldsymbol{\alpha}_1, \boldsymbol{\alpha}_2\)</span>，假如这两个向量在直角坐标系下共线，那么就无法通过这两个向量的线性组合表示平面上的任意一个向量，此时这两个向量是线性相关的；假如这两个向量在直角坐标系下并不共线，那么一定能通过这两个向量的线性组合 <span class="math inline">\(k_1 \boldsymbol{\alpha}_1 + k_2 \boldsymbol{\alpha}_2\)</span> 表示平面上的任意一个向量，此时称这两个向量线性无关。</p>
<p>上升到三维空间也是同理。假如三个三维向量 <span class="math inline">\(\boldsymbol{\alpha}_1, \boldsymbol{\alpha}_2, \boldsymbol{\alpha}_3\)</span> 在直角坐标空间中共面，那么就无法通过这三个向量的线性组合表示三维空间中的任意一个向量，此时称这三个向量线性相关；假如这三个向量不共面，那么一定能够通过这三个向量的线性组合 <span class="math inline">\(k_1 \boldsymbol{\alpha}_1 + k_2 \boldsymbol{\alpha}_2 + k_3 \boldsymbol{\alpha}_3\)</span> 来表示三维空间中任意一个三维向量，此时称这三个向量线性无关。</p>
<p>以此类推，高维向量的线性相关性也是同理的。概括来说，假如一组向量之间满足线性无关条件，那么就一定可以用这一组向量作为基向量，通过这些向量的线性组合来表示高维空间中的任意一个高维向量；反过来，假如一组向量之间不满足线性无关条件，那么一定可以通过这一组向量中的一部分向量的线性组合，来表示其中的某一个向量。</p>
<h3 id="线性方程组求解方法以及解的结构">线性方程组求解方法以及解的结构</h3>
<h4 id="齐次线性方程组解的结构">齐次线性方程组解的结构</h4>
<p>对于齐次线性方程组 <span class="math inline">\(A \boldsymbol{x} = 0\)</span>，假如系数矩阵 <span class="math inline">\(A\)</span> 的规模为 <span class="math inline">\(m\times n\)</span>，秩为 <span class="math inline">\(r\)</span>，那么可以将系数矩阵化为行最简形</p>
<p><span class="math display">\[
A_1 = \begin{bmatrix}
    1 &amp; 0 &amp; \cdots &amp; 0 &amp; b_{11} &amp; \cdots &amp; b_{1n-r} \\
    0 &amp; 1 &amp; \cdots &amp; 0 &amp; b_{21} &amp; \cdots &amp; b_{2n-r} \\
    \vdots &amp; &amp; \ddots  &amp; &amp; &amp; \ddots\\
    0 &amp; 0 &amp; \cdots &amp; 1 &amp; b_{r1} &amp; \cdots &amp; b_{rn-r}\\
    0 &amp; 0 &amp; \cdots &amp; 0 &amp; 0 &amp; \cdots &amp; 0\\
    \vdots &amp; &amp; \ddots  &amp; &amp; &amp; \ddots\\
    0 &amp; 0 &amp; \cdots &amp; &amp; &amp; \cdots &amp; 0
\end{bmatrix}
\]</span></p>
<p>上面这个系数矩阵对应了这样的线性方程组</p>
<p><span class="math display">\[
\begin{pmatrix}
    x_1 \\ x_2 \\ \vdots \\ x_r
\end{pmatrix}
+
\begin{pmatrix}
    b_{11} &amp; b_{12} &amp; \cdots &amp; b_{1n-r}\\
    b_{21} &amp; b_{22} &amp; \cdots &amp; b_{2n-r}\\
    \vdots &amp; &amp; \ddots \\
    b_{r1} &amp; b_{r2} &amp; \cdots &amp; b_{rn-r}
\end{pmatrix}
\begin{pmatrix}
    x_{r+1} \\ x_{r+2} \\ \vdots \\ x_{n}
\end{pmatrix}
=\begin{pmatrix}
    0\\0\\\vdots \\ 0
\end{pmatrix}
\]</span></p>
<p>令</p>
<p><span class="math display">\[
\begin{pmatrix}
    x_{r+1} \\ x_{r+2} \\ \vdots \\ x_n
\end{pmatrix}
=
\begin{pmatrix}
    1 \\ 0 \\ \vdots \\ 0
\end{pmatrix}, \
\begin{pmatrix}
    0\\1\\ \vdots \\ 0
\end{pmatrix}, \cdots, \
\begin{pmatrix}
    0 \\ 0\\ \vdots \\ 1
\end{pmatrix}
\]</span></p>
<p>可以得到</p>
<p><span class="math display">\[
\begin{pmatrix}
    x_1 \\ x_2 \\ \vdots \\ x_r
\end{pmatrix}
=
\begin{pmatrix}
    -b_{11} \\ -b_{21} \\ \vdots \\ -b_{r1}
\end{pmatrix},\
\begin{pmatrix}
    -b_{12} \\ -b_{22} \\ \vdots \\ -b_{r2}
\end{pmatrix}, \
\cdots,\
\begin{pmatrix}
    -b_{1n-r} \\ -b_{2n-r} \\ \vdots \\ -b_{rn-r}
\end{pmatrix}
\]</span></p>
<p>也就是说，假如一个齐次线性方程组存在无穷多个解，那么必然可以在这个解的空间中找到 <span class="math inline">\(n-r\)</span> 个基向量，通过这一组基向量的线性组合，来表示这个解空间中的任意一个解。基向量组中的第 <span class="math inline">\(i\)</span> 个基向量为 <span class="math inline">\(\xi_i\)</span>，那么显然</p>
<p><span class="math display">\[
\xi_i = \begin{pmatrix}
    -b_{1i} \\ -b_{2i} \\ \vdots \\ -b_{ri} \\ \vdots \\ 1 \\ \vdots \\ 0
\end{pmatrix}
\]</span></p>
<p>其中第 <span class="math inline">\(i\)</span> 行元素为1。</p>
<p>所以，上述齐次线性方程组的通解就可以表示为</p>
<p><span class="math display">\[
\boldsymbol{x} = k_1 \xi_1 + k_2 \xi_2 + \cdots + k_{n-r} \xi_{n-r}
\]</span></p>
<p>这个所谓的通解也称为齐次线性方程组 <span class="math inline">\(A\boldsymbol{x}=0\)</span> 的<strong>基础解系</strong>。</p>
<p>总结一下，<strong>齐次线性方程组解的空间维度恰为未知数的个数 <span class="math inline">\(n\)</span> 减去系数矩阵的秩 <span class="math inline">\(r\)</span></strong>，记相应的解空间为 <span class="math inline">\(\mathcal N(A)\)</span>，那么 <span class="math inline">\(dim\mathcal N(A) = n-rankA\)</span>。</p>
<h4 id="非齐次线性方程组解的结构">非齐次线性方程组解的结构</h4>
<p>非齐次线性方程组和齐次线性方程组的区别在于多一个常数项向量 <span class="math inline">\(\boldsymbol{b}\)</span>。首先，要判断非齐次线性方程组有解，即判断增广矩阵的秩是否与系数矩阵的秩相等。在确认非齐次线性方程组有解以后，将增广矩阵化简为行最简形，得到</p>
<p><span class="math display">\[
(A \boldsymbol{b})_1 = \begin{bmatrix}
    1 &amp; 0 &amp; \cdots &amp; 0 &amp; b_{11} &amp; \cdots &amp; b_{1n-r} &amp; c_1\\
    0 &amp; 1 &amp; \cdots &amp; 0 &amp; b_{21} &amp; \cdots &amp; b_{2n-r} &amp; c_2\\
    \vdots &amp; &amp; \ddots  &amp; &amp; &amp; \ddots\\
    0 &amp; 0 &amp; \cdots &amp; 1 &amp; b_{r1} &amp; \cdots &amp; b_{rn-r} &amp; c_r\\
    0 &amp; 0 &amp; \cdots &amp; 0 &amp; 0 &amp; \cdots &amp; 0 &amp; 0\\
    \vdots &amp; &amp; \ddots  &amp; &amp; &amp; \ddots \\
    0 &amp; 0 &amp; \cdots &amp; &amp; &amp; \cdots &amp; 0 &amp; 0
\end{bmatrix}
\]</span></p>
<p>对于解来说，可以令</p>
<p><span class="math display">\[
\begin{pmatrix}
    x_{r+1} \\ x_{r+2} \\ \vdots \\ x_n
\end{pmatrix}=
\begin{pmatrix}
    0\\0\\ \vdots \\ 0
\end{pmatrix}
\]</span></p>
<p>那么可以得到一个特殊的解</p>
<p><span class="math display">\[
\boldsymbol{x} = \begin{pmatrix}
    c_1 \\ c_2 \\ \vdots \\ c_r \\ 0 \\ \vdots \\ 0
\end{pmatrix}
\]</span></p>
<p>所以，非齐次线性方程组的解可以表示为对应的齐次线性方程组的基础解系加上上面这个特解，即</p>
<p><span class="math display">\[
\boldsymbol{x} = \begin{pmatrix}
    c_1 \\ c_2 \\ \vdots \\ c_r \\ 0 \\ \vdots \\ 0
\end{pmatrix} + k_1 \xi_1 + k_2 \xi_2 + \cdots + k_{n-r} \xi_{n-r}
\]</span></p>
<p>可以将这个特解记作 <span class="math inline">\(\xi_0\)</span>，那么非齐次线性方程组的解就可以表示为</p>
<p><span class="math display">\[
\boldsymbol{x} = \xi_0 + k_1 \xi_1 + k_2 \xi_2 + \cdots + k_{n-r} \xi_{n-r}
\]</span></p>
<h4 id="空间上的理解">空间上的理解</h4>
<p>齐次线性方程组的基础解系可以构成一个向量空间，因为基础解系的表达式实际上就是一组基向量的线性组合。这个向量空间在 <span class="math inline">\(n\)</span> 维空间中，可以视为一个 <span class="math inline">\(n-r\)</span> 维的超平面。非齐次线性方程组的解就不能构成向量空间了，因为存在特解 <span class="math inline">\(\xi_0\)</span>，导致这个表达式不再是一组基向量的线性组合，但是仍然可以看作是一个 <span class="math inline">\(n-r\)</span> 维的超平面，只不过由于存在 <span class="math inline">\(\xi_0\)</span> 导致这个超平面不经过 <span class="math inline">\(n\)</span> 维空间的原点。</p>
<h2 id="相似矩阵">相似矩阵</h2>
<h3 id="方阵的特征值与特征向量">方阵的特征值与特征向量</h3>
<p>对于一个方阵 <span class="math inline">\(A\)</span>，假如存在一个值 <span class="math inline">\(\lambda\)</span>，使得 <span class="math inline">\(A \boldsymbol{x} = \lambda \boldsymbol{x}\)</span> 存在非零解，那么称 <span class="math inline">\(\lambda\)</span> 为方阵 <span class="math inline">\(A\)</span> 的特征值，此时 <span class="math inline">\(\boldsymbol{x}\)</span> 为方阵 <span class="math inline">\(A\)</span> 关于特征值 <span class="math inline">\(\lambda\)</span> 的特征向量。</p>
<p>因为齐次线性方程组存在非零解的条件是 <span class="math inline">\(rankA &lt; n\)</span>，那么从行列式的角度来看，假如系数矩阵的行列式为0，那么相当于满足了 <span class="math inline">\(rankA&lt;n\)</span> 的条件，所以上面的问题等价于 <span class="math inline">\(det(\lambda E - A) = 0\)</span>。由于 <span class="math inline">\(det(\lambda E -A)\)</span> 是一个关于 <span class="math inline">\(\lambda\)</span> 的多项式，又称为矩阵 <span class="math inline">\(A\)</span> 的<strong>特征多项式</strong>，可以表示为 <span class="math inline">\(f(\lambda)\)</span>，那么上述问题变为求出</p>
<p><span class="math display">\[
f(\lambda) = 0
\]</span></p>
<p>的解。</p>
<p><span class="math inline">\(n\)</span> 阶方阵 <span class="math inline">\(A\)</span> 的特征多项式是一个 <span class="math inline">\(n\)</span> 阶多项式，因此在复数范围内存在 <span class="math inline">\(n\)</span> 个解，那么特征多项式可以表示为</p>
<p><span class="math display">\[
f(\lambda) = (\lambda - \lambda_1)(\lambda - \lambda_2)\cdots(\lambda-\lambda_n)
\]</span></p>
<h4 id="特征值与迹和行列式的关系">特征值与迹和行列式的关系</h4>
<p><span class="math inline">\(n\)</span> 阶方阵 <span class="math inline">\(A\)</span> 的所有特征值之和恰为 <span class="math inline">\(A\)</span> 的迹；所有特征值之积恰为 <span class="math inline">\(A\)</span> 的行列式。</p>
<ol type="1">
<li><span class="math inline">\(\sum_{i=1}^n \lambda_i = trA\)</span></li>
<li><span class="math inline">\(\prod_{i=1}^n \lambda_i = detA\)</span></li>
</ol>
<h4 id="不同矩阵特征值之间的关系">不同矩阵特征值之间的关系</h4>
<ol type="1">
<li>矩阵转置不会影响特征值</li>
<li>对于任意正整数 <span class="math inline">\(m\)</span>，有 <span class="math inline">\(A^m\)</span> 的特征值为 <span class="math inline">\(\lambda^m\)</span></li>
<li><span class="math inline">\(A^{-1}\)</span> 的特征值恰为 <span class="math inline">\(\lambda^{-1}\)</span></li>
<li><span class="math inline">\(A^*\)</span> 的特征值恰为 <span class="math inline">\(\lambda^{-1}detA\)</span></li>
<li>若方阵满足 <span class="math inline">\(A^k = 0\)</span>，则称方阵 <span class="math inline">\(A\)</span> 为<strong>零幂阵</strong>，其特征值全为0</li>
<li>若方阵满足 <span class="math inline">\(A^2=A\)</span>，则称方阵 <span class="math inline">\(A\)</span> 为<strong>等幂阵</strong>，其特征值为1或0</li>
</ol>
<h4 id="特征向量的线性无关性质">特征向量的线性无关性质</h4>
<p>如果方阵 <span class="math inline">\(A\)</span> 有 <span class="math inline">\(n\)</span> 个互不相同的特征值，那么必有 <span class="math inline">\(n\)</span> 个线性无关的特征向量。</p>
<h3 id="矩阵的相似对角化">矩阵的相似对角化</h3>
<h4 id="矩阵的相似变换">矩阵的相似变换</h4>
<p>前面提到了相似矩阵的定义，是说矩阵 <span class="math inline">\(A\)</span> 如果能够通过有限次初等变换，转换为矩阵 <span class="math inline">\(B\)</span>，那么称矩阵 <span class="math inline">\(A\)</span> 与矩阵 <span class="math inline">\(B\)</span> 相似，写作 <span class="math inline">\(PAQ = B\)</span>，则 <span class="math inline">\(A \sim B\)</span>。事实上，如果矩阵 <span class="math inline">\(A\)</span> 和矩阵 <span class="math inline">\(B\)</span> 相似，那么用一个初等矩阵和它的逆就足以将矩阵 <span class="math inline">\(A\)</span> 转换为矩阵 <span class="math inline">\(B\)</span>，即</p>
<p><span class="math display">\[
P^{-1} A P = B
\]</span></p>
<p>这个相似矩阵的定义是可以证明的，但我懒得去证明，意义不是很大，应用性质为主。上面的矩阵 <span class="math inline">\(P\)</span> 被称为<strong>过渡矩阵</strong>，上面的变换称为对矩阵 <span class="math inline">\(A\)</span> 做<strong>相似变换</strong>。</p>
<p>如果两个矩阵相似，那么这两个矩阵的特征多项式相同。也就是说，相似变换不改变矩阵的特征值和特征向量。也有一种可能性，是因为矩阵的特征值和特征向量不会因为初等变换而发生改变，所以才被称为<em>特征</em>。</p>
<h4 id="相似对角化">相似对角化</h4>
<p>前面提到，对于矩阵 <span class="math inline">\(A\)</span> 的某一个特征值 <span class="math inline">\(\lambda_i\)</span>，应满足 <span class="math inline">\(det(\lambda_i E - A) = 0\)</span>。由于相似变换并不会影响矩阵的特征值，所以如果能将方阵 <span class="math inline">\(A\)</span> 通过相似变换，变为对角矩阵，那么 <span class="math inline">\(\lambda_i\)</span> 只要取这个对角矩阵对角线上任意一个元素的值，就都能够满足 <span class="math inline">\(det(\lambda_i E -A) =0\)</span> 的条件了。换言之，假如方阵 <span class="math inline">\(A\)</span> 能够通过形似变换转变为一个对角矩阵，那么对角线上所有的元素都是 <span class="math inline">\(A\)</span> 的特征值。</p>
<p>假如一个方阵 <span class="math inline">\(A\)</span> 与一个对角阵 <span class="math inline">\(\Lambda\)</span> 相似，那么这个方阵的相似变换就被称为<strong>相似对角化</strong>。相似对角化的过程相当于变为</p>
<p><span class="math display">\[
P^{-1}AP = \Lambda
\]</span></p>
<p>方程两边同时左乘过渡矩阵 <span class="math inline">\(P\)</span>，有</p>
<p><span class="math display">\[
AP = P\Lambda
\]</span></p>
<p>将 <span class="math inline">\(\Lambda\)</span> 展开，可以观察到</p>
<p><span class="math display">\[
AP = P diag(\lambda_1, \lambda_2 , \cdots , \lambda_n)
\]</span></p>
<p>注意到，过渡矩阵 <span class="math inline">\(P\)</span> 可以表示为</p>
<p><span class="math display">\[
P =
\begin{pmatrix}
    \boldsymbol{p}_1 &amp; \boldsymbol{p}_2 &amp; \cdots &amp; \boldsymbol{p}_n
\end{pmatrix}
\]</span></p>
<p>那么</p>
<p><span class="math display">\[
P diag(\lambda_1, \lambda_2, \cdots, \lambda_n) =\begin{pmatrix}
    \lambda_1 \boldsymbol{p}_1 &amp; \lambda_2 \boldsymbol{p}_2 &amp; \cdots &amp; \lambda_n \boldsymbol{p}_n
\end{pmatrix}
\]</span></p>
<p>也就是说</p>
<p><span class="math display">\[
A\begin{pmatrix}
    \boldsymbol{p}_1 &amp;  \boldsymbol{p}_2 &amp; \cdots &amp;  \boldsymbol{p}_n
\end{pmatrix}=\begin{pmatrix}
    \lambda_1 \boldsymbol{p}_1 &amp; \lambda_2 \boldsymbol{p}_2 &amp; \cdots &amp; \lambda_n \boldsymbol{p}_n
\end{pmatrix}
\]</span></p>
<p>注意到特征值和特征向量的定义式为</p>
<p><span class="math display">\[
A\boldsymbol{x} = \lambda \boldsymbol{x}
\]</span></p>
<p>很容易观察到，上面这个线性方程组中的每一条方程都满足特征值和特征向量的定义式，也就是说，实际上过渡矩阵 <span class="math inline">\(P\)</span> 中的每一个列向量都是矩阵 <span class="math inline">\(A\)</span> 的特征向量，<span class="math inline">\(\boldsymbol{p}_i\)</span> 就是特征值 <span class="math inline">\(\lambda_i\)</span> 的特征向量。</p>
<p>注意，根据 <span class="math inline">\(P^{-1}AP=\Lambda\)</span>，过渡矩阵 <span class="math inline">\(P\)</span> 必须是一个可逆矩阵。<strong>事实上，方阵 <span class="math inline">\(A\)</span> 能够进行相似对角化的充要条件，就是过渡矩阵 <span class="math inline">\(P\)</span> 可逆。</strong>而过渡矩阵完全是由特征向量组成的，所以过渡矩阵可逆，等价于方阵 <span class="math inline">\(A\)</span> 的所有特征向量都是线性无关的。即，方阵 <span class="math inline">\(A\)</span> 能够进行相似对角化的充要条件，就是方阵 <span class="math inline">\(A\)</span> 的所有特征向量线性无关。</p>
<p>注意，所有特征向量线性无关和特征值互不相同并不是等价的，即便方阵 <span class="math inline">\(A\)</span> 的所有特征向量都线性无关，也有可能出现有相同特征值的情况。所以方阵 <span class="math inline">\(A\)</span> 的特征值互不相同是方阵 <span class="math inline">\(A\)</span> 可以进行相似对角化的充分条件，而并非必要条件。但如果方阵 <span class="math inline">\(A\)</span> 不能进行相似对角化，那么方阵 <span class="math inline">\(A\)</span> 的特征多项式必然存在重根。</p>
<h4 id="特征值与特征向量的求解">特征值与特征向量的求解</h4>
<p>事实上，我们通常会先写出目标矩阵的特征多项式 <span class="math inline">\(f(\lambda)\)</span>，然后通过多项式求根的方式，求出矩阵的特征值，再利用这些特征值，根据 <span class="math inline">\((\lambda E -A)\boldsymbol{x} = 0\)</span> 解齐次线性方程组，求出与特征值相对应的特征向量。</p>
<h3 id="一些特殊矩阵">一些特殊矩阵</h3>
<h4 id="实对称矩阵">实对称矩阵</h4>
<p>如果方阵 <span class="math inline">\(A = A^T\)</span>，并且所有元素都是实数，那么这个方阵一定能被相似对角化。而且，相似对角化中的过渡矩阵 <span class="math inline">\(P\)</span> 满足 <span class="math inline">\(P^T = P^{-1}\)</span>，或者可以写为 <span class="math inline">\(PP^T=E\)</span>，这种矩阵称为<strong>正交矩阵</strong>。</p>
<h4 id="合同">合同</h4>
<p>如果存在可逆矩阵 <span class="math inline">\(P\)</span>，使得 <span class="math inline">\(PAP^T = B\)</span> 成立，那么称矩阵 <span class="math inline">\(A\)</span> 与矩阵 <span class="math inline">\(B\)</span> <strong>合同</strong>。显然，如果方阵 <span class="math inline">\(A\)</span> 可以被相似对角化为对角阵 <span class="math inline">\(\Lambda\)</span>，那么 <span class="math inline">\(A\)</span> 与 <span class="math inline">\(\Lambda\)</span> 既满足相似条件，又满足合同条件。</p>
<h4 id="x定矩阵">X定矩阵</h4>
<p>正定矩阵是一种特殊的实对称矩阵，假如实对称阵 <span class="math inline">\(A\)</span> 正定，那么满足对任意非0列向量 <span class="math inline">\(\boldsymbol{x}\)</span>，都有 <span class="math inline">\(\boldsymbol{x}^TA\boldsymbol{x}&gt;0\)</span> 成立。</p>
<p>另外，还有半正定矩阵、负定矩阵和半负定矩阵，区别在于上面这个不等式的符号不同。如果出现了半这个修饰词，说明上述不等式可能存在相等的情况。</p>
<h4 id="x定矩阵的几何意义">X定矩阵的几何意义</h4>
<p>上面这几种特殊实对称矩阵的几何意义在于，描述了一个任意非0向量经过这个实对称矩阵的线性变换以后，和原向量形成的夹角关系。</p>
<p>以正定矩阵为例，我们将 <span class="math inline">\(\boldsymbol{x}^T A\boldsymbol{x}\)</span> 拆分成两部分：</p>
<ol type="1">
<li>先令 <span class="math inline">\(\boldsymbol{y} = A \boldsymbol{x}\)</span>，这很明显，是将矩阵 <span class="math inline">\(A\)</span> 视作一种线性变换关系，对列向量 <span class="math inline">\(\boldsymbol{x}\)</span> 进行相应的线性变换操作，得到列向量 <span class="math inline">\(\boldsymbol{y}\)</span></li>
<li><span class="math inline">\(\boldsymbol{x}^T A \boldsymbol{x} = \boldsymbol{x}^T \boldsymbol{y}\)</span>，这个操作可以看作求 <span class="math inline">\(\boldsymbol{x}\)</span> 和 <span class="math inline">\(\boldsymbol{y}\)</span> 这两个向量的内积</li>
<li>如果 <span class="math inline">\(A\)</span> 是一个正定矩阵，那么 <span class="math inline">\(\boldsymbol{x}^T \boldsymbol{y} &gt; 0\)</span>，而内积又等于两个向量模之积乘以其夹角的余弦值，即 <span class="math inline">\(\boldsymbol{x}^T \boldsymbol{y} = |\boldsymbol{x}|\cdot |\boldsymbol{y}| \cdot cos\theta\)</span></li>
<li><span class="math inline">\(\boldsymbol{x}\)</span> 是一个任意的非0向量，那么 <span class="math inline">\(|\boldsymbol{x}| \cdot |\boldsymbol{y}| &gt; 0\)</span>，所以上述条件指向的其实是 <span class="math inline">\(cos\theta&gt;0\)</span>，即两个向量的夹角为锐角</li>
</ol>
<p>同理，半正定矩阵的几何意义，指对任意一个非0向量做线性变换以后得到的向量，与原向量的夹角小于等于90°；负定矩阵的几何意义则是对任意一个非0向量做线性变换以后得到的向量，与原向量的夹角为钝角。</p>
]]></content>
      <categories>
        <category>University</category>
      </categories>
      <tags>
        <tag>Mathematics</tag>
        <tag>Matrix Analysis</tag>
      </tags>
  </entry>
</search>
